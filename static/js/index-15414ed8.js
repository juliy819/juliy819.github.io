import{l as L,e as H,S as x,aa as _,u,H as wn,R as h,a8 as S,bl as c,ah as t,U as V,r as F,f as Dn,a9 as Q,b0 as k,j as v,c as K,b as ln,ag as On,aL as cn,aJ as pn,aP as J,F as Y,aO as an,aD as I,w as Rn,X as qn,aR as $n,h as Un,a7 as Vn}from"./@vue-2d0ddfb4.js";import{c as Yn,d as W}from"./pinia-948ba97c.js";import{i as Kn}from"./pinia-plugin-persist-4bd0ee57.js";import{n as on}from"./nprogress-29a3b628.js";import{u as Fn,a as En,b as Gn,c as Jn,d as Wn,e as mn,f as Zn}from"./@vueuse-4d6fb19c.js";import{d as nr,u as rr,a as er,b as tr,_ as sr,c as ar,N as or,e as ir,f as Z,g as nn,h as rn,i as en,j as kn,k as tn,l as Mn,m as lr,n as cr,o as pr,p as mr,q as dr,r as dn}from"./naive-ui-b87942d2.js";import{a as Ln}from"./js-cookie-cf83ad76.js";import{a as ur}from"./axios-aba6f0e0.js";import{u as sn,a as gr,c as _r,b as hr}from"./vue-router-2a5450bb.js";import{d as yr}from"./dayjs-aaaa0bae.js";import"./swiper-d1934b6f.js";import{V as Sn,v as br,_ as fr,d as vr}from"./@kangc-6220f0f5.js";import{P as Tr}from"./prismjs-08ac3f6b.js";import{i as xr}from"./v-viewer-8afc779e.js";import"./viewerjs-3fd8af48.js";import"./vue-demi-71ba0ef2.js";import"./@babel-061b4810.js";import"./vueuc-27e3b830.js";import"./evtd-b614532e.js";import"./seemly-76b7b838.js";import"./@css-render-c34b42f4.js";import"./vooks-d838407f.js";import"./vdirs-b0483831.js";import"./@juggle-41516555.js";import"./css-render-d3958e6a.js";import"./@emotion-8a8e73f6.js";import"./lodash-es-0dc9900e.js";import"./treemate-25c27bff.js";import"./async-validator-dee29e8b.js";import"./date-fns-975a2d8f.js";import"./ssr-window-c9202916.js";import"./vue-a1bd1397.js";import"./markdown-it-emoji-4f1b57fa.js";(function(){const r=document.createElement("link").relList;if(r&&r.supports&&r.supports("modulepreload"))return;for(const i of document.querySelectorAll('link[rel="modulepreload"]'))s(i);new MutationObserver(i=>{for(const l of i)if(l.type==="childList")for(const p of l.addedNodes)p.tagName==="LINK"&&p.rel==="modulepreload"&&s(p)}).observe(document,{childList:!0,subtree:!0});function e(i){const l={};return i.integrity&&(l.integrity=i.integrity),i.referrerPolicy&&(l.referrerPolicy=i.referrerPolicy),i.crossOrigin==="use-credentials"?l.credentials="include":i.crossOrigin==="anonymous"?l.credentials="omit":l.credentials="same-origin",l}function s(i){if(i.ep)return;i.ep=!0;const l=e(i);fetch(i.href,l)}})();const zn=Yn();zn.use(Kn);const wr=["fill","href"],Fr=L({__name:"SvgIcon",props:{prefix:{type:String,default:"icon"},iconClass:{type:String,required:!1},color:{type:String},size:{type:String,default:"1rem"}},setup(n){const r=n,e=H(()=>`#${r.prefix}-${r.iconClass}`);return(s,i)=>(h(),x("svg",{style:wn("width:"+n.size+";height:"+n.size),"aria-hidden":"true",class:"svg-icon"},[_("use",{fill:n.color,href:u(e)},null,8,wr)],4))}});const X=(n,r)=>{const e=n.__vccOpts||n;for(const[s,i]of r)e[s]=i;return e},G=X(Fr,[["__scopeId","data-v-4a1c7151"]]);if(typeof window<"u"){let n=function(){var r=document.body,e=document.getElementById("__svg__icons__dom__");e||(e=document.createElementNS("http://www.w3.org/2000/svg","svg"),e.style.position="absolute",e.style.width="0",e.style.height="0",e.id="__svg__icons__dom__",e.setAttribute("xmlns","http://www.w3.org/2000/svg"),e.setAttribute("xmlns:link","http://www.w3.org/1999/xlink")),e.innerHTML='<symbol class="icon" viewBox="0 0 1024 1024"  id="icon-album"><path d="M883.4 163.2H136.7c-40.5 0-72.8 24.9-72.8 55.6v583.9c0 31.9 33.3 57.9 74 57.9h751.2c35.5 3.4 67.2-22.4 71-57.9V218.8c0-30.7-34.5-55.6-77.1-55.6h.4zM358.9 293.4c40.7-.1 73.9 32.8 74 73.5.1 40.7-32.8 73.9-73.5 74s-73.9-32.8-74-73.5v-.2c0-40.7 32.9-73.6 73.5-73.8zm457 483.8H209.5c-23.5 0-28.2-13.6-12.4-29.8l130.1-136.9c16.7-16.5 42.7-19 62.2-5.9l95.8 67.6c19.2 13.3 45.3 9.8 60.4-8l221.9-268.9c14.6-17.6 29.1-13.6 32.4 8.5l50.7 334c2.9 18.7-10 36.2-28.7 39.1-1.9.3-4 .4-6 .3z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-angle-left"><path d="m319.4 478 272-272c18.8-18.8 49.2-18.8 67.8 0l45.2 45.2c18.8 18.8 18.8 49.2 0 67.8L511.8 512l192.8 192.8c18.8 18.8 18.8 49.2 0 67.8L659.4 818c-18.8 18.8-49.2 18.8-67.8 0l-272-272c-19-18.8-19-49.2-.2-68z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-angle-right"><path d="m704.6 546-272 272c-18.8 18.8-49.2 18.8-67.8 0l-45.2-45.2c-18.8-18.8-18.8-49.2 0-67.8l192.8-192.8-192.8-192.8c-18.8-18.8-18.8-49.2 0-67.8l45-45.6c18.8-18.8 49.2-18.8 67.8 0l272 272c19 18.8 19 49.2.2 68z" /></symbol><symbol class="icon" viewBox="0 0 1092 1024"  id="icon-archive"><path d="M921.463 307.746a109.227 109.227 0 0 1 109.227 109.227v477.866a109.227 109.227 0 0 1-109.227 109.227H170.53A109.227 109.227 0 0 1 61.303 894.84V416.973A109.227 109.227 0 0 1 170.53 307.746zm0 81.92H170.53a27.307 27.307 0 0 0-27.307 27.307v477.866c0 15.02 12.22 27.307 27.307 27.307h750.933a27.307 27.307 0 0 0 27.307-27.307V416.973a27.307 27.307 0 0 0-27.307-27.307zM781.926 507.221c7.305 12.493-10.513 35.294-10.513 35.294L526.336 827.324a42.598 42.598 0 0 1-58.982 6.485S354.509 696.593 350.618 691.337c-11.128-17.818-24.167-28.74-23.825-49.835.477-13.653 17.749-22.733 17.749-22.733 35.908-3.14 93.525 47.24 137.42 81.237 10.582 8.192 27.717 7.51 36.592-1.843 52.77-50.449 132.437-129.706 194.764-188.211 18.705-18.295 55.365-28.535 68.608-2.73zm64.444-363.178a40.96 40.96 0 1 1 0 81.92H245.623a40.96 40.96 0 1 1 0-81.92H846.37zM709.837 7.509a40.96 40.96 0 1 1 0 81.92h-327.68a40.96 40.96 0 1 1 0-81.92h327.68z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-arrow-down"><path d="M448 789.312V0h128v789.312l234.688-234.624L896 640l-384 384-384-384 85.312-85.312L448 789.312z" fill="#373D41" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-arrow-up"><path d="M576 234.688V1024H448V234.688L213.312 469.312 128 384 512 0l384 384-85.312 85.312L576 234.688z" fill="#373D41" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-article"><path d="M928 608c0-35.36-28.64-64-64-64H608c-35.36 0-64 28.64-64 64v256c0 35.36 28.64 64 64 64h256c35.36 0 64-28.64 64-64V608Zm-448 0c0-35.36-28.64-64-64-64H160c-35.36 0-64 28.64-64 64v256c0 35.36 28.64 64 64 64h256c35.36 0 64-28.64 64-64V608Zm0-448c0-35.36-28.64-64-64-64H160c-35.36 0-64 28.64-64 64v256c0 35.36 28.64 64 64 64h256c35.36 0 64-28.64 64-64V160Zm448 0c0-35.36-28.64-64-64-64H608c-35.36 0-64 28.64-64 64v256c0 35.36 28.64 64 64 64h256c35.36 0 64-28.64 64-64V160Z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-article_link"><path d="M675.328 117.717a21.333 21.333 0 0 1-16.341 39.403A382.763 382.763 0 0 0 512 128c-212.075 0-384 171.925-384 384s171.925 384 384 384 384-171.925 384-384c0-51.115-9.984-100.8-29.12-146.987a21.333 21.333 0 0 1 39.403-16.341A425.43 425.43 0 0 1 938.667 512c0 235.648-191.019 426.667-426.667 426.667S85.333 747.648 85.333 512 276.352 85.333 512 85.333c56.747 0 112 11.094 163.328 32.384zM504.448 398.87a21.29 21.29 0 0 1 .043-30.208l82.986-82.986a63.85 63.85 0 0 1 90.432.021l60.374 60.395a63.915 63.915 0 0 1 .064 90.41L587.349 587.5a63.83 63.83 0 0 1-90.41-.043l-30.23-30.23a21.27 21.27 0 0 1 0-30.165 21.29 21.29 0 0 1 30.187 0l30.208 30.23a21.163 21.163 0 0 0 30.08.042l150.997-150.997a21.248 21.248 0 0 0-.042-30.08l-60.395-60.373a21.184 21.184 0 0 0-30.101-.022l-82.987 82.987a21.333 21.333 0 0 1-30.208 0zm15.104 226.262a21.29 21.29 0 0 1-.043 30.208l-82.986 82.986a63.85 63.85 0 0 1-90.432-.021l-60.374-60.395a63.915 63.915 0 0 1-.064-90.41L436.651 436.5a63.83 63.83 0 0 1 90.41.043l30.23 30.23a21.27 21.27 0 0 1 0 30.165 21.29 21.29 0 0 1-30.187 0l-30.208-30.23a21.163 21.163 0 0 0-30.08-.042L315.819 617.664a21.248 21.248 0 0 0 .042 30.08l60.395 60.373a21.184 21.184 0 0 0 30.101.022l82.987-82.987a21.333 21.333 0 0 1 30.208 0z" fill="#3D3D3D" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-article_share"><path d="M512 42.667a32 32 0 0 1 0 64c-223.85 0-405.333 181.482-405.333 405.333S288.149 917.333 512 917.333 917.333 735.851 917.333 512a32 32 0 0 1 64 0c0 259.2-210.133 469.333-469.333 469.333S42.667 771.2 42.667 512 252.8 42.667 512 42.667zm233.685 119.466 2.283 2.07 90.496 90.496a32 32 0 0 1 2.09 42.986l-2.09 2.283-90.496 90.496a32 32 0 0 1-47.339-42.965l2.07-2.283 35.882-35.883h-77.248A138.667 138.667 0 0 0 522.752 443.03l-.085 4.971v128a32 32 0 0 1-63.851 3.072l-.15-3.072V448a202.667 202.667 0 0 1 196.907-202.581l5.76-.086h77.248L702.7 209.451a32 32 0 0 1-2.07-42.966l2.07-2.282a32 32 0 0 1 42.986-2.091z" fill="#131415" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-author"><path d="M513.457 41.354c-133.378 2.838-245 49.19-332.973 137.16C92.512 266.489 46.16 378.11 43.324 511.489c2.837 133.378 49.188 244.055 137.16 332.026 87.973 87.974 199.595 134.325 332.973 137.163 133.378-2.838 244.055-49.19 332.026-137.16s134.325-198.65 137.163-332.029c-2.838-133.378-49.19-244.055-137.16-332.026-87.974-88.919-198.649-135.27-332.029-138.108zm297.974 757.703c-23.65-11.353-49.189-23.649-74.73-26.486-67.16-5.676-108.782-16.081-124.863-32.162-15.137-16.083-21.758-38.784-18.918-68.11.945-17.97 5.675-28.376 16.08-33.108 10.406-4.728 21.756-31.217 33.109-78.514 3.785-14.188 7.568-25.54 12.298-34.053 4.728-8.513 12.296-26.487 21.756-55.81 4.73-20.811 4.73-33.11-.945-35.945-5.676-2.837-9.46-3.785-10.404-2.837l4.724-20.813c2.838-13.243 4.729-29.324 6.621-47.297 5.677-47.297-3.783-87.974-28.379-122.028-24.593-34.999-69.998-52.972-137.16-54.864-59.595.945-90.812 24.595-125.81 53.92-38.785 30.27-52.028 70.945-41.622 122.972 7.567 38.784 18.918 70.945 11.35 68.108-.945-.946-4.728 0-9.458 2.837-4.73 2.838-5.675 15.136-1.892 35.945 10.405 25.54 17.973 43.514 23.648 52.974 5.676 9.458 9.458 21.756 12.298 36.89 9.46 46.351 18.918 71.892 29.324 76.62 10.405 4.73 17.026 17.028 20.81 35 4.73 29.325-.945 52.026-17.972 68.11-17.026 16.08-57.703 26.485-122.028 32.16-23.648 2.838-52.027 14.189-74.728 25.542C141.702 722.432 99.135 622.16 98.188 511.486c2.837-117.297 43.514-214.729 122.027-293.244S396.162 99.054 513.46 96.215c117.295 2.837 214.73 43.514 292.297 122.027 78.513 78.513 119.19 175.947 122.027 293.244-.949 112.57-43.516 212.838-116.352 287.57z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-badge"><path d="M1024 512c0-75.4-47.4-139.8-114.2-164.8 29.4-64.8 17.6-143.8-35.8-197.2-53.4-53.4-132.4-65.2-197.2-35.8C651.8 47.4 587.4 0 512 0S372.2 47.4 347.2 114.2C282.4 84.8 203.2 96.6 150 150c-53.4 53.4-65.2 132.4-35.8 197.2C47.4 372.2 0 436.6 0 512s47.4 139.8 114.2 164.8C84.8 741.6 96.6 820.8 150 874c53.2 53.2 132.2 65.4 197.2 35.8 25 66.6 89.4 114.2 164.8 114.2s139.8-47.4 164.8-114.2c65.2 29.6 144 17.4 197.2-35.8 53.4-53.4 65.2-132.4 35.8-197.2 66.8-25 114.2-89.4 114.2-164.8zm-289.6-88.5L472.32 683.48c-8.62 8.56-22.56 8.5-31.1-.12L289.78 530.7c-8.56-8.62-8.5-22.56.12-31.12l52.06-51.64c8.62-8.56 22.56-8.5 31.12.12l84.3 84.98 194.4-192.84c8.62-8.56 22.56-8.5 31.1.12l51.64 52.06c8.56 8.64 8.52 22.58-.12 31.12z" fill="#ea387e" /></symbol><symbol class="icon" viewBox="0 0 1129 1024"  id="icon-bilibili"><path d="M234.909 9.656a80.468 80.468 0 0 1 68.398 0 167.374 167.374 0 0 1 41.843 30.578l160.937 140.82h115.07l160.936-140.82a168.983 168.983 0 0 1 41.843-30.578A80.468 80.468 0 0 1 930.96 76.445a80.468 80.468 0 0 1-17.703 53.914 449.818 449.818 0 0 1-35.406 32.187 232.553 232.553 0 0 1-22.531 18.508h100.585a170.593 170.593 0 0 1 118.289 53.109 171.397 171.397 0 0 1 53.914 118.288v462.693a325.897 325.897 0 0 1-4.024 70.007 178.64 178.64 0 0 1-80.468 112.656 173.007 173.007 0 0 1-92.539 25.75h-738.7a341.186 341.186 0 0 1-72.421-4.024A177.835 177.835 0 0 1 28.91 939.065a172.202 172.202 0 0 1-27.36-92.539V388.662a360.498 360.498 0 0 1 0-66.789A177.03 177.03 0 0 1 162.487 178.64h105.414c-16.899-12.07-31.383-26.555-46.672-39.43a80.468 80.468 0 0 1-25.75-65.984 80.468 80.468 0 0 1 39.43-63.57M216.4 321.873a80.468 80.468 0 0 0-63.57 57.937 108.632 108.632 0 0 0 0 30.578v380.615a80.468 80.468 0 0 0 55.523 80.469 106.218 106.218 0 0 0 34.601 5.632h654.208a80.468 80.468 0 0 0 76.444-47.476 112.656 112.656 0 0 0 8.047-53.109v-354.06a135.187 135.187 0 0 0 0-38.625 80.468 80.468 0 0 0-52.304-54.719 129.554 129.554 0 0 0-49.89-7.242H254.22a268.764 268.764 0 0 0-37.82 0zm0 0" fill="#ff5ca1" /><path d="M348.369 447.404a80.468 80.468 0 0 1 55.523 18.507 80.468 80.468 0 0 1 28.164 59.547v80.468a80.468 80.468 0 0 1-16.094 51.5 80.468 80.468 0 0 1-131.968-9.656 104.609 104.609 0 0 1-10.46-54.719v-80.468a80.468 80.468 0 0 1 70.007-67.593zm416.02 0a80.468 80.468 0 0 1 86.102 75.64v80.468a94.148 94.148 0 0 1-12.07 53.11 80.468 80.468 0 0 1-132.773 0 95.757 95.757 0 0 1-12.875-57.133V519.02a80.468 80.468 0 0 1 70.007-70.812zm0 0" fill="#ff5ca1" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-calendar"><path d="M314.9 533.9h38.9c28.7 0 51.9-23.2 51.9-51.9s-23.2-51.9-51.9-51.9h-38.9c-28.7 0-51.9 23.2-51.9 51.9s23.2 51.9 51.9 51.9zm177.6 0h38.9c28.7 0 51.9-23.2 51.9-51.9s-23.2-51.9-51.9-51.9h-38.9c-28.7 0-51.9 23.2-51.9 51.9.1 28.7 23.3 51.9 51.9 51.9zm177.7 0h38.9c28.7 0 51.9-23.2 51.9-51.9s-23.2-51.9-51.9-51.9h-38.9c-28.7 0-51.9 23.2-51.9 51.9.1 28.7 23.3 51.9 51.9 51.9zM314.9 732.8h38.9c28.7 0 51.9-23.2 51.9-51.9S382.5 629 353.8 629h-38.9c-28.7 0-51.9 23.2-51.9 51.9s23.2 51.9 51.9 51.9zm177.6 0h38.9c28.7 0 51.9-23.2 51.9-51.9S560.1 629 531.4 629h-38.9c-28.7 0-51.9 23.2-51.9 51.9.1 28.7 23.3 51.9 51.9 51.9zm177.7 0h38.9c28.7 0 51.9-23.2 51.9-51.9S737.8 629 709.1 629h-38.9c-28.7 0-51.9 23.2-51.9 51.9.1 28.7 23.3 51.9 51.9 51.9z" /><path d="M875.2 150h-51.9v-25.9c0-14.3-11.6-25.9-25.9-25.9h-51.9c-14.3 0-25.9 11.6-25.9 25.9V150h-415v-25.9c0-14.3-11.6-25.9-25.9-25.9h-51.9c-14.3 0-25.9 11.6-25.9 25.9V150H149c-28.7 0-51.9 23.2-51.9 51.9v674.4c0 28.7 23.2 51.9 51.9 51.9h726.3c28.7 0 51.9-23.2 51.9-51.9V201.9c-.2-28.6-23.4-51.9-52-51.9zm-43.9 681.5H190.7v-484h640.6v484z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-camera"><path d="M512 288c-124.8 0-224 99.2-224 224s99.2 224 224 224 224-99.2 224-224-99.2-224-224-224zm0 400c-96 0-176-80-176-176s80-176 176-176 176 80 176 176-80 176-176 176zM768 371.2a1.6 1.6 0 1 0 102.4 0 1.6 1.6 0 1 0-102.4 0Z" /><path d="M864 224h-96l-22.4-67.2c-6.4-16-25.6-28.8-41.6-28.8H320c-19.2 0-35.2 12.8-41.6 28.8L256 224h-96c-54.4 0-96 41.6-96 96v448c0 54.4 44.8 96 96 96h704c54.4 0 96-41.6 96-96V320c0-54.4-41.6-96-96-96zm48 544c0 25.6-22.4 48-48 48H160c-25.6 0-48-22.4-48-48V320c0-25.6 22.4-48 48-48h131.2l9.6-32 22.4-64h377.6l22.4 64 9.6 32H864c25.6 0 48 22.4 48 48v448z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-category"><path d="M71.001 234.03c0 14.64 6.025 29.19 16.376 39.54 10.352 10.351 24.902 16.378 39.542 16.378 14.644 0 29.195-6.027 39.545-16.377 10.351-10.351 16.377-24.901 16.377-39.54 0-14.641-6.026-29.19-16.377-39.548-10.35-10.35-24.9-16.376-39.545-16.376-14.64 0-29.19 6.026-39.542 16.376-10.35 10.357-16.376 24.908-16.376 39.547zM63.922 511.156c0 14.657 6.034 29.221 16.394 39.585 10.366 10.36 24.929 16.396 39.587 16.396 14.654 0 29.221-6.036 39.581-16.396 10.364-10.364 16.396-24.928 16.396-39.585 0-14.654-6.032-29.222-16.396-39.583-10.36-10.364-24.927-16.394-39.581-16.394-14.659 0-29.222 6.03-39.587 16.394-10.36 10.361-16.394 24.928-16.394 39.583zM63.922 789.697c0 14.659 6.034 29.222 16.394 39.586 10.366 10.364 24.929 16.395 39.587 16.395 14.654 0 29.221-6.03 39.581-16.395 10.364-10.364 16.396-24.929 16.396-39.586 0-14.653-6.032-29.217-16.396-39.582-10.36-10.364-24.927-16.395-39.581-16.395-14.659 0-29.222 6.031-39.587 16.395-10.36 10.365-16.394 24.93-16.394 39.582zM959.307 231.434c0 29.496-21.886 53.326-48.96 53.326H329.898c-27.075 0-49.02-23.893-49.02-53.326 0-29.437 21.887-53.326 49.02-53.326h580.388c27.134 0 49.02 23.888 49.02 53.326zM959.307 508.622c0 29.432-21.886 53.326-48.96 53.326H329.898c-27.075 0-49.02-23.895-49.02-53.326 0-29.497 21.887-53.326 49.02-53.326h580.388c27.134-.059 49.02 23.83 49.02 53.326zM959.307 786.989c0 29.492-21.886 53.385-48.96 53.385H329.898c-27.075 0-49.02-23.892-49.02-53.385 0-29.38 21.887-53.268 49.02-53.268h580.388c27.134 0 49.02 23.889 49.02 53.268zm0 0" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-clock"><path d="M512 64.383C264.788 64.383 64.383 264.788 64.383 512S264.788 959.617 512 959.617 959.617 759.212 959.617 512 759.212 64.383 512 64.383zm179.047 537.14H512c-24.721 0-44.762-20.04-44.762-44.761v-268.57c0-24.722 20.04-44.762 44.762-44.762 24.721 0 44.762 20.04 44.762 44.762V512h134.285c24.72 0 44.761 20.04 44.761 44.762s-20.04 44.761-44.761 44.761z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-comment"><path d="M981.333 490.667c0-247.424-200.576-448-448-448s-448 200.576-448 448c0 81.834 21.931 158.549 60.246 224.554L89.045 884.907a42.667 42.667 0 0 0 51.456 54.741l188.331-50.219a446.123 446.123 0 0 0 204.501 49.238c247.424 0 448-200.576 448-448zm-661.333 64a64 64 0 1 1 0-128 64 64 0 0 1 0 128zm277.333-64a64 64 0 1 1-128 0 64 64 0 0 1 128 0zm149.334 64a64 64 0 1 1 0-128 64 64 0 0 1 0 128z" /></symbol><symbol class="icon" viewBox="0 0 1026 1024"  id="icon-down"><path d="M857.088 224.256q28.672-28.672 69.12-28.672t69.12 28.672q29.696 28.672 29.696 68.608t-29.696 68.608L612.352 742.4q-12.288 14.336-30.72 19.968t-38.912 4.608-40.448-8.704-34.304-22.016L91.136 361.472Q61.44 332.8 61.44 292.864t29.696-68.608q14.336-14.336 32.256-21.504t36.864-7.168 37.376 7.168 32.768 21.504l313.344 309.248z" fill="#e6e6e6" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-edit"><path d="M902.08 344.32a80.96 80.96 0 0 0-9.664-113.792L727.808 91.52a80.96 80.96 0 0 0-113.856 9.664l-447.04 530.112-25.856 282.56a32.064 32.064 0 0 0 40 33.792l274.112-73.216L902.08 344.32zM771.2 399.424 447.488 783.36l-189.504-160 323.648-383.744L771.2 399.36zm79.616-119.616c6.72 5.696 7.488 16 1.856 22.784l-40.128 47.68-189.44-159.744 40.192-47.68a16.32 16.32 0 0 1 22.72-1.92l164.8 138.88zM226.56 681.664 395.52 824l-186.56 49.92 17.6-192.256z" fill="#fff" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-emoji"><path d="M872.803 755.994h.061v-.37Z" fill="#272536" /><path d="M807.273 216.727c-162.808-162.837-427.736-162.837-590.544 0-162.837 162.807-162.837 427.737 0 590.544 162.808 162.838 427.737 162.838 590.544 0 162.837-162.808 162.837-427.737 0-590.544m-42.38 548.193c-139.445 139.444-366.37 139.415-505.799 0-139.459-139.473-139.459-366.355 0-505.827 139.429-139.43 366.355-139.46 505.8 0 139.442 139.428 139.442 366.383 0 505.827" fill="#231F20" /><path d="M381.724 468.021c24.784 0 44.954-20.169 44.954-44.967 0-24.828-20.17-45.027-44.954-45.027-24.842 0-45.013 20.199-45.013 45.027 0 24.798 20.17 44.967 45.013 44.967M640.68 468.095c24.812 0 45.01-20.213 45.01-45.012 0-24.828-20.198-44.997-45.01-44.997-24.785 0-44.954 20.17-44.954 44.997 0 24.799 20.169 45.012 44.954 45.012M642.246 619.058l-2.454.798c-40.31 18.25-83.549 27.535-128.412 27.535-46.343 0-90.173-9.376-130.305-27.8l-2.426-.741c-1.508-.414-3.548-1.004-6.092-1.004-14.757 0-26.735 11.977-26.735 26.675 0 6.98 3.282 13.989 8.695 19.254l-.326 1.625 6.832 3.076c47.911 21.68 100.021 33.096 150.682 33.096 51.608 0 102.18-11.12 150.978-33.362a26.836 26.836 0 0 0 13.929-23.512c0-17.24-15.584-31.407-34.366-25.64" fill="#231F20" /></symbol><symbol class="icon" viewBox="0 0 1025 1024"  id="icon-expand"><path d="M558.66 550.358v-9.66c0-2.575-.08-5.07-.242-7.485-.16-2.415-.241-4.91-.241-7.486v-11.591c0-12.88 3.059-21.09 9.176-24.632 6.118-3.541 15.777-5.151 28.978-4.83 6.118-.321 15.777-.482 28.978-.482 13.201 0 27.449-.08 42.742-.242 15.294-.16 30.025-.241 44.192-.241 14.167 0 25.275-.161 33.324-.483 11.592 0 20.687-1.047 27.288-3.14 6.6-2.092 9.9-7.324 9.9-15.696 0-5.795.162-13.362.484-22.7.322-9.337.483-17.225.483-23.665 0-10.947 2.817-17.789 8.452-20.526 5.634-2.736 12.798-.402 21.492 7.003a4244.449 4244.449 0 0 0 31.392 24.632 2084.857 2084.857 0 0 1 35.498 28.253 2299.806 2299.806 0 0 0 35.74 28.495 3489.44 3489.44 0 0 1 32.117 25.356c9.337 7.405 14.086 14.247 14.247 20.526.161 6.278-3.944 12.96-12.315 20.043-8.694 7.405-18.594 15.535-29.703 24.39a4354.419 4354.419 0 0 1-34.29 27.046 3280.817 3280.817 0 0 0-34.774 27.529 23763.747 23763.747 0 0 1-31.634 25.355c-10.303 8.372-18.916 11.672-25.839 9.901-6.922-1.77-10.383-8.13-10.383-19.077 0-6.44-.242-14.57-.725-24.39s-.724-18.272-.724-25.355c0-7.084-2.254-11.592-6.762-13.523-4.507-1.932-10.786-3.06-18.835-3.381-8.372 0-19.882.08-34.532.241-14.65.161-29.864.242-45.64.242-15.777 0-31.152.08-46.124.241-14.972.161-26.965.242-35.98.242-3.864 0-7.89-.322-12.075-.966a29.793 29.793 0 0 1-11.591-4.347c-3.542-2.254-6.36-5.393-8.452-9.418-2.093-4.024-3.3-9.418-3.622-16.18Zm-487.795-.966c-9.337-7.405-14.087-14.247-14.248-20.526-.16-6.279 3.945-12.96 12.316-20.043 8.693-7.406 18.594-15.535 29.702-24.39a4354.401 4354.401 0 0 1 34.29-27.046 2943.521 2943.521 0 0 0 35.016-27.77 12179.25 12179.25 0 0 1 31.876-25.598c10.303-8.37 18.835-11.59 25.597-9.659 6.761 1.932 10.142 8.372 10.142 19.319 0 6.44.242 15.052.725 25.838.482 10.787.724 19.721.724 26.805 0 7.083 1.53 11.672 4.588 13.764 3.059 2.093 8.452 3.14 16.18 3.14 9.015 0 20.847-.08 35.497-.242 14.65-.16 30.105-.322 46.365-.483a4807.29 4807.29 0 0 1 47.572-.241h35.74c3.863 0 7.888.16 12.074.483 4.185.322 8.13 1.368 11.832 3.14 3.703 1.77 6.762 4.507 9.177 8.21 2.415 3.702 3.461 8.934 3.139 15.696v36.705c0 12.88-3.059 21.573-9.176 26.08-6.118 4.508-15.616 6.762-28.495 6.762-5.796 0-15.536.08-29.22.241-13.684.161-28.253.242-43.708.242-15.455 0-30.507.08-45.157.241-14.65.161-26 .08-34.05-.241-11.59 0-19.962 1.127-25.114 3.38-5.151 2.254-7.727 7.567-7.727 15.938 0 5.796-.08 12.799-.241 21.01-.161 8.21-.242 15.535-.242 21.974 0 10.948-2.817 17.79-8.452 20.526-5.634 2.737-12.96.564-21.975-6.52-9.015-7.083-19.399-15.213-31.151-24.39a2299.862 2299.862 0 0 1-35.74-28.494 2299.863 2299.863 0 0 0-35.739-28.495 3489.406 3489.406 0 0 1-32.117-25.356Z" /></symbol><symbol class="icon" viewBox="0 0 1152 1024"  id="icon-eye"><path d="M1138.71 463.262C1025.94 271.898 815.62 144 576 144c-239.72 0-449.992 127.988-562.708 319.262a95.998 95.998 0 0 0 0 97.478C126.063 752.102 336.381 880 576.001 880c239.72 0 449.992-127.988 562.708-319.262a95.994 95.994 0 0 0 0-97.476zM576 784c-150.324 0-272-121.654-272-272 0-150.324 121.652-272 272-272 150.324 0 272 121.652 272 272 0 150.324-121.652 272-272 272zm208-272c0 114.876-93.124 208-208 208s-208-93.124-208-208c0-35.416 8.862-68.758 24.472-97.946l-.002.064c0 47.302 38.346 85.646 85.648 85.646s85.648-38.346 85.648-85.646c0-47.302-38.346-85.648-85.648-85.648l-.064.002c29.188-15.61 62.53-24.472 97.946-24.472 114.876 0 208 93.124 208 208z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-favourite"><path d="M781.186 616.032q17.339 80.574 30.598 145.848 6.12 27.538 11.219 55.076t9.69 49.976 7.648 38.247 4.08 19.889q3.06 20.398-9.18 27.028t-27.537 6.63q-5.1 0-14.789-3.57t-14.789-5.61L511.927 794.518q-72.414 42.837-131.57 76.494-25.498 14.279-50.486 28.558t-45.386 26.518-35.187 20.398-19.889 10.2q-10.199 5.099-20.908 3.569t-19.379-7.65-12.749-14.788-2.04-17.849q1.02-4.08 5.1-19.888t9.18-37.737 11.728-48.447 13.77-54.055q15.298-63.235 34.677-142.79-60.176-52.015-108.112-92.812-20.398-17.339-40.287-34.167t-35.697-30.598-26.008-22.438-11.219-9.69q-12.24-11.219-20.908-24.987t-6.63-28.048 11.22-22.438 20.398-10.2L346.7 313.116l117.29-273.34q6.12-16.318 17.34-28.047T511.927 0q10.2 0 17.849 4.59t12.749 10.709 8.67 12.239 5.609 10.199l114.23 273.339 315.156 29.577q20.398 5.1 28.558 12.24t8.16 22.438q0 14.279-8.67 24.988t-21.928 26.008z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-flag"><path d="M633.3 155.8s39.4-181.4-378.1-13.1V582S668.3 372.2 618 595.2c0 0 244.7-76.6 292.8-65.5V96.8c.1 0-209.7 24-277.5 59zM166.7 64c-29.6 0-53.5 23.9-53.5 53.5v789c0 29.6 23.9 53.5 53.5 53.5s53.6-23.9 53.6-53.5v-789c0-29.6-24-53.5-53.6-53.5z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-flower"><path d="M932.9 407.3c-5.8-8.3-17.3-18.3-38.9-18.8-5.7-.1-11.4.4-17.1 1.1 8.9-17.3 17.6-40.3 4.9-62.9-12-21.3-37.1-31.1-74.8-29.1-20.2 1.1-39.2 5.1-46.4 6.8-79.9 18.7-127.1 74.6-142.6 93-7.1 8.4-14 16.6-20.4 24.6 30.7-46.6 53.9-121.2 39.3-193.2-10.6-52.3-43.7-106.7-76.8-126.4-17.2-10.3-31.4-9.2-40.2-6.5-9.7 3-22.8 10.8-29.9 31.2-1.9 5.4-3.2 11-4.2 16.6-13.8-13.8-32.9-29.2-58.3-24.1-24 4.8-41.1 25.7-50.8 62.1-5.2 19.6-7.2 38.9-7.8 46.2-6.9 81.8 31.7 143.9 44.4 164.3 5.8 9.3 11.5 18.4 17.1 27-34.8-43.6-98.6-88.7-171.6-97-53.1-6-115 8.6-144 34-15.1 13.2-18.4 27-18.6 36.2-.2 10.2 3.2 25 20.4 38.1 4.6 3.5 9.5 6.4 14.5 9.1-17.4 8.8-37.9 22.3-40.9 48-2.8 24.3 11.8 47 43.4 67.5 17 11 34.7 18.9 41.6 21.7 33.7 14.2 66.5 18.6 94.5 18.6 34.9 0 62.5-6.8 75.5-10 10.7-2.6 21.1-5.2 31-7.9-52.2 19.7-114.9 66.4-145.3 133.2-22.1 48.6-27.4 112-12.2 147.5 7.9 18.4 20 25.9 28.7 28.9 9.6 3.3 24.8 4.7 42.5-7.7 4.7-3.3 9-7 13.2-10.9 3 19.2 9.4 42.9 33 53.8 6.7 3.1 13.7 4.6 21 4.6 17.2 0 36.1-8.4 56.6-25 15.7-12.8 28.7-27.2 33.5-32.8 53.7-62.1 58.9-135.1 60.7-159 .8-11 1.6-21.8 2-32.1 2.5 55.8 27.5 129.9 81.8 179.6 36.9 33.8 90.6 57.5 128.9 57.5 2.6 0 5.1-.1 7.6-.3 20-1.8 30.8-11 36.4-18.4 6.1-8.1 12.1-22.1 5.9-42.8-1.7-5.5-3.9-10.8-6.3-15.9 19.2 3.1 43.8 4.3 61.3-14.8 16.6-18 18.1-44.9 4.6-80.1-7.3-18.9-17-35.7-20.8-42-42.5-70.2-110.2-97.8-132.5-106.9-10.2-4.1-20.1-8.2-29.7-11.8 20.5 5.6 44.4 9 69.8 9 41.4 0 86.4-8.9 126.1-31.3 46.5-26.3 88-74.5 96.5-112.1 4.1-19.7-1.3-32.9-6.6-40.4zM433.7 233.4c1.4-16.5 4.6-31.8 7.9-42 1.4 1.4 2.7 2.8 3.8 3.9 6.3 6.6 12.8 13.4 20.4 19 17.9 12.9 33.6 12 43.7 9.1 10.4-3.1 24.4-11.2 32.3-32.7 1.5-4.1 2.7-8.4 3.7-12.6 1.4 1.9 2.8 4 4.2 6.2 11.2 17.6 19.6 38 23.6 57.5 11.6 56.8-10.7 122.3-37.6 155-12 14.7-20.9 18-23 18 0 0-3.8-.4-12.3-10.1-9.7-11-20.5-28.4-31.9-46.7-10.9-17.6-39.9-64.2-34.8-124.6zm-104.1 289c-11.3 2.8-33.1 8.2-59.9 8.2-20.9 0-44.9-3.3-69.3-13.5-15.3-6.4-28.9-14.2-37.5-20.5 1.8-.9 3.5-1.7 4.9-2.4 8.2-3.9 16.7-8 24.3-13.6 17.8-13 21.9-28.3 22.1-38.8.3-10.8-3.2-26.6-21.1-40.8-3.4-2.7-7.1-5.2-10.8-7.4 2.3-.7 4.7-1.4 7.2-2.1 20.2-5.3 42.2-6.9 61.9-4.7 57.6 6.6 113 48 135.8 83.7 10.3 16 10.7 25.4 10 27.5 0 0-1.6 3.5-13.4 8.6-13.4 5.7-33.2 10.6-54.2 15.8zM443 705.3c-1.5 20.6-5.5 75.4-45 121.2-10.8 12.5-22.4 23.1-31.1 29.3-.3-2-.5-3.8-.7-5.4-1.2-9-2.4-18.4-5.4-27.3-6.9-20.9-20.1-29.5-30.1-33-4.1-1.5-9.2-2.6-15-2.6-8.6 0-19 2.5-30.3 10-3.6 2.4-7.1 5.2-10.4 8 0-2.4.1-4.9.3-7.5 1.2-20.8 6.4-42.2 14.7-60.3 24.1-52.8 80.6-92.6 121.6-103.3 18.4-4.8 27.5-2.3 29.2-1 0 0 2.8 2.6 4 15.4 1.3 14.6-.2 35-1.8 56.5zm310.4 29c8.6 14.2 15 28.4 18.3 38.6-1.9-.3-3.8-.7-5.4-1-8.9-1.6-18.1-3.3-27.5-3.3h-.2c-22 .1-34.3 10-40.7 18.4-6.6 8.6-13.1 23.4-6.9 45.4 1.2 4.2 2.7 8.4 4.4 12.3-2.2-.8-4.6-1.6-7.1-2.6-19.4-7.6-38.2-19.2-52.9-32.6-42.8-39.2-63.2-105.3-60.7-147.5 1.1-19 6.3-26.8 8.1-28.1 0 0 1.1-.6 4.3-.6 2.5 0 6.2.4 11.6 1.6 14.3 3.2 33.2 10.9 53.3 19.1 19.2 7.8 70.1 28.5 101.4 80.3zM613.1 571.5c-10.3-2.3-41.7-9.4-68.2 9.7-20.2 14.6-32.2 40.1-34.8 74.1-.1-4.3-.3-8.4-.7-12.5-1-10.5-3.9-42.6-30.3-61.9-20.1-14.7-48.1-18.2-81.2-10.2 4-1.4 7.9-2.9 11.6-4.5 9.7-4.2 39.3-16.9 49.5-47.9 7.8-23.7 2.5-51.4-15.4-80.3 2.6 3.4 5.2 6.6 7.9 9.7 7 7.9 28.2 32.1 60.9 32.3h.3c24.8 0 49.4-13.6 71.4-39.5-2.4 3.5-4.7 7-6.7 10.5-5.4 9.1-21.8 36.7-11.9 67.9 7.6 23.7 28.2 43 59.7 55.9-4.1-1.3-8.1-2.4-12.1-3.3zM858 462.9c-13.2 16.1-30 30.4-47.4 40.2-50.5 28.6-119.6 27.6-159.1 12.1-17.7-6.9-23.6-14.3-24.2-16.3 0 0-.7-3.7 5.8-14.8 7.5-12.6 20.7-28.2 34.6-44.8 13.3-15.8 48.7-57.8 107.7-71.6 15.9-3.7 31.3-5.4 42-5.4h.4c-.9 1.7-1.8 3.4-2.6 4.8-4.3 8-8.8 16.3-11.7 25.3-6.8 21-1.1 35.7 4.9 44.4 6.1 8.9 18.2 19.7 41.1 20.6 4.4.2 8.8 0 13.1-.4-1.4 1.9-2.9 3.9-4.6 5.9z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-friend"><path d="M762.38 19.59 430.31 351.68l65.82 65.82 266.25-266.28 127.5 127.5-266.27 266.25 65.82 65.82 332.09-332.07zM292.74 875.86l-127.47-127.5 266.25-266.25-65.82-65.82L33.63 748.36l259.11 259.14 332.07-332.09-65.82-65.82z" /><path d="M368.925 606.364 620.39 354.898l65.817 65.817-251.466 251.466z" /></symbol><symbol class="icon" viewBox="0 0 1068 1024"  id="icon-fun"><path d="M818.241 375.863c0-4.145 1.387-8.756 1.837-12.902 1.387-3.225 1.463-7.802 2.769-11.98 9.75-31.287 39.614-53.43 74.617-53.43 42.844 0 78.313 35.47 78.313 78.312 0 42.836-35.469 78.3-78.313 78.3-43.293 0-79.223-35.464-79.223-78.3zM148.024 773.422c0 17.882 21.65 30.363 46.058 30.363h476.752c23.96 0 71.867-12.48 71.867-30.363V741.58c0-17-47.906-22.504-71.867-22.504H194.082c-24.408 0-46.058 4.52-46.058 22.504v31.842z" /><path d="M29.18 260.701c0 222.942 181.03 405.815 403.973 405.815 146.942 0 274.995-85.674 345.473-206.356 27.635 37.302 69.097 60.334 118.838 60.334 79.235 0 143.718-64.944 143.718-144.17 0-79.233-64.483-144.18-143.718-144.18-21.649 0-42.373 14.741-60.798 23.488 0-13.357-1.848-4.14-3.225-45.597H32.403c-1.375 41.914-3.224 34.088-3.224 50.666z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-gitee"><path d="M512 1024C229.222 1024 0 794.778 0 512S229.222 0 512 0s512 229.222 512 512-229.222 512-512 512zm259.149-568.883h-290.74a25.293 25.293 0 0 0-25.292 25.293l-.026 63.206c0 13.952 11.315 25.293 25.267 25.293h177.024c13.978 0 25.293 11.315 25.293 25.267v12.646a75.853 75.853 0 0 1-75.853 75.853h-240.23a25.293 25.293 0 0 1-25.267-25.293V417.203a75.853 75.853 0 0 1 75.827-75.853h353.946a25.293 25.293 0 0 0 25.267-25.292l.077-63.207a25.293 25.293 0 0 0-25.268-25.293H417.152a189.62 189.62 0 0 0-189.62 189.645V771.15c0 13.977 11.316 25.293 25.294 25.293h372.94a170.65 170.65 0 0 0 170.65-170.65V480.384a25.293 25.293 0 0 0-25.293-25.267z" fill="#C71D23" /></symbol><symbol class="icon" viewBox="0 0 1049 1024"  id="icon-github"><path d="M524.98 0C234.675 0 0 234.676 0 524.98c0 232.068 150.367 428.5 358.968 498.034 26.075 5.215 35.636-11.299 35.636-25.206 0-12.168-.87-53.888-.87-97.347-146.02 31.29-176.441-62.58-176.441-62.58-23.468-60.842-58.235-76.487-58.235-76.487-47.804-32.16 3.477-32.16 3.477-32.16 53.02 3.477 80.833 53.89 80.833 53.89 46.935 79.963 122.553 57.364 152.974 43.458 4.346-33.898 18.253-57.366 33.029-70.403-116.47-12.169-239.023-57.365-239.023-259.013 0-57.365 20.86-104.3 53.89-140.806-5.216-13.037-23.469-66.926 5.214-139.067 0 0 44.328-13.907 144.282 53.888 41.72-11.299 86.918-17.383 131.245-17.383s89.525 6.084 131.245 17.383c99.955-67.795 144.283-53.888 144.283-53.888 28.682 72.141 10.43 126.03 5.215 139.067 33.897 36.505 53.888 83.44 53.888 140.806 0 201.648-122.553 245.975-239.891 259.013 19.122 16.514 35.636 47.804 35.636 97.347 0 70.403-.87 126.899-.87 144.282 0 13.907 9.562 30.421 35.637 25.206 208.6-69.533 358.967-265.966 358.967-498.035C1049.96 234.676 814.413 0 524.98 0z" fill="#191717" /><path d="M199.04 753.571c-.869 2.608-5.215 3.477-8.692 1.739s-6.084-5.215-4.345-7.823c.869-2.607 5.215-3.477 8.691-1.738s5.215 5.215 4.346 7.822zm20.86 23.468c-2.607 2.607-7.822.87-10.43-2.608-3.476-3.476-4.346-8.691-1.738-11.299 2.607-2.607 6.953-.869 10.43 2.608 3.477 4.346 4.346 9.56 1.738 11.299zM240.76 807.46c-3.476 2.607-8.691 0-11.299-4.346-3.477-4.346-3.477-10.43 0-12.168 3.477-2.608 8.692 0 11.3 4.346 3.476 4.345 3.476 9.56 0 12.168zm28.683 29.552c-2.607 3.476-8.692 2.607-13.907-1.739-4.346-4.345-6.084-10.43-2.607-13.037 2.607-3.477 8.691-2.608 13.907 1.738 4.345 3.477 5.215 9.561 2.607 13.038zm39.113 16.514c-.87 4.346-6.954 6.084-13.038 4.346-6.084-1.738-9.56-6.954-8.692-10.43.87-4.346 6.954-6.084 13.038-4.346 6.084 1.738 9.56 6.084 8.692 10.43zm42.59 3.477c0 4.346-5.216 7.822-11.3 7.822-6.084 0-11.3-3.476-11.3-7.822s5.216-7.823 11.3-7.823c6.084 0 11.3 3.477 11.3 7.823zm39.981-6.954c.87 4.346-3.477 8.692-9.56 9.561-6.085.87-11.3-1.738-12.17-6.084-.868-4.346 3.477-8.692 9.562-9.56 6.084-.87 11.299 1.737 12.168 6.083zm0 0" fill="#191717" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-heart"><path d="M940.513 512a486.42 486.42 0 0 1-27.126 42.3c-30.994 43.56-75.62 93.767-136.44 153.48-63.014 61.867-145.154 135.733-251.134 225.807a21.333 21.333 0 0 1-27.626 0c-106-90.074-188.12-163.94-251.134-225.807-60.82-59.713-105.446-109.92-136.44-153.48A486.42 486.42 0 0 1 83.487 512h151.18a21.333 21.333 0 0 0 15.086-6.247l64.4-64.42L428.92 670.86A21.333 21.333 0 0 0 448 682.667h1.127A21.333 21.333 0 0 0 468 668.827l110.8-295.494 106.12 212.24a21.333 21.333 0 0 0 34.167 5.547l79.08-79.12zM62.98 469.333h162.853l79.08-79.086a21.333 21.333 0 0 1 34.167 5.546l106.12 212.24L556 312.507a21.333 21.333 0 0 1 39.053-2.047L709.847 540l64.4-64.407a21.333 21.333 0 0 1 15.086-6.26H961.02a281.12 281.12 0 0 0 9.56-28.733c8.927-32.667 10.753-63.333 10.753-99.293A256 256 0 0 0 512 199.76 256 256 0 0 0 42.667 341.333c0 35.96 1.826 66.607 10.753 99.294a281.12 281.12 0 0 0 9.56 28.706z" fill="#5C5C66" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-history"><path d="M533.333 85.333c-149.333 0-281.6 81.067-349.866 204.8L85.333 192v277.333h277.334L243.2 349.867c55.467-106.667 162.133-179.2 290.133-179.2 174.934 0 320 145.066 320 320s-145.066 320-320 320c-140.8 0-256-89.6-302.933-213.334h-89.6C187.733 768 345.6 896 533.333 896c226.134 0 405.334-183.467 405.334-405.333S755.2 85.333 533.333 85.333zm-64 213.334v217.6l200.534 119.466L704 580.267l-170.667-102.4v-179.2h-64z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-home"><path d="M946.5 505 534.6 93.4c-12.5-12.5-32.7-12.5-45.2 0L77.5 505c-12 12-18.8 28.3-18.8 45.3 0 35.3 28.7 64 64 64h43.4V908c0 17.7 14.3 32 32 32H448V716h112v224h265.9c17.7 0 32-14.3 32-32V614.3h43.4c17 0 33.3-6.7 45.3-18.8 24.9-25 24.9-65.5-.1-90.5z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-horn"><path d="M872.803 755.994h.061v-.37ZM744.056 192.8c-4.815-2.89-9.602-5.253-15.443-5.253-14.263 0-25.759 11.56-25.759 25.806 0 10.285 6.089 18.52 14.696 23.195 94.68 55.248 158.344 157.788 158.344 275.305 0 117.424-63.605 219.93-158.159 275.18-8.295 4.538-15.443 13.05-15.443 23.583 0 14.262 11.56 25.82 25.792 25.82 5.716 0 10.252-2.202 15.225-5.063 109.871-64.134 183.764-183.143 183.764-319.52.002-136.067-73.578-254.842-183.017-319.054z" /><path d="M773.946 511.868c0-79.965-43.344-149.74-107.821-187.29-2.92-1.522-9.786-4.52-14.604-4.52-14.325 0-25.914 11.59-25.914 25.9 0 9.615 5.096 18.176 12.865 22.666 49.84 28.307 83.46 81.83 83.46 143.244 0 62.473-34.802 116.818-86.07 144.75-7.458 4.54-12.398 12.804-12.398 22.19 0 14.324 11.59 25.943 25.883 25.943 6.09.032 13.33-3.543 13.33-3.543 66.372-37.036 111.27-107.913 111.27-189.34zM541.37 124.672c-10.847-5.22-23.741-3.79-33.216 3.713-.436.358-46.423 36.915-97.196 74.296-88.308 65.081-114.036 75.925-119.257 77.65h-110.62c-.637 0-1.243.062-1.88.093h-56.504c-14.231 0-25.775 11.544-25.775 25.775v411.697c0 14.262 11.512 25.762 25.775 25.762l189.511.028c5.096 1.865 29.396 13.08 107.761 77 45.614 37.162 86.506 73.485 86.94 73.829 5.842 5.219 13.3 7.92 20.82 7.92 4.35 0 8.73-.93 12.864-2.765a31.347 31.347 0 0 0 18.517-28.62s.032-97.257.032-132.212c.809-2.484 1.214-5.127 1.214-7.863 0-2.792-1.246-578.027-1.246-578.027a31.412 31.412 0 0 0-17.74-28.276zm-33.062 601.799c0 1.494-.467 94.618-.467 94.618-13.89-11.746-29.332-24.64-45.24-37.508-104.59-84.702-130.506-91.816-148.031-91.816-.373 0-.684.091-1.025.091s-.653-.09-1.026-.09H170.394c-18.038 0-22.248-5.13-22.248-23.247v-315.96c0-12.32 1.46-20.057 16.298-20.057H292.51c17.09 0 43.315-6.991 157.787-90.84 20.383-14.915 40.33-29.939 57.545-43.114 0 0 .373 445.208.467 521.368-.53 2.112 0 4.319 0 6.555z" /></symbol><symbol class="icon" viewBox="0 0 1071 1024"  id="icon-like"><path d="M1041.442 418.174c-23.896-38.716-64.463-60.519-106.586-62.183-2.183-.34-4.4-.564-6.674-.564l-246.69-.27c16.729-48.075 25.87-99.733 25.87-153.557 0-34.907-3.946-68.874-11.184-101.592l-.651.084C682.36 42.778 631.383 0 570.36 0 499.34 0 441.78 57.868 441.78 129.247c0 3.948.248 7.83.584 11.695-3.816 137.2-110.75 248.418-245.703 258.128v.835l-146.672.344c-1.773-.22-3.558-.367-5.381-.367-24.417 0-44.211 19.893-44.211 44.431L0 977.678c0 24.534 19.782 44.426 44.2 44.426 2.396 0 4.73-.242 7.024-.61l163.17.068c2.16.327 4.338.542 6.576.542 2.24 0 4.411-.215 6.556-.536l613.441.259v.266c24.03.045 48.357-6.454 70.142-20.37 20.68-13.225 36.237-31.377 46.46-51.912 2.806-4.095 5.017-8.704 6.359-13.781l95.502-423.75c1.324-5.025 1.684-10.074 1.29-14.986 1.985-26.832-4.076-54.496-19.278-79.12Zm-776 520.317-88.393-.021.332-443.89s54.003-.342 88.481-11.084l-.42 454.995Z" /></symbol><symbol class="icon" viewBox="0 0 1042 1024"  id="icon-logout"><path d="M581.632 697.344h126.976v194.56q0 33.792-10.24 58.88t-27.136 40.96-39.424 23.552-48.128 7.68H131.072q-24.576 0-48.128-9.728t-41.472-27.136-29.184-40.96-11.264-52.224v-706.56q0-24.576 11.776-47.104t30.208-39.936 40.96-28.16 45.056-10.752H578.56q26.624 0 50.176 11.776t41.472 29.696 28.16 40.448 10.24 44.032v188.416H581.632l1.024-195.584H130.048l-1.024 713.728h452.608V697.344zm440.32-191.488q37.888 30.72 2.048 60.416-20.48 15.36-44.544 37.888t-50.176 46.592-51.712 47.616-47.104 40.96q-23.552 18.432-40.448 18.432t-16.896-24.576q2.048-14.336.512-35.84t-1.536-36.864q0-17.408-12.288-21.504t-29.696-4.096H626.688q-34.816 0-73.216-.512t-73.216-.512H375.808q-8.192 0-17.92-1.536t-17.408-6.656-12.288-14.336-4.608-23.552q0-19.456-.512-46.08t.512-47.104q0-27.648 13.312-37.888t43.008-9.216h93.184q32.768 0 70.144.512t71.168.512h100.352q25.6 1.024 43.52-4.096t17.92-22.528q0-14.336 1.024-32.256t1.024-32.256q0-23.552 12.8-29.696t32.256 9.216q19.456 16.384 45.568 38.4t52.736 45.056 52.736 45.568 47.616 39.936z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-message"><path d="M510.563 65.994c-246.705 0-446.604 199.925-446.604 446.58 0 246.648 199.9 446.573 446.634 446.573 246.62 0 446.575-199.925 446.575-446.574-.001-246.655-199.955-446.579-446.605-446.579zM260.658 583.67c-39.267 0-71.099-31.83-71.1-71.097v-.002c0-39.267 31.832-71.1 71.1-71.1 39.267 0 71.1 31.833 71.1 71.1s-31.833 71.1-71.1 71.1zm250.763 0c-39.268 0-71.1-31.833-71.1-71.1s31.832-71.1 71.1-71.1c39.267 0 71.1 31.833 71.1 71.1s-31.833 71.1-71.1 71.1zm254.035 0c-39.268 0-71.1-31.833-71.1-71.1s31.832-71.1 71.1-71.1c39.267 0 71.1 31.833 71.1 71.1s-31.833 71.1-71.1 71.1z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-moon"><path d="M419.072 95.488a384 384 0 0 0 509.44 509.44C886.102 795.904 715.733 938.667 512 938.667 276.352 938.667 85.333 747.648 85.333 512c0-203.733 142.763-374.101 333.739-416.512zm355.925 2.261 35.67 8.918v42.666l-35.67 8.918a85.333 85.333 0 0 0-62.08 62.08L704 256h-42.667l-8.917-35.67a85.333 85.333 0 0 0-62.08-62.08l-35.67-8.917v-42.666l35.67-8.918a85.333 85.333 0 0 0 62.037-62.08L661.333 0H704l8.917 35.67a85.333 85.333 0 0 0 62.08 62.08zm213.334 213.334L1024 320v42.667l-35.67 8.917a85.333 85.333 0 0 0-62.08 62.08l-8.917 35.67h-42.666l-8.918-35.67a85.333 85.333 0 0 0-62.08-62.08L768 362.667V320l35.67-8.917a85.333 85.333 0 0 0 62.08-62.08l8.917-35.67h42.666l8.918 35.67a85.333 85.333 0 0 0 62.08 62.08z" /></symbol><symbol class="icon" viewBox="0 0 1097 1024"  id="icon-narrow"><path d="M599.833 534.03c-9.558-7.647-14.337-14.974-14.337-21.984 0-7.009 4.46-14.337 13.381-21.983 9.24-7.965 19.913-16.727 32.02-26.285a5272.092 5272.092 0 0 1 37.277-29.152 3903.285 3903.285 0 0 0 37.754-29.63 3142.732 3142.732 0 0 0 34.41-27.72c11.15-9.239 20.47-12.823 27.957-10.752 7.487 2.07 11.071 9 10.753 20.789 0 7.01.16 15.77.478 26.285.318 10.514.637 19.435.956 26.762 0 8.284 2.39 13.541 7.168 15.771 4.78 2.23 11.63 3.346 20.55 3.346 9.558 0 22.223-.08 37.994-.24 15.77-.159 32.179-.318 49.224-.477 17.045-.16 33.613-.319 49.702-.478 16.09-.16 29.073-.08 38.95.239 4.141-.319 8.522-.08 13.142.717 4.62.796 8.841 2.31 12.664 4.54 3.823 2.23 6.93 5.496 9.32 9.797 2.389 4.301 3.584 10.275 3.584 17.921 0 4.46.08 8.045.239 10.753.159 2.708.239 5.337.239 7.886v21.027c0 14.02-3.266 22.86-9.797 26.524-6.532 3.664-16.966 5.655-31.303 5.974-6.372 0-16.807-.08-31.303-.239-14.497-.16-29.949-.16-46.357 0-16.408.16-32.338.319-47.79.478-15.453.16-27.64.239-36.56.239-12.744 0-22.542 1.195-29.391 3.584-6.85 2.39-10.275 8.045-10.275 16.966 0 6.372-.24 14.576-.717 24.612-.478 10.036-.717 18.559-.717 25.568 0 11.47-3.027 18.798-9.08 21.984-6.054 3.186-14.019.796-23.896-7.169-9.876-7.965-21.107-16.806-33.692-26.524a2429.4 2429.4 0 0 1-38.471-30.347 2980.885 2980.885 0 0 0-38.95-30.825c-12.903-10.036-24.612-19.355-35.126-27.957ZM73.66 490.54c0-14.018 3.186-23.417 9.558-28.196s16.886-7.168 31.542-7.168c7.01 0 17.762-.08 32.259-.24 14.496-.159 30.187-.238 47.073-.238s33.215-.08 48.986-.24c15.77-.159 28.116-.238 37.037-.238 12.745 0 21.745-1.195 27.002-3.585 5.257-2.39 7.885-8.044 7.885-16.965 0-6.372.16-14.019.478-22.94.319-8.92.478-16.886.478-23.895 0-11.47 3.107-18.718 9.32-21.745 6.212-3.026 14.098-.717 23.656 6.93 9.877 7.965 21.107 16.806 33.692 26.524a2285.379 2285.379 0 0 1 38.71 30.586 2765.07 2765.07 0 0 0 39.189 31.064c12.903 10.036 24.453 19.195 34.648 27.48 18.479 14.655 19.116 29.31 1.912 43.966a5183.942 5183.942 0 0 0-32.26 26.046 2188.252 2188.252 0 0 1-37.276 29.63 4576.01 4576.01 0 0 0-37.993 29.87 3142.73 3142.73 0 0 0-34.41 27.718c-11.15 9.24-20.47 12.824-27.957 10.753-7.487-2.071-11.23-9.16-11.23-21.267.318-3.505.398-7.726.238-12.664-.159-4.939-.318-10.036-.478-15.293a7839.99 7839.99 0 0 0-.478-15.293c-.159-4.939-.239-9.32-.239-13.143 0-8.283-1.513-13.46-4.54-15.532-3.026-2.07-9-3.106-17.921-3.106-9.558 0-22.382.08-38.471.239-16.09.16-32.896.239-50.42.239-17.523 0-34.488.08-50.896.239-16.409.16-29.71.239-39.906.239-3.823 0-8.044-.24-12.664-.717-4.62-.478-8.841-1.673-12.665-3.584-3.823-1.912-7.009-4.78-9.558-8.603-2.549-3.823-3.823-9.558-3.823-17.204 0-4.46-.08-8.045-.239-10.753-.16-2.708-.239-5.337-.239-7.886v-21.027Z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-plane"><path d="M565.748 792.837 826.567 905.76l126.91-845.425-887.39 521.64 232.844 109.933 562.612-511.653-451.697 563.617-5.997 239.832 161.899-190.866z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-qq"><path d="M512 0C229.224 0 0 229.224 0 512s229.224 512 512 512 512-229.224 512-512S794.776 0 512 0zm289.261 668.862c-21.732 18.64-49.948-61.346-54.006-49.039-9.88 29.924-14.507 49.93-43.634 82.508-1.555 1.745 33.659 14.469 43.634 41.643 9.557 26.017 28.14 67.262-93.488 80.213-71.358 7.585-122.937-38.02-128.076-37.584-9.538.834-5.29 0-15.53 0-8.382 0-8.932.606-16.82 0-2.162-.171-25.885 37.584-131.964 37.584-82.223 0-103.519-51.75-86.983-80.213 16.536-28.463 44.127-36.75 40.24-41.263-19.153-22.187-32.351-45.91-40.24-67.357-1.953-5.347-3.584-10.543-4.873-15.53-2.997-11.454-25.885 67.204-50.46 49.038-24.577-18.167-22.377-64.418-6.467-108.677 16.042-44.62 56.471-87.59 56.927-97.072 1.611-35.29-3.49-41.15 0-50.422 7.755-20.764 17.199-12.8 17.199-23.571 0-135.737 100.864-245.76 225.28-245.76s225.28 110.042 225.28 245.76c0 5.196 13.52 0 19.987 23.571 1.327 4.873 2.238 23.666.664 50.422-.74 12.857 34.266 28.502 52.375 97.072 18.129 68.57 0 100.92-9.045 108.677z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-qr_code"><path d="M426.667 0h-384A42.667 42.667 0 0 0 0 42.667v384a42.667 42.667 0 0 0 42.667 42.666h384a42.667 42.667 0 0 0 42.666-42.666v-384A42.667 42.667 0 0 0 426.667 0zM384 384H85.333V85.333H384V384zm42.667 170.667h-384A42.667 42.667 0 0 0 0 597.333v384A42.667 42.667 0 0 0 42.667 1024h384a42.667 42.667 0 0 0 42.666-42.667v-384a42.667 42.667 0 0 0-42.666-42.666zm-42.667 384H85.333V640H384v298.667zM981.333 0h-384a42.667 42.667 0 0 0-42.666 42.667v384a42.667 42.667 0 0 0 42.666 42.666h384A42.667 42.667 0 0 0 1024 426.667v-384A42.667 42.667 0 0 0 981.333 0zm-42.666 384H640V85.333h298.667V384zm-768-213.333h128v128h-128v-128zm0 554.666h128v128h-128v-128zM896 554.667h128v128H896v-128zM896 896h-85.333v128H1024V810.667H896V896zm-341.333 0h128v128h-128V896zm170.666-725.333h128v128h-128v-128zm-170.666 384h128v128h-128v-128zm128 128h128V896h-128V682.667z" /></symbol><symbol class="icon" viewBox="0 0 1035 1024"  id="icon-right-arrow"><path d="M530.85 573.163c32.006-31.883 32.112-87.434-.07-119.49-131.343-130.827-262.273-262.07-393.343-393.166-12.622-12.626-27.586-20.687-45.268-23.54-3.53-.571-7.086-1-10.63-1.5h-3.082c-4.035.575-8.112.943-12.091 1.756-33.299 6.82-54.839 26.617-63.96 59.279-3.202 11.48-2.807 24.854-1.136 35.701 1.752 11.344 7.115 21.818 14.48 30.905 3.444 4.253 7.05 8.418 10.919 12.292a910019.955 910019.955 0 0 0 333.247 333.294c1.444 1.444 3.227 2.555 5.187 4.08-2.121 2.223-3.475 3.697-4.88 5.101-107.57 107.576-215.059 215.238-322.806 322.631C21.587 856.28 3.876 871.668 1.27 894.78c-1.233 10.909-1.859 22.112 0 32.93.92 5.363 3.263 10.424 5.495 15.359 23.656 52.318 89.515 64.242 130.666 23.186 131.238-130.939 262.07-262.267 393.42-393.09zM78.452 35.466 66.36 37.223c3.985-.813 8.062-1.181 12.092-1.757zm473.015.975c-38 2.859-70.434 37.035-71.651 75.106-.8 24.98 8.131 45.651 25.692 63.198C616.89 285.997 728.17 397.36 839.523 508.638c1.535 1.535 3.686 2.45 6.595 4.328-3.359 2.667-5.116 3.804-6.565 5.253-68.05 68-136.076 136.036-204.1 204.066-43.536 43.53-87.061 87.076-130.607 130.596-19.45 19.439-28.328 42.707-24.046 70.055 4.829 30.919 22.44 52.516 51.712 63.01 29.45 10.55 56.692 4.804 80.49-15.848 1.944-1.682 3.799-3.47 5.616-5.288C748.74 834.698 878.573 704.3 1009.164 574.668c33.273-33.035 33.455-88.934 1.207-121.05-131.354-130.814-262.277-262.06-393.343-393.162C604.401 47.83 589.416 39.8 571.74 36.951c-3.535-.57-7.09-.995-10.635-1.485-1.03 0-2.056 0-3.087.006-2.182.328-4.358.802-6.55.97zm0 0" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-search"><path d="M789.804 737.772 742.865 784.7l155.9 155.9 46.94-46.927ZM456.923 82.894C247.61 82.894 77.34 253.176 77.34 462.476s170.271 379.57 379.583 379.57c209.287 0 379.558-170.27 379.558-379.57S666.211 82.894 456.923 82.894zm313.206 379.583c0 172.722-140.508 313.23-313.206 313.23-172.721 0-313.23-140.508-313.23-313.23s140.508-313.23 313.23-313.23c172.698 0 313.206 140.508 313.206 313.23z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-sun"><path d="M212.48000000000002 512a299.52 299.52 0 1 0 599.04 0 299.52 299.52 0 1 0-599.04 0ZM486.4 0h48.64v125.44H486.4zM234.854 78.95l42.112-24.32 62.72 108.647-42.112 24.32zM58.061 275.814l24.32-42.137 108.646 62.72-24.32 42.137zM0 486.4h125.44v48.64H0zm55.86 260.326 108.646-62.72 24.32 42.138-108.647 62.72zm179.814 193.69 62.72-108.62 42.137 24.32-62.72 108.62zM486.4 896h48.64v125.44H486.4zm197.453-38.989 42.137-24.32 62.72 108.621-42.137 24.32zm150.016-132.633 24.32-42.138 108.62 62.746-24.32 42.137zM896 486.4h125.44v48.64H896zm-62.106-188.749 108.647-62.72 24.32 42.138-108.672 62.72zM684.288 164.608l62.72-108.62 42.112 24.32-62.72 108.646z" /></symbol><symbol class="icon" viewBox="0 0 1097 1024"  id="icon-tag"><path d="M256 256q0-30.286-21.429-51.714t-51.714-21.429-51.714 21.429T109.714 256t21.429 51.714 51.714 21.429 51.714-21.429T256 256zm609.714 329.143q0 30.286-21.143 51.428L564 917.714q-22.286 21.143-52 21.143-30.286 0-51.429-21.143L52 508.571q-21.714-21.142-36.857-57.714T0 384V146.286q0-29.715 21.714-51.429t51.429-21.714h237.714q30.286 0 66.857 15.143T436 125.143l408.571 408q21.143 22.286 21.143 52zm219.429 0q0 30.286-21.143 51.428L783.429 917.714q-22.286 21.143-52 21.143-20.572 0-33.715-8t-30.285-25.714L936 636.57q21.143-21.142 21.143-51.428 0-29.714-21.143-52l-408.571-408q-21.715-21.714-58.286-36.857t-66.857-15.143h128q30.285 0 66.857 15.143t58.286 36.857l408.571 408q21.143 22.286 21.143 52z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-talk"><path d="M512 85.333c235.637 0 426.667 191.03 426.667 426.667S747.637 938.667 512 938.667a424.779 424.779 0 0 1-219.125-60.502A2786.56 2786.56 0 0 0 272.82 866.4l-104.405 28.48c-23.893 6.507-45.803-15.413-39.285-39.296l28.437-104.288c-11.008-18.688-18.219-31.221-21.803-37.91A424.885 424.885 0 0 1 85.333 512c0-235.637 191.03-426.667 426.667-426.667zm-102.219 549.76a32 32 0 1 0-40.917 49.216A223.179 223.179 0 0 0 512 736c52.97 0 103.19-18.485 143.104-51.67a32 32 0 1 0-40.907-49.215A159.19 159.19 0 0 1 512 672a159.19 159.19 0 0 1-102.219-36.907z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-top"><path d="M951.296 424.96 1024 352.256 671.744 0 599.04 72.704l70.144 70.656-168.96 168.96a296.96 296.96 0 0 0-286.72 75.264L143.36 458.24l-70.656-70.656L0 460.8l245.248 245.248-139.776 139.776 72.704 72.704L318.464 778.24 563.2 1024l72.704-72.704-70.144-70.656 70.144-70.144a296.96 296.96 0 0 0 75.776-287.232l168.96-168.96z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-trumpet"><path d="m262.827 605.867 1.962.725 186.027 57.216 58.027 193.11A63.488 63.488 0 0 1 448 938.666a114.688 114.688 0 0 1-109.867-81.75l-75.264-251.05zm611.84-520.534A42.667 42.667 0 0 1 917.333 128v640A42.667 42.667 0 0 1 832 768V128a42.667 42.667 0 0 1 42.667-42.667zm-85.334 85.334v554.666L234.667 554.667V341.333l554.666-170.666zM192 341.333v213.334h-42.667A42.667 42.667 0 0 1 106.667 512V384a42.667 42.667 0 0 1 42.666-42.667H192z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-up"><path d="M449.126 1000.038V218.624L80.794 583.884 0 512 512 0l512 512-86.835 71.885-362.291-365.261v781.517H449.126z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-update"><path d="M824.264 95.36c0-23.859 25.043-44.16 48.902-44.16s49.714 20.301 49.714 44.16v190.08c0 23.859-19.054 52.868-42.913 52.868h-190.08c-23.859 0-46.696-25.96-46.696-49.819s22.55-46.249 46.409-46.249h82.025C702.344 175.534 610.22 155.853 512 155.853c-206.775 0-360.398 149.372-360.398 356.147 0 206.775 153.623 358.23 360.398 358.23 206.775 0 357.467-151.455 357.467-358.23 0-23.859 23.634-50.706 53.413-50.706 29.78 0 49.92 26.847 49.92 50.706 0 254.493-206.307 460.8-460.8 460.8-254.493 0-460.8-206.307-460.8-460.8C51.2 257.507 257.507 51.2 512 51.2c122.4 0 226.684 33.296 312.264 117.369.358.351.358-24.052 0-73.209z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-user"><path d="M298.667 298.667A213.333 213.333 0 1 0 512 85.333a213.333 213.333 0 0 0-213.333 213.334zM128 831.573zm0 0zm0 0zm768 2.56zm0 0zm-768 0zm578.56-275.2h-17.493a50.347 50.347 0 0 0-20.907 5.12s-14.08 8.107-26.88 13.654a331.947 331.947 0 0 1-128 25.6 321.707 321.707 0 0 1-128-25.6c-12.8-5.547-27.307-13.654-27.307-13.654a42.667 42.667 0 0 0-20.906-5.12H318.72A219.307 219.307 0 0 0 153.6 695.467a362.667 362.667 0 0 0-25.6 134.4 42.667 42.667 0 0 0 21.333 32.426S268.8 938.667 512 938.667s362.667-76.374 362.667-76.374A42.667 42.667 0 0 0 896 829.44a346.88 346.88 0 0 0-24.747-132.267A218.88 218.88 0 0 0 706.56 557.227zM896 829.867zm0 0z" /></symbol><symbol class="icon" viewBox="0 0 1024 1024"  id="icon-web"><path d="M126.2 898.2V64H64v896h896v-61.8z" fill="#7D7B81" /><path d="M897 192 576 513 381 384 192 640v192h705z" fill="#7D7B81" /></symbol>',r.insertBefore(e,r.lastChild)};document.readyState==="loading"?document.addEventListener("DOMContentLoaded",n):n()}const Er=L({__name:"NaiveProvider",setup(n){const r=Fn(),e=H(()=>r.value?nr:null),s={common:{primaryColorHover:"var(--primary-color)",primaryColorPressed:"var(--primary-color-darker)"},Button:{textColorText:"var(--text-color)",rippleColor:"var(--primary-color)"}},i=()=>{window.$dialog=rr(),window.$message=er(),window.$notification=tr()},l=L({name:"NaiveProviderContent",setup(){i()},render(){return null}});return(p,o)=>{const d=sr,g=ar,a=or,f=ir;return h(),S(f,{"inline-theme-disabled":"",theme:u(e),"theme-overrides":s},{default:c(()=>[t(a,null,{default:c(()=>[t(g,null,{default:c(()=>[t(d,null,{default:c(()=>[V(p.$slots,"default"),t(u(l))]),_:3})]),_:3})]),_:3})]),_:3},8,["theme"])}}});on.configure({easing:"ease",speed:1e3,showSpinner:!1,trickleSpeed:200,minimum:.3});const un=W("useAppStore",{state:()=>({local:!1,sideDrawer:!1,loading:!1,npTimeout:-1,loadingTimeout:-1,headerChangeHeight:700,rightContainer:!0,loginFrame:!1,registerFrame:!1,emailFrame:!1,passwordFrame:!1}),actions:{setLocalMode(){this.local=!0;const{localStore:n,blogStore:r}=C();n.loadArticle(),r.setBlogInfo(n.initBlogInfo()),r.articleCount=n.articleList.length,r.categoryCount=n.categoryList.length,r.tagCount=n.tagList.length,r.setStatus(1)},showSideDrawer(){this.sideDrawer=!0},showLoginFrame(){this.loginFrame=!0},showRegisterFrame(){this.registerFrame=!0},showEmailFrame(){this.emailFrame=!0},showPasswordFrame(){this.passwordFrame=!0},startLoading(){this.loading||(this.npTimeout!==-1&&clearTimeout(this.npTimeout),this.loadingTimeout!==-1&&clearTimeout(this.loadingTimeout),on.start(),this.loading=!0)},endLoading(){this.npTimeout=setTimeout(()=>{on.done()},100),this.loadingTimeout=setTimeout(()=>{this.loading=!1},300)}}}),kr=W("useBlogStore",{state:()=>({status:0,articleCount:0,categoryCount:0,tagCount:0,viewCount:0,siteConfig:{}}),actions:{setBlogInfo(n){this.articleCount=n.articleCount,this.categoryCount=n.categoryCount,this.tagCount=n.tagCount,this.viewCount=n.viewCount,this.siteConfig=n.siteConfig},setStatus(n){this.status=n}},getters:{},persist:{enabled:!0,strategies:[{storage:sessionStorage}]}}),An="Token";function Mr(n){return Ln.set(An,n)}function yn(){return Ln.remove(An)}const M={msgInfo:n=>{var r;(r=window.$message)==null||r.info(n)},msgError:n=>{var r;(r=window.$message)==null||r.error(n)},msgSuccess:n=>{var r;(r=window.$message)==null||r.success(n)},msgWarning:n=>{var r;(r=window.$message)==null||r.warning(n)},notifyInfo:n=>{var r;(r=window.$notification)==null||r.info({title:"提示",content:n})},notifyError:n=>{var r;(r=window.$notification)==null||r.error({title:"错误",content:n})},notifySuccess:n=>{var r;(r=window.$notification)==null||r.success({title:"成功",content:n})},notifyWarning:n=>{var r;(r=window.$notification)==null||r.warning({title:"警告",content:n})}},bn={"-1":"系统异常",400:"参数错误",401:"认证失败",404:"访问资源不存在",500:"操作失败",default:"系统未知错误，请反馈给管理员"},B=ur.create({baseURL:"/api",timeout:1e4,headers:{"Content-Type":"application/json;charset=UTF-8"}});B.interceptors.request.use(n=>new Promise(()=>{}),n=>(console.error(n),Promise.reject(n)));B.interceptors.response.use(n=>{const r=n.data.code||200,e=n.data.msg||bn[r]||bn.default;if(r===401){const{userStore:s}=C();return s.forceLogout(),M.msgError("无效的会话，或者会话已过期，请重新登录。"),Promise.reject("无效的会话，或者会话已过期，请重新登录。")}else return r!=200?(M.msgError(e),Promise.reject(e)):Promise.resolve(n)},n=>{let{message:r}=n;return r==="Network Error"?M.msgError("后端接口连接异常"):r.includes("timeout")&&M.msgError("系统接口请求超时"),Promise.reject(n)});const q={login:n=>B({url:"/login",method:"post",data:n}),register:n=>B({url:"/register",method:"post",data:n}),logout:()=>B({url:"/logout",method:"get"}),getUserInfo:()=>B({url:"/getUserInfo",method:"get"}),sendCode:n=>B({url:"/sendCode",method:"get",params:{username:n}})},Lr=W("useUserStore",{state:()=>({id:void 0,avatar:"",nickname:"",email:"",username:"",webSite:"",intro:"",loginType:void 0,path:"",articleLikeSet:[],commentLikeSet:[],talkLikeSet:[]}),actions:{login(n){return new Promise((r,e)=>{q.login(n).then(({data:s})=>{Mr(s.data),this.getUserInfo().then(()=>{M.msgSuccess("登录成功")}),r(s)}).catch(s=>{e(s)})})},getUserInfo(){return new Promise((n,r)=>{q.getUserInfo().then(({data:e})=>{this.id=e.data.id,this.avatar=e.data.avatar,this.nickname=e.data.nickname,this.email=e.data.email,this.username=e.data.username,this.webSite=e.data.webSite,this.intro=e.data.intro,this.loginType=e.data.loginType,this.articleLikeSet=e.data.articleLikeSet,this.commentLikeSet=e.data.commentLikeSet,this.talkLikeSet=e.data.talkLikeSet,n(e)}).catch(e=>{r(e)})})},updateUserInfo(n){this.nickname=n.nickname,this.webSite=n.webSite,this.intro=n.intro},logout(){return new Promise((n,r)=>{q.logout().then(()=>{this.$reset(),yn(),n(null)}).catch(e=>{r(e)})})},forceLogout(){this.$reset(),yn()},articleLike(n){let r=this.articleLikeSet.indexOf(n);r!=-1?this.articleLikeSet.splice(r,1):this.articleLikeSet.push(n)},commentLike(n){let r=this.commentLikeSet.indexOf(n);r!=-1?this.commentLikeSet.splice(r,1):this.commentLikeSet.push(n)},talkLike(n){let r=this.talkLikeSet.indexOf(n);r!=-1?this.talkLikeSet.splice(r,1):this.talkLikeSet.push(n)}},getters:{},persist:{enabled:!0,strategies:[{storage:localStorage}]}}),Sr=`---\r
title: CSS垂直居中\r
date: 2023-10-09 17:54\r
category: 前端\r
tags:\r
  - CSS\r
---\r
\r
1. 使用flex布局，将父元素设置为display:flex，并设置align-items:center，即可实现子元素的垂直居中。\r
2. 使用position和transform属性，将子元素设置为position:absolute，并设置top:50%和transform:translateY(-50%)，即可实现子元素的垂直居中。\r
3. 使用line-height属性，将父元素的line-height设置为与父元素高度相等的值，即可实现单行文本的垂直居中。`,zr=`---\r
title: CSS选择器\r
date: 2023-10-09 17:55\r
category: 前端\r
tags:\r
  - CSS\r
---\r
\r
| 选择器                      | 例子                    | 例子描述                           |\r
|--------------------------|-----------------------|--------------------------------|\r
| .*class*                 | .intro                | 选择class="intro"的所有元素。          |\r
| .*class1*.*class2*       | .name1.name2          | 选择class属性中同时有name1和name2的所有元素。 |\r
| .*class1*.*class2*       | .name1.name2          | 选择作为类名name1元素后代的所有类名name2元素。   |\r
| #*id*                    | #firstname            | 选择id="firstname"的元素。           |\r
| *                        | *                     | 选择所有元素。                        |\r
| *element*                | p                     | 选择所有<p>元素。                     |\r
| *element*.*class*        | p.intro               | 选择class="intro"的所有<p>元素。       |\r
| *element*,*element*      | div,p                 | 选择所有<div>元素和所有<p>元素。           |\r
| *element**element*       | divp                  | 选择<div>元素内的所有<p>元素。            |\r
| *element*>*element*      | div>p                 | 选择父元素是<div>的所有<p>元素。           |\r
| *element*+*element*      | div+p                 | 选择紧跟<div>元素的首个<p>元素。           |\r
| *element1*~*element2*    | p~ul                  | 选择前面有<p>元素的每个<ul>元素。           |\r
| [*attribute*\\]           | [target]              | 选择带有target属性的所有元素。             |\r
| [*attribute*=*value*\\]   | [target=_blank]       | 选择带有target="_blank"属性的所有元素。    |\r
| [*attribute*~=*value*\\]  | [title~=flower]       | 选择title属性包含单词"flower"的所有元素。    |\r
| [*attribute*\\|=*value*\\] | [lang\\|=en]           | 选择lang属性值以"en"开头的所有元素。         |\r
| [*attribute*^=*value*\\]  | a[href^="https"]      | 选择其src属性值以"https"开头的每个<a>元素。   |\r
| [*attribute*$=*value*\\]  | a[href$=".pdf"]       | 选择其src属性以".pdf"结尾的所有<a>元素。     |\r
| [*attribute**=*value*\\]  | a[href*="w3school"]   | 选择其href属性值中包含"abc"子串的每个<a>元素。  |\r
| :active                  | a:active              | 选择活动链接。                        |\r
| ::after                  | p::after              | 在每个<p>的内容之后插入内容。               |\r
| ::before                 | p::before             | 在每个<p>的内容之前插入内容。               |\r
| :checked                 | input:checked         | 选择每个被选中的<input>元素。             |\r
| :default                 | input:default         | 选择默认的<input>元素。                |\r
| :disabled                | input:disabled        | 选择每个被禁用的<input>元素。             |\r
| :empty                   | p:empty               | 选择没有子元素的每个<p>元素（包括文本节点）。       |\r
| :enabled                 | input:enabled         | 选择每个启用的<input>元素。              |\r
| :first-child             | p:first-child         | 选择属于父元素的第一个子元素的每个<p>元素。        |\r
| ::first-letter           | p::first-letter       | 选择每个<p>元素的首字母。                 |\r
| ::first-line             | p::first-line         | 选择每个<p>元素的首行。                  |\r
| :first-of-type           | p:first-of-type       | 选择属于其父元素的首个<p>元素的每个<p>元素。      |\r
| :focus                   | input:focus           | 选择获得焦点的input元素。                |\r
| :fullscreen              | :fullscreen           | 选择处于全屏模式的元素。                   |\r
| :hover                   | a:hover               | 选择鼠标指针位于其上的链接。                 |\r
| :in-range                | input:in-range        | 选择其值在指定范围内的input元素。            |\r
| :indeterminate           | input:indeterminate   | 选择处于不确定状态的input元素。             |\r
| :invalid                 | input:invalid         | 选择具有无效值的所有input元素。             |\r
| :lang(*language*)        | p:lang(it)            | 选择lang属性等于"it"（意大利）的每个<p>元素。   |\r
| :last-child              | p:last-child          | 选择属于其父元素最后一个子元素每个<p>元素。        |\r
| :last-of-type            | p:last-of-type        | 选择属于其父元素的最后<p>元素的每个<p>元素。      |\r
| :link                    | a:link                | 选择所有未访问过的链接。                   |\r
| :not(*selector*)         | :not(p)               | 选择非<p>元素的每个元素。                 |\r
| :nth-child(*n*)          | p:nth-child(2)        | 选择属于其父元素的第二个子元素的每个<p>元素。       |\r
| :nth-last-child(*n*)     | p:nth-last-child(2)   | 同上，从最后一个子元素开始计数。               |\r
| :nth-of-type(*n*)        | p:nth-of-type(2)      | 选择属于其父元素第二个<p>元素的每个<p>元素。      |\r
| :nth-last-of-type(*n*)   | p:nth-last-of-type(2) | 同上，但是从最后一个子元素开始计数。             |\r
| :only-of-type            | p:only-of-type        | 选择属于其父元素唯一的<p>元素的每个<p>元素。      |\r
| :only-child              | p:only-child          | 选择属于其父元素的唯一子元素的每个<p>元素。        |\r
| :optional                | input:optional        | 选择不带"required"属性的input元素。      |\r
| :out-of-range            | input:out-of-range    | 选择值超出指定范围的input元素。             |\r
| ::placeholder            | input::placeholder    | 选择已规定"placeholder"属性的input元素。  |\r
| :read-only               | input:read-only       | 选择已规定"readonly"属性的input元素。     |\r
| :read-write              | input:read-write      | 选择未规定"readonly"属性的input元素。     |\r
| :required                | input:required        | 选择已规定"required"属性的input元素。     |\r
| :root                    | :root                 | 选择文档的根元素。                      |\r
| ::selection              | ::selection           | 选择用户已选取的元素部分。                  |\r
| :target                  | #news:target          | 选择当前活动的#news元素。                |\r
| :valid                   | input:valid           | 选择带有有效值的所有input元素。             |\r
| :visited                 | a:visited             | 选择所有已访问的链接。                    |`,Ar=`---\r
title: Linux命令\r
cover: cover1.jpg\r
date: 2023-10-07\r
category: 技术\r
tags:\r
  - linux\r
---\r
\r
## 汇总表格\r
\r
|           命令            |               全称                |                                                                                                 描述                                                                                                  |\r
|:-----------------------:|:-------------------------------:|:---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------:|\r
|          alias          |              alias              |                                                                                               给命令起别名                                                                                                |\r
|           awk           |   Aho Weiberger and Kernighan   |                                                                                            三个作者的姓的第一个字母                                                                                             |\r
|          bash           |     GNU Bourne-Again Shell      |                                                                                           大多Linux的默认shell                                                                                           |\r
|           bc            |        basic calculator         |                                                                                       基础计算器，scale设定小数位，quit退出                                                                                       |\r
|           bg            |           background            |                                                                                               后台运行任务                                                                                                |\r
|           bye           |               bye               |                                                                                           用于在FTP时退出FTP执行                                                                                            |\r
|           cal           |            calendar             |                                                                                        日历，后跟月份数、年份数可显示指定月日历                                                                                         |\r
|           cat           |            catenate             |                                                                                输出文件内容，-n显示行号，-b不显示空行，有意思的是tac则从后向前输出                                                                                |\r
|           cd            |        change directory         |                                                                                                切换目录                                                                                                 |\r
|          chgrp          |          change group           |                                                                                              改变文件归属用户组                                                                                              |\r
|          clear          |              clear              |                                                                                                 清屏                                                                                                  |\r
|          chmod          |           change mode           |                                                                       改变读写权限，-R递归更改，a默认所有用户u本用户g本群组o其他用户，+-rwx增减读写执行权限，rwx421                                                                       |\r
|          chown          |          change owner           |                                                                                                改变所有者                                                                                                |\r
|           cp            |              copy               |                                                                                                 复制                                                                                                  |\r
|         crontab         |             chronos             |                                                           定时执行工具，* * * * *分别为分时日月星期*，代表所有，"-"为范围","为多值"/"为频率，-u指定用户，-l查看任务，-r删除任务，-e编辑任务。                                                           |\r
|           cut           |               cut               |                                                                      从文件中的每行文本中剪出指定字符，功能类似grep，-b以字节为单位，-c以字符为单位，-d自定义分隔符默认制表符                                                                      |\r
|          date           |              date               |                                         日期时间，date "+option"，-d显示指定时间，-r显示文件最后修改时间，-s修改时间，%x日期，%X时间，%F日期，%D月日年，%Y4位年份，%y2位年份，%m月份，%d日，%H24制时，%I12制时，%M分，%S秒                                          |\r
|         declare         |             declare             |                                                                                      用于声明shell变量，-a数组，-i指定整数型                                                                                       |\r
|           df            |            disk free            |                                                                                剩余磁盘空间，-h以适阅读单位显示，后跟文件则显示其所在挂载点磁盘剩余空间                                                                                |\r
|          dirs           |           directories           |                                               从目录栈中读取，功能类似于一个数组，先显示本目录再显示目录栈，-c删除目录栈中所有记录，-p每行显示一个（默认连续显示），-v每行显示一个并加编号，+N显示第N个目录（数字从0开始），-N显示倒数第N个目录                                               |\r
|           du            |           disk usage            |                                                                       磁盘使用情况，统计文件大小，-h以适阅读单位显示，-s不迭代仅合计统计，--max-depth n指定统计深度                                                                       |\r
|          egrep          |          extended GREP          |                                                                                            可使用扩展正则的grep                                                                                             |\r
|          exec           |             execute             |                                                                                              执行 ，内部命令                                                                                               |\r
|          find           |              find               |                   查找，find PATH -OPTION [-print] [-exec cmd] {} ;，PATH为查找数据若为当前目录下则为“.”，-name文件名，-mtime +/- N N天前或内更改的文件，-ctime +/-N N天前或内创建的文件，-type文件类型d为目录f为文件，-size 大于指定字节的文件                    |\r
|           fg            |           foreground            |                                                                                               前台运行任务                                                                                                |\r
|           fmt           |             format              |                                                                                              简单的文本格式化                                                                                               |\r
|           ftp           |     file transfer protocol      |                                                                   文件传输，后跟IP地址，get从远程FTP机下载到本机，mget批量下载，put将本机文件上传到远程FTP机，mput批量上传                                                                   |\r
|          free           |              free               |                                                                              内存使用情况，-s间隔N秒查询一次，-m -k -b以M、KB、Byte为单位显示                                                                              |\r
|          gawk           |             GNU AWK             |                                                                                                  -                                                                                                  |\r
|          grep           | global regular expression print |                                                                 全局正则表达式打印，强大的文本搜索工具，-c只输出计数，-i忽略大小写，-n输出行号，-v取反，-h多文件时不显文件名，-r递归搜索                                                                  |\r
|          head           |              head               |                                                                                                查看前n行                                                                                                |\r
|         iostat          |          in out status          |                                                                                              IO及CPU状态                                                                                               |\r
|         iostat          |          in out status          |                                                                                              IO及CPU状态                                                                                               |\r
|          less           |              less               |                                                                                              分页展示文件内容                                                                                               |\r
|         logname         |           login name            |                                                                                              显示当前登录用户名                                                                                              |\r
|           ln            |              link               |                                                                                         建立链接，-s建立软链接（默认硬链接）                                                                                         |\r
|         locate          |             locate              |                                                                        查找文件地址，并不查硬盘，而是在/var/lib/slocate/slocate.db中查看，速度快省资源                                                                        |\r
|           ls            |              list               |                                                                                 列出文件，-l详细信息，-h合适单位显示，-S大小排序，-t时间排序                                                                                  |\r
|          lsof           |         list open files         |                                                     列出当前系统打开的文件，ROOT权限，-c某进程打开的文件，-p某进程打开的文件，-u某用户打开的文件，跟目录为目录下打开的文件，跟文件为文件相关打开信息，-i某端口或IP打开的文件                                                     |\r
|           man           |             manual              |                                                                                       意思是手册，可以用这个命令查询其他命令的用法。                                                                                       |\r
|          mkdir          |         make directory          |                                                                                         创建目录，-p指定路径，-m指定权限                                                                                          |\r
|           mv            |              move               |                                                                   移动文件，同目录下则为重命名，-i询问试覆盖，-f同名强制覆盖，-b备份旧文件（文件名后加~），-u若本文件较新则覆盖旧文件                                                                    |\r
|          more           |              more               |                                                                                                分页显示                                                                                                 |\r
|           nl            |         number of lines         |                                                                    计算文件行号，类似cat，-b a 计算空行（默认不计算），-n rz以6位数字显示行号前补0，-w指定占位数（默认6）                                                                     |\r
|         passwd          |            password             |                                                                                                修改密码                                                                                                 |\r
|           pg            |              pager              |                                                                                              分页显示文件内容                                                                                               |\r
|          ping           |     packet interNet grouper     |                                                                                        测试网络，-c指定次数，-i指定间隔秒数                                                                                         |\r
|         printf          |          print format           |                                                                                               格式化输出文本                                                                                               |\r
|           ps            |        processes status         |                                          进程状态 ，命令执行时刻进程信息，-a同终端进程，-A所有进程，-u指定用户，-e同-A，-f展示所有信息，aux查看进程详细信息类似-ef，-C可跟搜索词，--sort=-pcpu,+pmem按cpu降序按mem内存升序排序                                          |\r
|          pushd          |         push directory          |                                                                          当目录放入目录栈，+/-N将正数/倒数第N个目录移到栈顶并切换到该目录，-n在切目录栈时不切目录                                                                           |\r
|          popd           |          pop directory          |                                                                                   从目录栈弹出目录，+/-N将正数/倒数第N个目录从目录栈中移除                                                                                   |\r
|           pwd           |     print working directory     |                                                                                               打印工作目录                                                                                                |\r
|           rcp           |           remote copy           |                                                                               远程拷贝，-r递归，-p保留修改时间和权限，将远程文件拷贝到本机，限制条件较多                                                                               |\r
|           rm            |             remove              |                                                                                         删除文件，-r递归，-f不询问强制删除                                                                                         |\r
|          rmdir          |        remove directory         |                                                                                                删除目录                                                                                                 |\r
|         rlogin          |          remote login           |                                                                                       -l指定登录用户名，rlogin IP/主机名                                                                                       |\r
|           rsh           |          remote shell           |                                                                                          远程执行shell，-l指定用户                                                                                           |\r
|           rpm           |     RedHat package manager      | RedHat软件包管理工具，类似Windows里面的“添加/删除程序”，-a查询所有，-e卸载，-h显示进度，-i显示相关信息，-l列出软件所有文件名，-q查询，-p软件包内文件，-v显示执行过程；常用参数：-ivh安装并显示进度，-qpl查看软件包内文件，-qa查询一个软件是否安装过，--relocate指定安装目录，--rebuild编译+打包，--recompile编译+打包+安装 |\r
|         reboot          |        restart computer         |                                                                                                重启计算机                                                                                                |\r
|           scp           |           secure copy           |                                                                         用于Linux间复制，基于ssh远程复制，-p保留修改时间权限，-r递归，-P指定端口，-v显示进度，                                                                         |\r
|           sed           |          Stream Editor          |             流编辑器，本身即先查，在CMD中匹配字符两侧要有//，sed -OPTION 'CMD' file，选项：-n安静模式，-i直接修改不屏幕输出，-r支持扩展正则，-e多命令，-f文件指定动作；命令：a增，d删除，i插，c改，s正则查，p屏幕输出，g获取内存缓冲区内容并替代当前模板块中文字，G获取内容追加，h内容拷贝到内存，H内容追加到内存              |\r
|           set           |               set               |                                                              主要作用是显示系统中已经存在的shell变量，以及设置shell变量的新变量值，不能够定义新的shell变量，定义新的变量使用declare命令。                                                              |\r
|        shutdown         |            shutdown             |                                                                     关机，-t设定延迟时间，-k通知所有用户，-r重启，-h关机后停机，-c取消关机，-f强制关机，time设定关机时间                                                                      |\r
|          sleep          |              sleep              |                                                                                                动作延迟                                                                                                 |\r
|          sort           |              sort               |                                                                     排序，-b忽略行首空格，-r反向，-n以数值，-o排序结果输出文件，-t指定列分隔符，-k指定排序列，-f忽略大小写                                                                      |\r
|      split = split      |           将大文件分割成小文件            |                                                                              - N每N行分割成一个文件，-bN每N字节分割成一个文件，-C按字节分割保证完整性                                                                              |\r
|           ssh           |          Secure Shell           |                                                                                       远程登录Linux，-l指定用户，-p指定端口                                                                                       |\r
|         sshpass         |             sshpass             |                                                                                            一款ssh免密码输入软件                                                                                             |\r
|           su            |           switch user           |                                                             切换用户，root切任何用户不需要密码，但其他用户之间切换需要密码，- user表示切换到用户user并将用户环境一并切换，-c执行命令再退回原用户                                                              |\r
|          sudo           |          super user do          |                                                                                               受限制的su                                                                                                |\r
|           svn           |           sub version           |                                                                                               版本控制系统                                                                                                |\r
|          sync           |              sync               |                                                                                              强制将内存写入硬盘                                                                                              |\r
|           tar           |          tape archive           |                                              打包归档文件，-c创建create，-x提取extract，-t查看list，-f指定归档文件，-m解压时不变更文件更改时间，-p解压时原权限不变，-v显示执行详情，-r向归档文件中追加，-u更新归档文件中文件                                              |\r
|          tail           |              tail               |                                                                                               查看尾部n行                                                                                                |\r
|          touch          |              touch              |                                                                         创建，修改文件或者目录的时间属性，若文件不存在，系统会建立一个新的文件，更改文件权限再结合chmod                                                                          |\r
|           top           |               top               |                                                                           实时显示系统中各个进程的资源占用状况，该命令可以按CPU使用、内存使用和执行时间对任务进行排序                                                                           |\r
|         umount          |             unmount             |                                                                                         卸载，可以通过设备名卸载或挂载点卸载                                                                                          |\r
|          unset          |              unset              |                                                                                              用于删除变量或函数                                                                                              |\r
| useradd、userdel、usermod |     useradd、userdel、usermod     |                                                                                           新增用户、删除用户、修改用户                                                                                            |\r
|            w            |               who               |                                                                                            显示目前登入系统的用户信息                                                                                            |\r
|          xargs          |       eXtended ARGuments        |                                                                     给命令传递参数的一个过滤器，也是组合多个命令的一个工具，它把一个数据流分割为一些足够小的块，以方便过滤器和命令进行处理                                                                     |\r
|           wc            |           word count            |                                                                            计算文件的Byte数、字数、或是列数，-c只显示字节数，-l只显示行数，-w只统计单词数                                                                             |\r
|           who           |               who               |                                                                                           显示当前系统所有使用者等信息                                                                                            |\r
|         whoami          |             whoami              |                                                                                            命令用于显示自身用户名称。                                                                                            |\r
|          which          |              which              |                                                                                              命令用于查找文件                                                                                               |\r
|         whereis         |            where is             |                                                                                               查看文件位置                                                                                                |\r
\r
## 部分常用命令\r
\r
### \`whoami\` - 查看当前登录用户\r
\r
### \`pwd\` - 查看当前所在位置\r
\r
### \`cd\`  路径 - 进入指定的文件夹\r
\r
1. 绝对路径 -- 从根目录开始写的路径 -- 例：\`cd /home/test\`\r
\r
2. 相对路径 -- 从当前目录开始写的路径\r
\r
   ​                   \`..\`表示从当前目录向外走 -- 例：\`cd ../../home\`\r
\r
   ​                   \`.\`表示从当前目录向里走 -- 例：\`cd ./home \`(’\`./\` 可省略，变为 \`cd /home\`)\r
\r
### \`ls \` - 查看当前目录下内容\r
\r
\`ls -l\` -- 查看当前目录下内容的详细信息\r
\r
\`ll\` -- 等同于\`ls -l\`\r
\r
### \`touch 文件名\` - 创建一个文件\r
\r
### \`mkdir 文件夹名\` - 创建一个文件夹\r
\r
### \`rm 文件名\` - 删除一个文件\r
\r
### \`rmdir 文件夹名\` - 删除一个空文件夹\r
\r
### \`rm -r 非空文件夹\` - 递归删除一个非空文件夹\r
\r
删除其中每个文件时都会询问\r
\r
### \`rm -rf 非空文件夹\` - 递归强制删除一个非空文件夹\r
\r
删除多个文件夹时，可用空格分隔：\`rm -rf dir1 ../dir2 /home/dir3\`\r
\r
删除文件夹内容，但保留文件夹本身：\`rm -rf dir/*\`\r
\r
删库跑路：\`rm -rf /*\`\r
\r
### \`more 文件名\` - 读取文件内容\r
\r
### \`vi\`  - 编辑器\r
\r
![image-20231006003651405](./assets/Linux命令/image-20231006003651405.png)\r
\r
- \`:wq\`是保存退出；\`:q!\`是不保存退出\r
- \`vi 新文件名\` 可直接创建文件并编辑\r
\r
### \`ping IP\` - 测试网络连接\r
\r
### \`chmod 777 文件名\` - 给文件赋权限\r
\r
### \`rpm -i 安装文件名\` - 安装rpm文件\r
\r
## 其它\r
\r
重启网络：\`systemctl restart network\`\r
\r
关闭防火墙：\`sudo systemctl disable firewalld\` \r
`,Cr=`---\r
title: TS学习\r
cover: cover2.jpg\r
date: 2023-10-09 17:53\r
category: 前端\r
tags:\r
  - typescript\r
  - 教程\r
---\r
\r
# 基础类型\r
\r
TS是JS的超集，所以JS基础的类型都包含在内\r
\r
**起步安装 npm install typescript -g**\r
\r
**运行tsc 文件名**\r
\r
基础类型：Boolean、Number、String、null、undefined&nbsp;以及 ES6\r
的&nbsp;&nbsp; [Symbol](http://es6.ruanyifeng.com/#docs/symbol)&nbsp;和 ES10\r
的&nbsp; [BigInt](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/BigInt)。\r
\r
## 1.字符串类型\r
\r
字符串是使用string定义的\r
\r
\`\`\`typescript\r
let a: string = '123'\r
//普通声明\r
\r
//也可以使用es6的字符串模板\r
let str: string = \`dddd\${a}\`\r
\`\`\`\r
\r
其中&nbsp;\`\r
&nbsp;用来定义&nbsp; [ES6 中的模板字符串](http://es6.ruanyifeng.com/#docs/string%23%E6%A8%A1%E6%9D%BF%E5%AD%97%E7%AC%A6%E4%B8%B2)\r
，\${expr}&nbsp;用来在模板字符串中嵌入表达式。\r
\r
## 2.数字类型\r
\r
支持十六进制、十进制、八进制和二进制；\r
\r
\`\`\`typescript\r
let notANumber: number = NaN;//Nan\r
let num: number = 123;//普通数字\r
let infinityNumber: number = Infinity;//无穷大\r
let decimal: number = 6;//十进制\r
let hex: number = 0xf00d;//十六进制\r
let binary: number = 0b1010;//二进制\r
let octal: number = 0o744;//八进制s\r
\`\`\`\r
\r
## 3.布尔类型\r
\r
注意，使用构造函数 Boolean 创造的对象不是布尔值：\r
\r
\`\`\`typescript\r
let createdBoolean: boolean = new Boolean(1)\r
//这样会报错 应为事实上 new Boolean() 返回的是一个 Boolean 对象 \r
\`\`\`\r
\r
事实上 new Boolean() 返回的是一个 Boolean 对象&nbsp;需要改成\r
\r
\`\`\`typescript\r
let createdBoolean: Boolean = new Boolean(1)\r
\`\`\`\r
\r
\`\`\`typescript\r
let booleand: boolean = true //可以直接使用布尔值\r
\r
let booleand2: boolean = Boolean(1) //也可以通过函数返回布尔值\r
\`\`\`\r
\r
## 4.其它\r
\r
JavaScript 没有空值（Void）的概念，在 TypeScript 中，可以用&nbsp;void&nbsp;表示没有任何返回值的函数\r
\r
\`\`\`typescript\r
function voidFn(): void {\r
  console.log('test void')\r
}\r
\`\`\`\r
\r
void&nbsp;类型的用法，主要是用在我们**不希望**调用者关心函数返回值的情况下，比如通常的**异步回调函数**\r
\r
**void也可以定义undefined 和 null类型**\r
\r
\`\`\`typescript\r
let u: void = undefined\r
let n: void = null;\r
\`\`\`\r
\r
\`\`\`typescript\r
let u: undefined = undefined;//定义undefined\r
let n: null = null;//定义null\r
\`\`\`\r
\r
**void 和 undefined 和 null 最大的区别**\r
\r
**与 void 的区别是，undefined 和 null 是所有类型的子类型。也就是说 undefined 类型的变量，可以赋值给 string 类型的变量：**\r
\r
\`\`\`typescript\r
//这样写会报错 void类型不可以分给其他类型\r
let test: void = undefined\r
let num2: string = "1"\r
\r
num2 = test\r
\`\`\`\r
\r
\`\`\`typescript\r
//这样是没问题的\r
let test: null = null\r
let num2: string = "1"\r
\r
num2 = test\r
\r
//或者这样的\r
let test: undefined = undefined\r
let num2: string = "1"\r
\r
num2 = test\r
\`\`\`\r
\r
**TIPS 注意：**\r
\r
如果你配置了tsconfig.json 开启了严格模式，那么null就不能赋予void类型\r
\r
\`\`\`typescript\r
{\r
  "compilerOptions"\r
:\r
  {\r
    "strict"\r
  :\r
    true\r
  }\r
}\r
\`\`\`\r
\r
# 任意类型\r
\r
## Any 类型 和 unknown 顶级类型\r
\r
\`\`\`typescript\r
nodejs\r
环境执行ts\r
npm\r
i\r
@types/\r
node--\r
save - dev （node环境支持的依赖必装）\r
npm\r
i\r
ts - node--\r
g\r
\`\`\`\r
\r
1.没有强制限定哪种类型，随时切换类型都可以&nbsp;我们可以对 any 进行任何操作，不需要检查类型\r
\r
\`\`\`typescript\r
let anys: any = 123\r
anys = '123'\r
anys = true\r
\`\`\`\r
\r
2.声明变量的时候没有指定任意类型默认为any\r
\r
\`\`\`typescript\r
let anys;\r
anys = '123'\r
anys = true\r
\`\`\`\r
\r
3.弊端如果使用any 就失去了TS类型检测的作用\r
\r
4.TypeScript 3.0中引入的 unknown 类型也被认为是 top type ，但它更安全。与 any 一样，所有类型都可以分配给unknown\r
\r
unknow&nbsp; unknow类型比any更加严格当你要使用any 的时候可以尝试使用unknown\r
\r
\`\`\`typescript\r
//unknown 可以定义任何类型的值\r
let value: unknown;\r
\r
value = true;             // OK\r
value = 42;               // OK\r
value = "Hello World";    // OK\r
value = [];               // OK\r
value = {};               // OK\r
value = null;             // OK\r
value = undefined;        // OK\r
value = Symbol("type");   // OK\r
\r
//这样写会报错unknow类型不能作为子类型只能作为父类型 any可以作为父类型和子类型\r
//unknown类型不能赋值给其他类型\r
let names: unknown = '123'\r
let names2: string = names\r
\r
//这样就没问题 any类型是可以的\r
let names: any = '123'\r
let names2: string = names\r
\r
//unknown可赋值对象只有unknown 和 any\r
let bbb: unknown = '123'\r
let aaa: any = '456'\r
\r
aaa = bbb\r
\`\`\`\r
\r
区别2\r
\r
\`\`\`typescript\r
如果是any类型在对象没有这个属性的时候还在获取是不会报错的\r
let obj: any = { b: 1 }\r
obj.a\r
\r
\r
如果是unknow\r
是不能调用属性和方法\r
let obj: unknown = { b: 1, ccc: (): number => 213 }\r
obj.b\r
obj.ccc()\r
\`\`\`\r
\r
# 对象类型\r
\r
在 [typescript](https://so.csdn.net/so/search?from=pc_blog_highlight&q=typescript)中，我们定义对象的方式要用关键字*\r
*interface**（接口），我的理解是使用**interface**来定义一种约束，让数据的结构满足约束的格式。定义方式如下：\r
\r
\`\`\`typescript\r
//这样写是会报错的 因为我们在person定义了a，b但是对象里面缺少b属性\r
//使用接口约束的时候不能多一个属性也不能少一个属性\r
//必须与接口保持一致\r
interface Person {\r
  b: string,\r
  a: string\r
}\r
\r
const person: Person = {\r
  a: "213"\r
}\r
\`\`\`\r
\r
\`\`\`typescript\r
//重名interface  可以合并\r
interface A {name: string}\r
\r
interface A {age: number}\r
\r
var x: A = { name: 'xx', age: 20 }\r
\r
//继承\r
interface A {\r
  name: string\r
}\r
\r
interface B extends A {\r
  age: number\r
}\r
\r
let obj: B = {\r
  age: 18,\r
  name: "string"\r
}\r
\`\`\`\r
\r
## 可选属性 使用?操作符\r
\r
\`\`\`typescript\r
//可选属性的含义是该属性可以不存在\r
//所以说这样写也是没问题的\r
interface Person {\r
  b?: string,\r
  a: string\r
}\r
\r
const person: Person = {\r
  a: "213"\r
}\r
\`\`\`\r
\r
## 任意属性 [propName: string]\r
\r
需要注意的是，一旦定义了任意属性，那么确定属性和可选属性的类型都必须是它的类型的子集：\r
\r
\`\`\`typescript\r
//在这个例子当中我们看到接口中并没有定义C但是并没有报错\r
//应为我们定义了[propName: string]: any;\r
//允许添加新的任意属性\r
interface Person {\r
  b?: string,\r
  a: string,\r
\r
  [propName: string]: any;\r
}\r
\r
const person: Person = {\r
  a: "213",\r
  c: "123"\r
}\r
\`\`\`\r
\r
## 只读属性 readonly\r
\r
readonly 只读属性是不允许被赋值的只能读取\r
\r
\`\`\`typescript\r
//这样写是会报错的\r
//应为a是只读的不允许重新赋值\r
interface Person {\r
  b?: string,\r
  readonly a: string,\r
\r
  [propName: string]: any;\r
}\r
\r
const person: Person = {\r
  a: "213",\r
  c: "123"\r
}\r
\r
person.a = 123\r
\`\`\`\r
\r
\`\`\`typescript\r
interface Person {\r
  b?: string,\r
  readonly a: string,\r
\r
  [propName: string]: any;\r
\r
  cb: () => void\r
}\r
\r
const person: Person = {\r
  a: "213",\r
  c: "123",\r
  cb: () => {\r
    console.log(123)\r
  }\r
}\r
\`\`\`\r
\r
# 数组类型\r
\r
## 类型[ ]\r
\r
\`\`\`typescript\r
//类型加中括号\r
let arr: number[] = [123]\r
//这样会报错定义了数字类型出现字符串是不允许的\r
let arr: number[] = [1, 2, 3, '1']\r
//操作方法添加也是不允许的\r
let arr: number[] = [1, 2, 3,]\r
arr.unshift('1')\r
\r
\r
var arr: number[] = [1, 2, 3]; //数字类型的数组\r
var arr2: string[] = ["1", "2"]; //字符串类型的数组\r
var arr3: any[] = [1, "2", true]; //任意类型的数组\r
\`\`\`\r
\r
## 数组泛型\r
\r
规则 Array&lt;类型&gt;\r
\r
\`\`\`typescript\r
let arr: Array<number> = [1, 2, 3, 4, 5]\r
\`\`\`\r
\r
## 用接口表示数组\r
\r
一般用来描述类数组&nbsp;\r
\r
\`\`\`typescript\r
interface NumberArray {\r
  [index: number]: number;\r
}\r
\r
let fibonacci: NumberArray = [1, 1, 2, 3, 5];\r
//表示：只要索引的类型是数字时，那么值的类型必须是数字。\r
\`\`\`\r
\r
## 多维数组\r
\r
\`\`\`typescript\r
let data: number[][] = [[1, 2], [3, 4]];\r
\`\`\`\r
\r
## arguments类数组\r
\r
\`\`\`typescript\r
function Arr(...args: any): void {\r
  console.log(arguments)\r
  //错误的arguments 是类数组不能这样定义\r
  let arr: number[] = arguments\r
}\r
\r
Arr(111, 222, 333)\r
\r
\r
function Arr(...args: any): void {\r
  console.log(arguments)\r
  //ts内置对象IArguments 定义\r
  let arr: IArguments = arguments\r
}\r
\r
Arr(111, 222, 333)\r
\r
//其中 IArguments 是 TypeScript 中定义好了的类型，它实际上就是：\r
interface IArguments {\r
  [index: number]: any;\r
\r
  length: number;\r
  callee: Function;\r
}\r
\`\`\`\r
\r
## any 在数组中的应用\r
\r
一个常见的例子数组中可以存在任意类型\r
\r
\`\`\`typescript\r
let list: any[] = ['test', 1, [], { a: 1 }]\r
\`\`\`\r
\r
# 函数扩展\r
\r
\`\`\`typescript\r
//注意，参数不能多传，也不能少传 必须按照约定的类型来\r
const fn = (name: string, age: number): string => {\r
  return name + age\r
}\r
fn('张三', 18)\r
\`\`\`\r
\r
## 函数的可选参数?\r
\r
\`\`\`typescript\r
//通过?表示该参数为可选参数\r
const fn = (name: string, age?: number): string => {\r
  return name + age\r
}\r
fn('张三')\r
\`\`\`\r
\r
## 函数参数的默认值\r
\r
\`\`\`typescript\r
const fn = (name: string = "我是默认值"): string => {\r
  return name\r
}\r
fn()\r
\`\`\`\r
\r
## 接口定义函数\r
\r
\`\`\`typescript\r
//定义参数 num 和 num2  ：后面定义返回值的类型\r
interface Add {\r
  (num: number, num2: number): number\r
}\r
\r
const fn: Add = (num: number, num2: number): number => {\r
  return num + num2\r
}\r
fn(5, 5)\r
\r
\r
interface User {\r
  name: string;\r
  age: number;\r
}\r
\r
function getUserInfo(user: User): User {\r
  return user\r
}\r
\`\`\`\r
\r
## 定义剩余参数\r
\r
\`\`\`typescript\r
const fn = (array: number[], ...items: any[]): any[] => {\r
  console.log(array, items)\r
  return items\r
}\r
\r
let a: number[] = [1, 2, 3]\r
\r
fn(a, '4', '5', '6')\r
\`\`\`\r
\r
## 函数重载\r
\r
重载是方法名字相同，而参数不同，返回类型可以相同也可以不同。\r
\r
如果参数类型不同，则参数类型应设置为&nbsp;**any**。\r
\r
参数数量不同你可以将不同的参数设置为可选。\r
\r
\`\`\`typescript\r
function fn(params: number): void\r
\r
function fn(params: string, params2: number): void\r
\r
function fn(params: any, params2?: any): void {\r
  console.log(params)\r
  console.log(params2)\r
\r
}\r
\r
\r
fn(123)\r
\r
fn('123', 456)\r
\`\`\`\r
\r
# 类型断言 | 联合类型 | 交叉类型\r
\r
## 类型断言\r
\r
语法： 值 \`as\` 类型 或  <类型>值\r
\r
\`\`\`\r
interface A {\r
	run: string\r
}\r
\r
interface B {\r
	build: string\r
}\r
\r
const fn = (type: A | B): string => {\r
       return type.run\r
}\r
\`\`\`\r
\r
上述写法是有警告的应为B的接口上面是没有定义\`run\`这个属性的\r
\r
使用断言：\r
\r
\`\`\`\r
const fn = (type: A | B): string => {\r
       return (type as A).run\r
}\r
\`\`\`\r
\r
需要注意的是，类型断言只能够「欺骗」TypeScript 编译器，无法避免运行时的错误，滥用类型断言可能会导致运行时错误\r
\r
### 使用any临时断言\r
\r
\`\`\`\r
window.abc = 123\r
//这样写会报错因为window没有abc这个东西\r
\r
(window as any).abc = 123\r
//可以使用any临时断言在 any 类型的变量上，访问任何属性都是允许的\r
\`\`\`\r
\r
### as const\r
\r
如果是普通类型跟直接const声明是一样的\r
\r
\`\`\`\r
const names = '小满'\r
names = 'aa' //无法修改\r
 \r
let names2 = '小满' as const\r
names2 = 'aa' //无法修改\r
\`\`\`\r
\r
但还是有些区别的\r
\r
\`\`\`\r
// 数组\r
let a1 = [10, 20] as const;\r
const a2 = [10, 20];\r
 \r
a1.unshift(30); // 错误，此时已经断言字面量为[10, 20],数据无法做任何修改\r
a2.unshift(30); // 通过，没有修改指针\r
\`\`\`\r
\r
**类型断言是不具备影响力的**，在下面的例子中，将 \`something\`  断言为 \`boolean\` 虽然可以通过编译，但是并没有什么用，并不会影响结果，因为编译过程中会删除类型断言\r
\r
\`\`\`\r
function toBoolean(something: any): boolean {\r
    return something as boolean;\r
}\r
 \r
toBoolean(1);\r
// 返回值为 1\r
\`\`\`\r
\r
## 联合类型\r
\r
\`\`\`\r
//例如我们的手机号通常是13XXXXXXX 为数字类型 这时候产品说需要支持座机\r
//所以我们就可以使用联合类型支持座机字符串\r
let myPhone: number | string  = '010-820'\r
 \r
//下方写法是会报错的,因为我们的联合类型只有数字和字符串并没有布尔值\r
let myPhone: number | string  = true\r
\`\`\`\r
\r
函数使用联合类型\r
\r
\`\`\`\r
const fn = (something:number | boolean):boolean => {\r
     return !!something\r
}\r
\`\`\`\r
\r
## 交叉类型\r
\r
多种类型的集合，联合对象将具有所联合类型的所有成员\r
\r
\`\`\`\r
interface People {\r
  age: number,\r
  height： number\r
}\r
interface Man{\r
  sex: string\r
}\r
const xiaoman = (man: People & Man) => {\r
  console.log(man.age)\r
  console.log(man.height)\r
  console.log(man.sex)\r
}\r
xiaoman({age: 18,height: 180,sex: 'male'});\r
\`\`\`\r
\r
# 内置对象\r
\r
JavaScript 中有很多 [内置对象](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects)，它们可以直接在\r
TypeScript 中当做定义好了的类型。\r
\r
## ECMAScript 的内置对象\r
\r
Boolean、Number、string、RegExp、Date、Error\r
\r
\`\`\`typescript\r
let b: Boolean = new Boolean(1)\r
console.log(b)\r
let n: Number = new Number(true)\r
console.log(n)\r
let s: String = new String('string')\r
console.log(s)\r
let d: Date = new Date()\r
console.log(d)\r
let r: RegExp = /^1/\r
console.log(r)\r
let e: Error = new Error("error!")\r
console.log(e)\r
\`\`\`\r
\r
## DOM 和 BOM 的内置对象\r
\r
Document、HTMLElement、Event、NodeList 等\r
\r
\`\`\`typescript\r
let body: HTMLElement = document.body;\r
let allDiv: NodeList = document.querySelectorAll('div');\r
//读取div 这种需要类型断言 或者加个判断，因为若读不到则返回null\r
let div: HTMLElement = document.querySelector('div') as HTMLDivElement\r
document.addEventListener('click', function (e: MouseEvent) {\r
\r
});\r
\r
//dom元素的映射表\r
interface HTMLElementTagNameMap {\r
  "a": HTMLAnchorElement;\r
  "abbr": HTMLElement;\r
  "address": HTMLElement;\r
  "applet": HTMLAppletElement;\r
  "area": HTMLAreaElement;\r
  "article": HTMLElement;\r
  "aside": HTMLElement;\r
  "audio": HTMLAudioElement;\r
  "b": HTMLElement;\r
  "base": HTMLBaseElement;\r
  "bdi": HTMLElement;\r
  "bdo": HTMLElement;\r
  "blockquote": HTMLQuoteElement;\r
  "body": HTMLBodyElement;\r
  "br": HTMLBRElement;\r
  "button": HTMLButtonElement;\r
  "canvas": HTMLCanvasElement;\r
  "caption": HTMLTableCaptionElement;\r
  "cite": HTMLElement;\r
  "code": HTMLElement;\r
  "col": HTMLTableColElement;\r
  "colgroup": HTMLTableColElement;\r
  "data": HTMLDataElement;\r
  "datalist": HTMLDataListElement;\r
  "dd": HTMLElement;\r
  "del": HTMLModElement;\r
  "details": HTMLDetailsElement;\r
  "dfn": HTMLElement;\r
  "dialog": HTMLDialogElement;\r
  "dir": HTMLDirectoryElement;\r
  "div": HTMLDivElement;\r
  "dl": HTMLDListElement;\r
  "dt": HTMLElement;\r
  "em": HTMLElement;\r
  "embed": HTMLEmbedElement;\r
  "fieldset": HTMLFieldSetElement;\r
  "figcaption": HTMLElement;\r
  "figure": HTMLElement;\r
  "font": HTMLFontElement;\r
  "footer": HTMLElement;\r
  "form": HTMLFormElement;\r
  "frame": HTMLFrameElement;\r
  "frameset": HTMLFrameSetElement;\r
  "h1": HTMLHeadingElement;\r
  "h2": HTMLHeadingElement;\r
  "h3": HTMLHeadingElement;\r
  "h4": HTMLHeadingElement;\r
  "h5": HTMLHeadingElement;\r
  "h6": HTMLHeadingElement;\r
  "head": HTMLHeadElement;\r
  "header": HTMLElement;\r
  "hgroup": HTMLElement;\r
  "hr": HTMLHRElement;\r
  "html": HTMLHtmlElement;\r
  "i": HTMLElement;\r
  "iframe": HTMLIFrameElement;\r
  "img": HTMLImageElement;\r
  "input": HTMLInputElement;\r
  "ins": HTMLModElement;\r
  "kbd": HTMLElement;\r
  "label": HTMLLabelElement;\r
  "legend": HTMLLegendElement;\r
  "li": HTMLLIElement;\r
  "link": HTMLLinkElement;\r
  "main": HTMLElement;\r
  "map": HTMLMapElement;\r
  "mark": HTMLElement;\r
  "marquee": HTMLMarqueeElement;\r
  "menu": HTMLMenuElement;\r
  "meta": HTMLMetaElement;\r
  "meter": HTMLMeterElement;\r
  "nav": HTMLElement;\r
  "noscript": HTMLElement;\r
  "object": HTMLObjectElement;\r
  "ol": HTMLOListElement;\r
  "optgroup": HTMLOptGroupElement;\r
  "option": HTMLOptionElement;\r
  "output": HTMLOutputElement;\r
  "p": HTMLParagraphElement;\r
  "param": HTMLParamElement;\r
  "picture": HTMLPictureElement;\r
  "pre": HTMLPreElement;\r
  "progress": HTMLProgressElement;\r
  "q": HTMLQuoteElement;\r
  "rp": HTMLElement;\r
  "rt": HTMLElement;\r
  "ruby": HTMLElement;\r
  "s": HTMLElement;\r
  "samp": HTMLElement;\r
  "script": HTMLScriptElement;\r
  "section": HTMLElement;\r
  "select": HTMLSelectElement;\r
  "slot": HTMLSlotElement;\r
  "small": HTMLElement;\r
  "source": HTMLSourceElement;\r
  "span": HTMLSpanElement;\r
  "strong": HTMLElement;\r
  "style": HTMLStyleElement;\r
  "sub": HTMLElement;\r
  "summary": HTMLElement;\r
  "sup": HTMLElement;\r
  "table": HTMLTableElement;\r
  "tbody": HTMLTableSectionElement;\r
  "td": HTMLTableDataCellElement;\r
  "template": HTMLTemplateElement;\r
  "textarea": HTMLTextAreaElement;\r
  "tfoot": HTMLTableSectionElement;\r
  "th": HTMLTableHeaderCellElement;\r
  "thead": HTMLTableSectionElement;\r
  "time": HTMLTimeElement;\r
  "title": HTMLTitleElement;\r
  "tr": HTMLTableRowElement;\r
  "track": HTMLTrackElement;\r
  "u": HTMLElement;\r
  "ul": HTMLUListElement;\r
  "var": HTMLElement;\r
  "video": HTMLVideoElement;\r
  "wbr": HTMLElement;\r
}\r
\`\`\`\r
\r
如果我们不指定返回的类型TS是推断不出来返回的是什么类型\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16.png)\r
\r
指定返回的类型\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529555660-2.png)\r
\r
函数定义返回promise 语法规则:Promise&lt;T&gt; 类型&nbsp;\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529555660-3.png)\r
\r
\`\`\`typescript\r
function promise(): Promise<number> {\r
  return new Promise<number>((resolve, reject) => {\r
    resolve(1)\r
  })\r
}\r
\r
promise().then(res => {\r
  console.log(res)\r
})\r
\`\`\`\r
\r
当你在使用一些常用的方法的时候，TypeScript 实际上已经帮你做了很多类型判断的工作了\r
\r
而他们的定义文件，则在&nbsp; [TypeScript 核心库的定义文件](https://github.com/Microsoft/TypeScript/tree/master/src/lib)中\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529555660-4.png)\r
\r
## 代码雨案例\r
\r
\`\`\`typescript\r
let canvas = document.querySelector('#canvas') as HTMLCanvasElement\r
let ctx = canvas.getContext('2d') as CanvasRenderingContext2D\r
canvas.height = screen.availHeight; //可视区域的高度\r
canvas.width = screen.availWidth; //可视区域的宽度\r
let str: string[] = 'XMZSWSSBXMZSWSSBXMZSWSSBXMZSWSSBXMZSWSSB'.split('')\r
let Arr = Array(Math.ceil(canvas.width / 10)).fill(0) //获取宽度例如1920 / 10 192\r
console.log(Arr);\r
\r
const rain = () => {\r
  ctx.fillStyle = 'rgba(0,0,0,0.05)'//填充背景颜色\r
  ctx.fillRect(0, 0, canvas.width, canvas.height)//背景\r
  ctx.fillStyle = "#0f0"; //文字颜色\r
  Arr.forEach((item, index) => {\r
    ctx.fillText(str[Math.floor(Math.random() * str.length)], index * 10, item + 10)\r
    Arr[index] = item >= canvas.height || item > 10000 * Math.random() ? 0 : item + 10; //添加随机数让字符随机出现不至于那么平整\r
  })\r
  console.log(Arr);\r
\r
}\r
setInterval(rain, 40)\r
\`\`\`\r
\r
![img](./assets/TS学习/6c4083b3ce5141f6a3e13b6d4cb19fb2.png)\r
\r
# Class类\r
\r
ES6提供了更接近传统语言的写法，引入了Class（类）这个概念，作为对象的模板。通过class关键字，可以定义类。基本上，ES6的class可以看作只是一个语法糖，它的绝大部分功能，ES5都可以做到，新的class写法只是让对象原型的写法更加清晰、更像面向对象编程的语法而已。上面的代码用ES6的“类”改写，就是下面这样。\r
\r
\`\`\`typescript\r
//定义类\r
class Person {\r
  constructor() {\r
  }\r
\r
  run() {\r
  }\r
}\r
\`\`\`\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844585-15.png)\r
\r
在TypeScript是不允许直接在constructor 定义变量的 需要在constructor上面先声明\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844585-16.png)\r
\r
这样引发了第二个问题你如果了定义了变量不用 也会报错 通常是给个默认值 或者 进行赋值\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844586-17.png)\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844586-18.png)\r
\r
恭喜你已经学会了在class中 如何定义变量\r
\r
## 修饰符\r
\r
public、private、protected\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844586-19.png)\r
\r
使用public 修饰符 可以让你定义的变量 内部访问 也可以外部访问 如果不写默认就是public\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844586-20.png)\r
\r
使用&nbsp; private 修饰符 代表定义的变量私有的只能在内部访问 不能在外部访问\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844586-21.png)\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844586-22.png)\r
&nbsp;&nbsp;使用&nbsp; protected 修饰符 代表定义的变量私有的只能在内部和继承的子类中访问&nbsp;不能在外部访问\r
\r
TIPS:代码\r
\r
\`\`\`typescript\r
class Person {\r
  public name: string\r
  private age: number\r
  protected some: any\r
\r
  constructor(name: string, ages: number, some: any) {\r
    this.name = name\r
    this.age = ages\r
    this.some = some\r
  }\r
\r
  run() {\r
\r
  }\r
}\r
\r
class Man extends Person {\r
  constructor() {\r
    super("张三", 18, 1)\r
    console.log(this.some)\r
  }\r
\r
  create() {\r
    console.log(this.some)\r
  }\r
}\r
\r
let xiaoman = new Person('小满', 18, 1)\r
let man = new Man()\r
man.some\r
\`\`\`\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844586-23.png)\r
\r
我们用static 定义的属性 不可以通过this 去访问 只能通过类名去调用\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844586-24.png)\r
\r
static 静态函数 同样也是不能通过this 去调用 也是通过类名去调用\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844586-25.png)\r
\r
需注意： 如果两个函数都是static 静态的是可以通过this互相调用\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844586-26.png)\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844587-27.png)\r
\r
&nbsp;ts interface 定义类 使用关键字&nbsp;implements后面跟interface的名字多个用逗号隔开 继承还是用extends\r
\r
\`\`\`typescript\r
interface PersonClass {\r
  get(type: boolean): boolean\r
}\r
\r
interface PersonClass2 {\r
  set(): void,\r
\r
  asd: string\r
}\r
\r
class A {\r
  name: string\r
\r
  constructor() {\r
    this.name = "123"\r
  }\r
}\r
\r
class Person extends A implements PersonClass, PersonClass2 {\r
  asd: string\r
\r
  constructor() {\r
    super()\r
    this.asd = '123'\r
  }\r
\r
  get(type: boolean) {\r
    return type\r
  }\r
\r
  set() {\r
\r
  }\r
}\r
\`\`\`\r
\r
应用场景如果你写的类实例化之后毫无用处此时我可以把他定义为抽象类\r
\r
或者你也可以把他作为一个基类-&gt; 通过继承一个派生类去实现基类的一些方法\r
\r
我们看例子\r
\r
下面这段代码会报错抽象类无法被实例化\r
\r
\`\`\`typescript\r
abstract class A {\r
  public name: string\r
\r
}\r
\r
new A()\r
\`\`\`\r
\r
例子2\r
\r
我们在A类定义了 getName 抽象方法但为实现\r
\r
我们B类实现了A定义的抽象方法 如不实现就不报错 我们定义的抽象方法必须在派生类实现\r
\r
\`\`\`typescript\r
abstract class A {\r
  name: string\r
\r
  constructor(name: string) {\r
    this.name = name;\r
  }\r
\r
  print(): string {\r
    return this.name\r
  }\r
\r
  abstract getName(): string\r
}\r
\r
class B extends A {\r
  constructor() {\r
    super('小满')\r
  }\r
\r
  getName(): string {\r
    return this.name\r
  }\r
}\r
\r
let b = new B();\r
\r
console.log(b.getName());\r
\`\`\`\r
\r
视频案例\r
\r
\`\`\`typescript\r
//1. class 的基本用法 继承 和 类型约束\r
//2. class 的修饰符 readonly  private protected public\r
//3. super 原理\r
//4. 静态方法\r
//5. get set\r
interface Options {\r
  el: string | HTMLElement\r
}\r
\r
interface VueCls {\r
  init(): void\r
\r
  options: Options\r
}\r
\r
interface Vnode {\r
  tag: string\r
  text?: string\r
  props?: {\r
    id?: number | string\r
    key?: number | string | object\r
  }\r
  children?: Vnode[]\r
}\r
\r
class Dom {\r
  constructor() {\r
  }\r
\r
  private createElement(el: string): HTMLElement {\r
    return document.createElement(el)\r
  }\r
\r
  protected setText(el: Element, text: string | null) {\r
    el.textContent = text;\r
  }\r
\r
  protected render(createElement: Vnode): HTMLElement {\r
    const el = this.createElement(createElement.tag)\r
    if (createElement.children && Array.isArray(createElement.children)) {\r
      createElement.children.forEach(item => {\r
        const child = this.render(item)\r
        this.setText(child, item.text ?? null)\r
        el.appendChild(child)\r
      })\r
    } else {\r
      this.setText(el, createElement.text ?? null)\r
    }\r
    return el;\r
  }\r
}\r
\r
class Vue extends Dom implements VueCls {\r
  options: Options\r
\r
  constructor(options: Options) {\r
    super()\r
    this.options = options;\r
    this.init()\r
  }\r
\r
  static version() {\r
    return '1.0.0'\r
  }\r
\r
  public init() {\r
    let app = typeof this.options.el == 'string' ? document.querySelector(this.options.el) : this.options.el;\r
    let data: Vnode = {\r
      tag: "div",\r
      props: {\r
        id: 1,\r
        key: 1\r
      },\r
      children: [\r
        {\r
          tag: "div",\r
          text: "子集1",\r
        },\r
        {\r
          tag: "div",\r
          text: "子集2"\r
        }\r
      ]\r
    }\r
    app?.appendChild(this.render(data))\r
    console.log(app);\r
\r
    this.mount(app as Element)\r
  }\r
\r
  public mount(app: Element) {\r
    document.body.append(app)\r
  }\r
}\r
\r
\r
const v = new Vue({\r
  el: "#app"\r
})\r
\`\`\`\r
\r
# 元组类型\r
\r
如果需要一个固定大小的不同类型值的集合，我们需要使用元组。&nbsp;\r
\r
**元组（Tuple）是固定数量的不同类型的元素的组合**。\r
\r
元组与集合的不同之处在于，元组中的元素类型可以是不同的，而且数量固定。元组的好处在于可以把多个元素作为一个单元传递。如果一个方法需要返回多个值，可以把这多个值作为元组返回，而不需要创建额外的类来表示。\r
\r
\`\`\`typescript\r
let arr: [number, string] = [1, 'string']\r
\r
\r
let arr2: readonly [number, boolean, string, undefined] = [1, true, 'sring', undefined]\r
\`\`\`\r
\r
当赋值或访问一个已知索引的元素时，会得到正确的类型：\r
\r
\`\`\`typescript\r
let arr: [number, string] = [1, 'string']\r
arr[0].length //error\r
arr[1].length //success\r
\r
//数字是没有length 的\r
\`\`\`\r
\r
元组类型还可以支持自定义名称和变为可选的\r
\r
\`\`\`typescript\r
let a: [x: number, y?: boolean] = [1]\r
\`\`\`\r
\r
\`\`\`typescript\r
let arr: [number, string] = [1, 'string']\r
\r
arr.push(true)//error\r
\`\`\`\r
\r
对于越界的元素他的类型被限制为 联合类型（就是你在元组中定义的类型）如下图\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16.png)\r
\r
\`\`\`typescript\r
let excel: [string, string, number, string][] = [\r
  ['title', 'name', 1, '123'],\r
  ['title', 'name', 1, '123'],\r
  ['title', 'name', 1, '123'],\r
  ['title', 'name', 1, '123'],\r
  ['title', 'name', 1, '123'],\r
]\r
\`\`\`\r
\r
# 枚举类型\r
\r
在javaScript中是没有枚举的概念的，TS帮我们定义了枚举这个类型\r
\r
## 1.数字枚举\r
\r
例如 红绿蓝 Red = 0 Green = 1 Blue= 2 分别代表红色0 绿色为1 蓝色为2\r
\r
\`\`\`typescript\r
enum Types {\r
  Red,\r
  Green,\r
  BLue\r
}\r
\`\`\`\r
\r
这样写就可以实现应为ts定义的枚举中的每一个组员默认都是从0开始的所以也就是\r
\r
\`\`\`typescript\r
enum Types {\r
  Red = 0,\r
  Green = 1,\r
  BLue = 2\r
}\r
\r
//默认就是从0开始的 可以不写值\r
\`\`\`\r
\r
增长枚举\r
\r
\`\`\`typescript\r
enum Types {\r
  Red = 1,\r
  Green,\r
  BLue\r
}\r
\`\`\`\r
\r
如上，我们定义了一个数字枚举， Red使用初始化为&nbsp;1。 其余的成员会从&nbsp;1开始自动增长。 换句话说，\r
Type.Red的值为&nbsp;1，&nbsp;Green为&nbsp;2，&nbsp;Blue为&nbsp;3。\r
\r
## 2.字符串枚举\r
\r
字符串枚举的概念很简单。 在一个字符串枚举里，每个成员都必须用字符串字面量，或另外一个字符串枚举成员进行初始化。\r
\r
\`\`\`typescript\r
enum Types {\r
  Red = 'red',\r
  Green = 'green',\r
  BLue = 'blue'\r
}\r
\`\`\`\r
\r
由于字符串枚举没有自增长的行为，字符串枚举可以很好的序列化。\r
换句话说，如果你正在调试并且必须要读一个数字枚举的运行时的值，这个值通常是很难读的 -\r
它并不能表达有用的信息，字符串枚举允许你提供一个运行时有意义的并且可读的值，独立于枚举成员的名字。\r
\r
## 3.异构枚举\r
\r
枚举可以混合字符串和数字成员\r
\r
\`\`\`typescript\r
enum Types {\r
  No = "No",\r
  Yes = 1,\r
}\r
\`\`\`\r
\r
## 4.接口枚举\r
\r
定义一个枚举Types 定义一个接口A 他有一个属性red 值为Types.yyds\r
\r
声明对象的时候要遵循这个规则\r
\r
\`\`\`typescript\r
enum Types {\r
  yyds,\r
  dddd\r
}\r
\r
interface A {\r
  red: Types.yyds\r
}\r
\r
let obj: A = {\r
  red: Types.yyds\r
}\r
\`\`\`\r
\r
## 5.const枚举\r
\r
let&nbsp; 和 var 都是不允许的声明只能使用const\r
\r
大多数情况下，枚举是十分有效的方案。 然而在某些情况下需求很严格。 为了避免在额外生成的代码上的开销和额外的非直接的对枚举成员的访问，我们可以使用&nbsp;const枚举。\r
常量枚举通过在枚举上使用&nbsp;const修饰符来定义\r
\r
const 声明的枚举会被编译成常量\r
\r
普通声明的枚举编译完后是个对象\r
\r
\`\`\`typescript\r
const enum Types {\r
  No = "No",\r
  Yes = 1,\r
}\r
\`\`\`\r
\r
Const 声明编译之后\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678530352627-6.png)\r
\r
普通声明编译之后\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678530271083-3.png)\r
\r
它包含了正向映射（&nbsp;name&nbsp;-&gt;&nbsp;value）和反向映射（&nbsp;value&nbsp;-&gt;&nbsp;name）\r
\r
要注意的是&nbsp; **不会** 为字符串枚举成员生成反向映射。\r
\r
\`\`\`typescript\r
enum Enum {\r
  fall\r
}\r
\r
let a = Enum.fall;\r
console.log(a); //0\r
let nameOfA = Enum[a];\r
console.log(nameOfA); //fall\r
\`\`\`\r
\r
# 类型推论 | 类型别名\r
\r
## 什么是类型推论\r
\r
\`\`\`\r
let str = "小满zs"\r
\`\`\`\r
\r
1. 我声明了一个变量但是没有定义类型\r
\r
TypeScript会在没有明确的指定类型的时候推测出一个类型，这就是类型推论\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678531141722-9.png)\r
\r
所以TS帮我推断出来这是一个string类型\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678530827082-3.png)\r
\r
不能够在赋值给别的类型\r
\r
2. 如果你声明变量没有定义类型也没有赋值这时候TS会推断成any类型可以进行任何操作\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678530868688-6.png)\r
\r
## 类型别名\r
\r
type 关键字（可以给一个类型定义一个名字）多用于复合类型\r
\r
\`\`\`typescript\r
//定义类型别名\r
type str = string\r
let s: str = "我是小满"\r
console.log(s);\r
\r
//定义函数别名\r
type str = () => string\r
let s: str = () => "我是小满"\r
console.log(s);\r
\r
//定义联合类型别名\r
type str = string | number\r
let s: str = 123\r
let s2: str = '123'\r
console.log(s, s2);\r
\r
//定义值的别名\r
type value = boolean | 0 | '213'\r
let s: value = true\r
\`\`\`\r
\r
type 和 interface 还是一些区别的 虽然都可以定义类型\r
\r
1. interface可以继承 type 只能通过 & 交叉类型合并\r
\r
2. type 可以定义 联合类型 和 可以使用一些操作符 interface不行\r
\r
3. interface 遇到重名的会合并 type 不行\r
\r
### type高级用法\r
\r
左边的值会作为右边值的子类型遵循图中上下的包含关系\r
\r
\`\`\`TypeScript\r
type a = 1 extends number ? 1 : 0 //1\r
\r
type a = 1 extends Number ? 1 : 0 //1\r
\r
type a = 1 extends Object ? 1 : 0 //1\r
\r
type a = 1 extends any ? 1 : 0 //1\r
\r
type a = 1 extends unknow ? 1 : 0 //1\r
\r
type a = 1 extends never ? 1 : 0 //0\r
\`\`\`\r
\r
![img](../assets/5e0a471d4f894d6492543f6ee1243f34.png)\r
\r
# never类型\r
\r
TypeScript 将使用 never 类型来表示不应该存在的状态\r
\r
\`\`\`typescript\r
// 返回never的函数必须存在无法达到的终点\r
\r
// 因为必定抛出异常，所以 error 将不会有返回值\r
function error(message: string): never {\r
  throw new Error(message);\r
}\r
\r
// 因为存在死循环，所以 loop 将不会有返回值\r
function loop(): never {\r
  while (true) {\r
  }\r
}\r
\`\`\`\r
\r
## never 与 void 的差异\r
\r
\`\`\`typescript\r
//void类型只是没有返回值 但本身不会出错\r
function Void(): void {\r
  console.log();\r
}\r
\r
//只会抛出异常没有返回值\r
function Never(): never {\r
  throw new Error('aaa')\r
}\r
\`\`\`\r
\r
差异2&nbsp; &nbsp;当我们鼠标移上去的时候会发现 只有void和number&nbsp; &nbsp; never在联合类型中会被直接移除\r
\r
\`\`\`typescript\r
type A = void | number | never\r
\`\`\`\r
\r
## never 类型的一个应用场景\r
\r
举一个我们可能会见到的例子\r
\r
\`\`\`typescript\r
type A = '小满' | '大满' | '超大满'\r
\r
function isXiaoMan(value: A) {\r
  switch (value) {\r
    case "小满":\r
      break\r
    case "大满":\r
      break\r
    case "超大满":\r
      break\r
    default:\r
      //是用于场景兜底逻辑\r
      const error: never = value;\r
      return error\r
  }\r
}\r
\`\`\`\r
\r
比如新来了一个同事他新增了一个篮球，我们必须手动找到所有 switch 代码并处理，否则将有可能引入 BUG 。\r
\r
而且这将是一个“隐蔽型”的BUG，如果回归面不够广，很难发现此类BUG。\r
\r
那 TS 有没有办法帮助我们在类型检查阶段发现这个问题呢？\r
\r
\`\`\`typescript\r
type A = '小满' | '大满' | '超大满' | "小小满"\r
\r
function isXiaoMan(value: A) {\r
  switch (value) {\r
    case "小满":\r
      break\r
    case "大满":\r
      break\r
    case "超大满":\r
      break\r
    default:\r
      //是用于场景兜底逻辑\r
      const error: never = value;\r
      return error\r
  }\r
}\r
\`\`\`\r
\r
由于任何类型都不能赋值给&nbsp;never&nbsp;类型的变量，所以当存在进入&nbsp;default&nbsp;分支的可能性时，TS的类型检查会及时帮我们发现这个问题\r
\r
# symbol类型\r
\r
**自ECMAScript 2015起，\`symbol\`成为了一种新的原生类型，就像\`number\`和\`string\`一样。**\r
\r
symbol类型的值是通过Symbol构造函数创建的。\r
\r
可以传递参做为唯一标识 只支持 string 和 number类型的参数\r
\r
\`\`\`typescript\r
let sym1 = Symbol();\r
let sym2 = Symbol("key"); // 可选的字符串key\r
\`\`\`\r
\r
Symbol的值是唯一的\r
\r
\`\`\`typescript\r
const s1 = Symbol()\r
const s2 = Symbol()\r
// s1 === s2 =>false\r
\`\`\`\r
\r
用作对象属性的键\r
\r
\`\`\`typescript\r
let sym = Symbol();\r
\r
let obj = {\r
  [sym]: "value"\r
};\r
\r
console.log(obj[sym]); // "value"\r
\`\`\`\r
\r
使用symbol定义的属性，是不能通过如下方式遍历拿到的\r
\r
\`\`\`typescript\r
const symbol1 = Symbol('666')\r
const symbol2 = Symbol('777')\r
const obj1 = {\r
  [symbol1]: '小满',\r
  [symbol2]: '二蛋',\r
  age: 19,\r
  sex: '女'\r
}\r
// 1 for in 遍历\r
for (const key in obj1) {\r
  // 注意在console看key,是不是没有遍历到symbol1\r
  console.log(key)\r
}\r
// 2 Object.keys 遍历\r
Object.keys(obj1)\r
console.log(Object.keys(obj1))\r
// 3 getOwnPropertyNames\r
console.log(Object.getOwnPropertyNames(obj1))\r
// 4 JSON.stringfy\r
console.log(JSON.stringify(obj1))\r
\`\`\`\r
\r
如何拿到\r
\r
\`\`\`typescript\r
// 1 拿到具体的symbol 属性,对象中有几个就会拿到几个\r
Object.getOwnPropertySymbols(obj1)\r
console.log(Object.getOwnPropertySymbols(obj1))\r
// 2 es6 的 Reflect 拿到对象的所有属性\r
Reflect.ownKeys(obj1)\r
console.log(Reflect.ownKeys(obj1))\r
\`\`\`\r
\r
### Symbol.iterator 迭代器 和 生成器 for of\r
\r
支持遍历大部分类型迭代器 arr nodeList argumetns set map 等\r
\r
\`\`\`typescript\r
var arr = [1, 2, 3, 4];\r
let iterator = arr[Symbol.iterator]();\r
\r
console.log(iterator.next());  //{ value: 1, done: false }\r
console.log(iterator.next());  //{ value: 2, done: false }\r
console.log(iterator.next());  //{ value: 3, done: false }\r
console.log(iterator.next());  //{ value: 4, done: false }\r
console.log(iterator.next());  //{ value: undefined, done: true }\r
\`\`\`\r
\r
测试用例\r
\r
\`\`\`typescript\r
interface Item {\r
  age: number,\r
  name: string\r
}\r
\r
const array: Array<Item> = [{ age: 123, name: "1" }, { age: 123, name: "2" }, { age: 123, name: "3" }]\r
\r
type mapTypes = string | number\r
const map: Map<mapTypes, mapTypes> = new Map()\r
\r
map.set('1', '王爷')\r
map.set('2', '陆北')\r
\r
const obj = {\r
  aaa: 123,\r
  bbb: 456\r
}\r
\r
let set: Set<number> = new Set([1, 2, 3, 4, 5, 6])\r
// let it:Iterator<Item> = array[Symbol.iterator]()\r
const gen = (erg: any): void => {\r
  let it: Iterator<any> = erg[Symbol.iterator]()\r
  let next: any = { done: false }\r
  while (!next.done) {\r
    next = it.next()\r
    if (!next.done) {\r
      console.log(next.value)\r
    }\r
  }\r
}\r
gen(array)\r
\`\`\`\r
\r
我们平时开发中不会手动调用iterator 应为 他是有语法糖的就是for of&nbsp; 记住 for of\r
是不能循环对象的应为对象没有&nbsp;iterator&nbsp;&nbsp;\r
\r
\`\`\`typescript\r
for (let value of map) {\r
  console.log(value)\r
}\r
\`\`\`\r
\r
数组解构的原理其实也是调用迭代器的\r
\r
\`\`\`typescript\r
var [a, b, c] = [1, 2, 3]\r
\r
var x = [...xxxx]\r
\`\`\`\r
\r
&nbsp;那我们可以自己实现一个迭代器让对象支持for of\r
\r
\`\`\`typescript\r
const obj = {\r
  max: 5,\r
  current: 0,\r
  [Symbol.iterator]() {\r
    return {\r
      max: this.max,\r
      current: this.current,\r
      next() {\r
        if (this.current == this.max) {\r
          return {\r
            value: undefined,\r
            done: true\r
          }\r
        } else {\r
          return {\r
            value: this.current++,\r
            done: false\r
          }\r
        }\r
      }\r
    }\r
  }\r
}\r
console.log([...obj])\r
\r
for (let val of obj) {\r
  console.log(val);\r
\r
}\r
\`\`\`\r
\r
以下为这些symbols的列表：\r
\r
**Symbol.hasInstance** 方法，会被instanceof运算符调用。构造器对象用来识别一个对象是否是其实例。\r
\r
**Symbol.isConcatSpreadable** 布尔值，表示当在一个对象上调用Array.prototype.concat时，这个对象的数组元素是否可展开。\r
\r
**Symbol.iterator** 方法，被for-of语句调用。返回对象的默认迭代器。\r
\r
**Symbol.match** 方法，被String.prototype.match调用。正则表达式用来匹配字符串。\r
\r
**Symbol.replace** 方法，被String.prototype.replace调用。正则表达式用来替换字符串中匹配的子串。\r
\r
**Symbol.search** 方法，被String.prototype.search调用。正则表达式返回被匹配部分在字符串中的索引。\r
\r
**Symbol.species** 函数值，为一个构造函数。用来创建派生对象。\r
\r
**Symbol.split** 方法，被String.prototype.split调用。正则表达式来用分割字符串。\r
\r
**Symbol.toPrimitive** 方法，被ToPrimitive抽象操作调用。把对象转换为相应的原始值。\r
\r
**Symbol.toStringTag** 方法，被内置方法Object.prototype.toString调用。返回创建对象时默认的字符串描述。\r
\r
**Symbol.unscopables** 对象，它自己拥有的属性会被with作用域排除在外。\r
\r
# 泛型\r
\r
泛型在TypeScript 是很重要的东西 例如vue3 是用ts编写的 里面用到了非常多的泛型\r
\r
ok:我们看一个小例子\r
\r
## 函数泛型\r
\r
我写了两个函数一个是数字类型的函数，另一个是字符串类型的函数,其实就是类型不同，\r
\r
实现的功能是一样的，这时候我们就可以使用泛型来优化\r
\r
\`\`\`typescript\r
function num(a: number, b: number): Array<number> {\r
  return [a, b];\r
}\r
\r
num(1, 2)\r
\r
function str(a: string, b: string): Array<string> {\r
  return [a, b];\r
}\r
\r
str('独孤', '求败')\r
\`\`\`\r
\r
泛型优化\r
\r
语法为函数名字后面跟一个&lt;参数名&gt; 参数名可以随便写 例如我这儿写了T\r
\r
当我们使用这个函数的时候把参数的类型传进去就可以了 （也就是动态类型）\r
\r
\`\`\`typescript\r
function Add<T>(a: T, b: T): Array<T> {\r
  return [a, b]\r
}\r
\r
Add<number>(1, 2)\r
Add<string>('1', '2')\r
\`\`\`\r
\r
我们也可以使用不同的泛型参数名，只要在数量上和使用方式上能对应上就可以。\r
\r
\`\`\`typescript\r
function Sub<T, U>(a: T, b: U): Array<T | U> {\r
  const params: Array<T | U> = [a, b]\r
  return params\r
}\r
\r
\r
Sub<Boolean, number>(false, 1)\r
\`\`\`\r
\r
## 定义泛型接口\r
\r
声明接口的时候 在名字后面加一个&lt;参数&gt;\r
\r
使用的时候传递类型\r
\r
\`\`\`typescript\r
interface MyInter<T> {\r
  (arg: T): T\r
}\r
\r
function fn<T>(arg: T): T {\r
  return arg\r
}\r
\r
let result: MyInter<number> = fn\r
\r
result(123)\r
\`\`\`\r
\r
## 对象字面量泛型\r
\r
\`\`\`typescript\r
let foo: { <T>(arg: T): T }\r
\r
foo = function <T>(arg: T): T {\r
  return arg\r
}\r
\r
foo(123)\r
\`\`\`\r
\r
## 泛型约束\r
\r
我们期望在一个泛型的变量上面，获取其length参数，但是，有的数据类型是没有length属性的\r
\r
\`\`\`typescript\r
function getLegnth<T>(arg: T) {\r
  return arg.length\r
}\r
\`\`\`\r
\r
![img](./assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678531728577-14.png)\r
&nbsp;这时候我们就可以使用泛型约束\r
\r
于是，我们就得对使用的泛型进行约束，我们约束其为具有length属性的类型，这里我们会用到interface,代码如下\r
\r
\`\`\`typescript\r
interface Len {\r
  length: number\r
}\r
\r
function getLegnth<T extends Len>(arg: T) {\r
  return arg.length\r
}\r
\r
getLegnth<string>('123')\r
\`\`\`\r
\r
## 使用keyof 约束对象\r
\r
其中使用了TS泛型和泛型约束。首先定义了T类型并使用extends关键字继承object类型的子类型，然后使用keyof操作符获取T类型的所有键，它的返回\r
类型是联合 类型，最后利用extends关键字约束 K类型必须为keyof T联合类型的子类型\r
\r
\`\`\`typescript\r
function prop<T, K extends keyof T>(obj: T, key: K) {\r
  return obj[key]\r
}\r
\r
\r
let o = { a: 1, b: 2, c: 3 }\r
\r
prop(o, 'a')\r
prop(o, 'd') //此时就会报错发现找不到\r
\`\`\`\r
\r
## 泛型类\r
\r
声明方法跟函数类似名称后面定义&lt;类型&gt;\r
\r
使用的时候确定类型new Sub&lt;number&gt;()\r
\r
\`\`\`typescript\r
class Sub<T> {\r
  attr: T[] = [];\r
\r
  add(a: T): T[] {\r
    return [a]\r
  }\r
}\r
\r
let s = new Sub<number>()\r
s.attr = [1, 2, 3]\r
s.add(123)\r
\r
let str = new Sub<string>()\r
str.attr = ['1', '2', '3']\r
str.add('123')\r
\`\`\`\r
\r
# tsconfig.json配置文件\r
\r
## 生成tsconfig.json 文件\r
\r
这个文件是通过tsc --init命令生成的\r
\r
## 配置详解\r
\r
\`\`\`typescript\r
"compilerOptions"\r
:\r
{\r
  "incremental"\r
:\r
  true, // TS编译器在第一次编译之后会生成一个存储编译信息的文件，第二次编译会在第一次的基础上进行增量编译，可以提高编译的速度\r
    "tsBuildInfoFile"\r
:\r
  "./buildFile", // 增量编译文件的存储位置\r
    "diagnostics"\r
:\r
  true, // 打印诊断信息 \r
    "target"\r
:\r
  "ES5", // 目标语言的版本\r
    "module"\r
:\r
  "CommonJS", // 生成代码的模板标准\r
    "outFile"\r
:\r
  "./app.js", // 将多个相互依赖的文件生成一个文件，可以用在AMD模块中，即开启时应设置"module": "AMD",\r
    "lib"\r
:\r
  ["DOM", "ES2015", "ScriptHost", "ES2019.Array"], // TS需要引用的库，即声明文件，es5 默认引用dom、es5、scripthost,如需要使用es的高级版本特性，通常都需要配置，如es8的数组新特性需要引入"ES2019.Array",\r
    "allowJS"\r
:\r
  true, // 允许编译器编译JS，JSX文件\r
    "checkJs"\r
:\r
  true, // 允许在JS文件中报错，通常与allowJS一起使用\r
    "outDir"\r
:\r
  "./dist", // 指定输出目录\r
    "rootDir"\r
:\r
  "./", // 指定输出文件目录(用于输出)，用于控制输出目录结构\r
    "declaration"\r
:\r
  true, // 生成声明文件，开启后会自动生成声明文件\r
    "declarationDir"\r
:\r
  "./file", // 指定生成声明文件存放目录\r
    "emitDeclarationOnly"\r
:\r
  true, // 只生成声明文件，而不会生成js文件\r
    "sourceMap"\r
:\r
  true, // 生成目标文件的sourceMap文件\r
    "inlineSourceMap"\r
:\r
  true, // 生成目标文件的inline SourceMap，inline SourceMap会包含在生成的js文件中\r
    "declarationMap"\r
:\r
  true, // 为声明文件生成sourceMap\r
    "typeRoots"\r
:\r
  [], // 声明文件目录，默认时node_modules/@types\r
    "types"\r
:\r
  [], // 加载的声明文件包\r
    "removeComments"\r
:\r
  true, // 删除注释 \r
    "noEmit"\r
:\r
  true, // 不输出文件,即编译后不会生成任何js文件\r
    "noEmitOnError"\r
:\r
  true, // 发送错误时不输出任何文件\r
    "noEmitHelpers"\r
:\r
  true, // 不生成helper函数，减小体积，需要额外安装，常配合importHelpers一起使用\r
    "importHelpers"\r
:\r
  true, // 通过tslib引入helper函数，文件必须是模块\r
    "downlevelIteration"\r
:\r
  true, // 降级遍历器实现，如果目标源是es3/5，那么遍历器会有降级的实现\r
    "strict"\r
:\r
  true, // 开启所有严格的类型检查\r
    "alwaysStrict"\r
:\r
  true, // 在代码中注入'use strict'\r
    "noImplicitAny"\r
:\r
  true, // 不允许隐式的any类型\r
    "strictNullChecks"\r
:\r
  true, // 不允许把null、undefined赋值给其他类型的变量\r
    "strictFunctionTypes"\r
:\r
  true, // 不允许函数参数双向协变\r
    "strictPropertyInitialization"\r
:\r
  true, // 类的实例属性必须初始化\r
    "strictBindCallApply"\r
:\r
  true, // 严格的bind/call/apply检查\r
    "noImplicitThis"\r
:\r
  true, // 不允许this有隐式的any类型\r
    "noUnusedLocals"\r
:\r
  true, // 检查只声明、未使用的局部变量(只提示不报错)\r
    "noUnusedParameters"\r
:\r
  true, // 检查未使用的函数参数(只提示不报错)\r
    "noFallthroughCasesInSwitch"\r
:\r
  true, // 防止switch语句贯穿(即如果没有break语句后面不会执行)\r
    "noImplicitReturns"\r
:\r
  true, //每个分支都会有返回值\r
    "esModuleInterop"\r
:\r
  true, // 允许export=导出，由import from 导入\r
    "allowUmdGlobalAccess"\r
:\r
  true, // 允许在模块中全局变量的方式访问umd模块\r
    "moduleResolution"\r
:\r
  "node", // 模块解析策略，ts默认用node的解析策略，即相对的方式导入\r
    "baseUrl"\r
:\r
  "./", // 解析非相对模块的基地址，默认是当前目录\r
    "paths"\r
:\r
  { // 路径映射，相对于baseUrl\r
    // 如使用jq时不想使用默认版本，而需要手动指定版本，可进行如下配置\r
    "jquery"\r
  :\r
    ["node_modules/jquery/dist/jquery.min.js"]\r
  }\r
,\r
  "rootDirs"\r
:\r
  ["src", "out"], // 将多个目录放在一个虚拟目录下，用于运行时，即编译后引入文件的位置可能发生变化，这也设置可以虚拟src和out在同一个目录下，不用再去改变路径也不会报错\r
    "listEmittedFiles"\r
:\r
  true, // 打印输出文件\r
    "listFiles"\r
:\r
  true// 打印编译的文件(包括引用的声明文件)\r
}\r
\r
// 指定一个匹配列表（属于自动指定该路径下的所有ts相关文件）\r
"include"\r
:\r
[\r
  "src/**/*"\r
],\r
// 指定一个排除列表（include的反向操作）\r
  "exclude"\r
:\r
[\r
  "demo.ts"\r
],\r
// 指定哪些文件使用该配置（属于手动一个个指定文件）\r
  "files"\r
:\r
[\r
  "demo.ts"\r
]\r
\`\`\`\r
\r
&nbsp;介绍几个常用的\r
\r
-\r
\r
include - 指定编译文件默认是编译当前目录下所有的ts文件\r
\r
-\r
\r
exclude - 指定排除的文件\r
\r
-\r
\r
target - 指定编译js 的版本例如es5&nbsp; es6\r
\r
-\r
\r
allowJS - 是否允许编译js文件\r
\r
-\r
\r
removeComments - 是否在编译过程中删除文件中的注释\r
\r
-\r
\r
rootDir - 编译文件的目录\r
\r
-\r
\r
outDir - 输出的目录\r
\r
-\r
\r
sourceMap - 代码源文件\r
\r
-\r
\r
strict - 严格模式\r
\r
-\r
\r
module - 默认common.js&nbsp; 可选es6模式 amd&nbsp; umd 等\r
`,Nr=`---\r
title: TS高级类型\r
cover: cover1.jpg\r
date: 2023-10-09 17:40\r
category: 前端\r
tags:\r
  - typescript\r
  - 教程\r
---\r
\r
## 一、高级类型\r
\r
### 交叉类型(&)\r
\r
交叉类型是将多个类型合并为一个类型。 这让我们可以把现有的多种类型叠加到一起成为一种类型，它包含了所需的所有类型的特性。\r
\r
- 语法： \`T & U\`\r
\r
  > 其返回类型既要符合 \`T\` 类型也要符合 \`U\` 类型\r
\r
- 用法：假设有两个接口：一个是 \`Ant\` 蚂蚁接口，一个是 \`Fly\` 飞翔接口，现在有一只会飞的蚂蚁：\r
\r
\`\`\`typescript\r
interface Ant {\r
  name: string;\r
  weight: number;\r
}\r
\r
interface Fly {\r
  flyHeight: number;\r
  speed: number;\r
}\r
\r
// 少了任何一个属性都会报错\r
const flyAnt: Ant & Fly = {\r
  name: '蚂蚁呀嘿',\r
  weight: 0.2,\r
  flyHeight: 20,\r
  speed: 1,\r
};\r
\`\`\`\r
\r
### 联合类型(|)\r
\r
联合类型与交叉类型很有关联，但是使用上却完全不同。\r
\r
- 语法： \`T | U\`\r
\r
  > 其返回类型为连接的多个类型中的任意一个\r
\r
- 用法：假设声明一个数据，既可以是 \`string\` 类型，也可以是 \`number\` 类型\r
\r
\`\`\`typescript\r
let stringOrNumber： string | number = 0\r
\r
stringOrNumber = ''\r
\`\`\`\r
\r
再看下面这个例子，\`start\` 函数的参数类型既是 \`Bird | Fish\`，那么在 \`start\` 函数中，想要直接调用的话，只能调用 \`Bird\`\r
和 \`Fish\` 都具备的方法，否则编译会报错\r
\r
\`\`\`typescript\r
class Bird {\r
  fly() {\r
    console.log('Bird flying');\r
  }\r
\r
  layEggs() {\r
    console.log('Bird layEggs');\r
  }\r
}\r
\r
class Fish {\r
  swim() {\r
    console.log('Fish swimming');\r
  }\r
\r
  layEggs() {\r
    console.log('Fish layEggs');\r
  }\r
}\r
\r
const bird = new Bird();\r
const fish = new Fish();\r
\r
function start(pet: Bird | Fish) {\r
  // 调用 layEggs 没问题，因为 Bird 或者 Fish 都有 layEggs 方法\r
  pet.layEggs();\r
\r
  // 会报错：Property 'fly' does not exist on type 'Bird | Fish'\r
  // pet.fly();\r
\r
  // 会报错：Property 'swim' does not exist on type 'Bird | Fish'\r
  // pet.swim();\r
}\r
\r
start(bird);\r
\r
start(fish);\r
\`\`\`\r
\r
## 二、关键字\r
\r
### 类型约束(extends)\r
\r
语法：\`T extends K\`\r
\r
> 这里的 extends 不是类、接口的继承，而是对于类型的判断和约束，意思是判断 T 能否赋值给 K\r
\r
可以在泛型中对传入的类型进行约束\r
\r
\`\`\`typescript\r
const copy = (value: string | number): string | number => value\r
\r
// 只能传入 string 或者 number\r
copy(10)\r
\r
// 会报错：Argument of type 'boolean' is not assignable to parameter of type 'string | number'\r
// copy(false)\r
\r
也可以判断\r
T\r
是否可以赋值给\r
U，可以的话返回\r
T，否则返回\r
never\r
\r
type Exclude<T, U> = T extends U ? T : never;\r
\`\`\`\r
\r
### 类型映射(in)\r
\r
会遍历指定接口的 key 或者是遍历联合类型\r
\r
\`\`\`typescript\r
interface Person {\r
  name: string\r
  age: number\r
  gender: number\r
}\r
\r
// 将 T 的所有属性转换为只读类型\r
type ReadOnlyType<T> = {\r
  readonly [P in keyof T]: T[P]\r
}\r
\r
// type ReadOnlyPerson = {\r
// readonly name: Person;\r
// readonly age: Person;\r
// readonly gender: Person;\r
// }\r
type ReadOnlyPerson = ReadOnlyType<Person>\r
\`\`\`\r
\r
### 类型谓词(is)\r
\r
- 语法：\`parameterName is Type\`\r
\r
  > \`parameterName\` 必须是来自于当前函数签名里的一个参数名，判断 parameterName 是否是 Type 类型。\r
\r
具体的应用场景可以跟着下面的代码思路进行使用：\r
\r
看完联合类型的例子后，可能会考虑：如果想要在 \`start\` 函数中，根据情况去调用 \`Bird\` 的 \`fly\` 方法和 \`Fish\` 的 \`swim\`\r
方法，该如何操作呢？\r
\r
首先想到的可能是直接检查成员是否存在，然后进行调用：\r
\r
\`\`\`typescript\r
function start(pet: Bird | Fish) {\r
  // 调用 layEggs 没问题，因为 Bird 或者 Fish 都有 layEggs 方法\r
  pet.layEggs();\r
\r
  if ((pet as Bird).fly) {\r
    (pet as Bird).fly();\r
  } else if ((pet as Fish).swim) {\r
    (pet as Fish).swim();\r
  }\r
}\r
\`\`\`\r
\r
但是这样做，判断以及调用的时候都要进行类型转换，未免有些麻烦，可能会想到写个工具函数判断下：\r
\r
\`\`\`typescript\r
function isBird(bird: Bird | Fish): boolean {\r
  return !!(bird as Bird).fly;\r
}\r
\r
function isFish(fish: Bird | Fish): boolean {\r
  return !!(fish as Fish).swim;\r
}\r
\r
function start(pet: Bird | Fish) {\r
  // 调用 layEggs 没问题，因为 Bird 或者 Fish 都有 layEggs 方法\r
  pet.layEggs();\r
\r
  if (isBird(pet)) {\r
    (pet as Bird).fly();\r
  } else if (isFish(pet)) {\r
    (pet as Fish).swim();\r
  }\r
}\r
\`\`\`\r
\r
看起来简洁了一点，但是调用方法的时候，还是要进行类型转换才可以，否则还是会报错，那有什么好的办法，能让我们判断完类型之后，就可以直接调用方法，不用再进行类型转换呢？\r
\r
OK，肯定是有的，类型谓词 \`is\` 就派上用场了\r
\r
- 用法：\r
\r
\`\`\`typescript\r
function isBird(bird: Bird | Fish): bird is Bird {\r
  return !!(bird as Bird).fly\r
}\r
\r
function start(pet: Bird | Fish) {\r
// 调用 layEggs 没问题，因为 Bird 或者 Fish 都有 layEggs 方法\r
  pet.layEggs();\r
\r
  if (isBird(pet)) {\r
    pet.fly();\r
  } else {\r
    pet.swim();\r
  }\r
\r
};\r
\`\`\`\r
\r
每当使用一些变量调用 \`isFish\` 时，\`TypeScript\` 会将变量缩减为那个具体的类型，只要这个类型与变量的原始类型是兼容的。\r
\r
> TypeScript 不仅知道在 if 分支里 pet 是 Fish 类型； 它还清楚在 else 分支里，一定不是 Fish 类型，一定是 Bird 类型\r
\r
### 待推断类型(infer)\r
\r
可以用 \`infer P\` 来标记一个泛型，表示这个泛型是一个待推断的类型，并且可以直接使用\r
\r
比如下面这个获取函数参数类型的例子：\r
\r
\`\`\`typescript\r
type ParamType<T> = T extends (param: infer P) => any ? P : T;\r
\r
type FunctionType = (value: number) => boolean\r
\r
type Param = ParamType<FunctionType>; // type Param = number\r
\r
type OtherParam = ParamType<symbol>; // type Param = symbol\r
\`\`\`\r
\r
判断 T 是否能赋值给 \`(param: infer P) => any\`，并且将参数推断为泛型 P，如果可以赋值，则返回参数类型 P，否则返回传入的类型\r
\r
再来一个获取函数返回类型的例子：\r
\r
\`\`\`typescript\r
type ReturnValueType<T> = T extends (param: any) => infer U ? U : T;\r
\r
type FunctionType = (value: number) => boolean\r
\r
type Return = ReturnValueType<FunctionType>; // type Return = boolean\r
\r
type OtherReturn = ReturnValueType<number>; // type OtherReturn = number\r
\`\`\`\r
\r
判断 T 是否能赋值给 \`(param: any) => infer U\`，并且将返回值类型推断为泛型 U，如果可以赋值，则返回返回值类型 P，否则返回传入的类型\r
\r
### 原始类型保护(typeof)\r
\r
- 语法：\`typeof v === "typename"\` 或 \`typeof v !== "typename"\`\r
\r
> 用来判断数据的类型是否是某个原始类型（\`number\`、\`string\`、\`boolean\`、\`symbol\`）并进行类型保护\r
\r
> "typename"必须是 "number"， "string"， "boolean"或 "symbol"。 但是 TypeScript 并不会阻止你与其它字符串比较，语言不会把那些表达式识别为类型保护。\r
\r
看下面这个例子， \`print\` 函数会根据参数类型打印不同的结果，那如何判断参数是 \`string\` 还是 \`number\` 呢？\r
\r
\`\`\`typescript\r
function print(value: number | string) {\r
  // 如果是 string 类型\r
  // console.log(value.split('').join(', '))\r
\r
  // 如果是 number 类型\r
  // console.log(value.toFixed(2))\r
}\r
\`\`\`\r
\r
有两种常用的判断方式：\r
\r
1. 根据是否包含 \`split\` 属性判断是 \`string\` 类型，是否包含 \`toFixed\` 方法判断是 \`number\` 类型\r
\r
   > 弊端：不论是判断还是调用都要进行类型转换\r
\r
2. 使用类型谓词 \`is\`\r
\r
   > 弊端：每次都要去写一个工具函数，太麻烦了\r
\r
- 用法：这就到了 \`typeof\` 一展身手的时候了\r
\r
\`\`\`typescript\r
function print(value: number | string) {\r
  if (typeof value === 'string') {\r
    console.log(value.split('').join(', '))\r
  } else {\r
    console.log(value.toFixed(2))\r
  }\r
}\r
\`\`\`\r
\r
> 使用 typeof 进行类型判断后，TypeScript 会将变量缩减为那个具体的类型，只要这个类型与变量的原始类型是兼容的。\r
\r
### 类型保护(instanceof)\r
\r
与 \`typeof\` 类似，不过作用方式不同，\`instanceof\` 类型保护是通过构造函数来细化类型的一种方式。\r
\r
\`instanceof\` 的右侧要求是一个构造函数，\`TypeScript\` 将细化为：\r
\r
- 此构造函数的 \`prototype\` 属性的类型，如果它的类型不为 \`any\` 的话\r
- 构造签名所返回的类型的联合\r
\r
还是以 _类型谓词 is_ 示例中的代码做演示：\r
\r
最初代码：\r
\r
\`\`\`typescript\r
function start(pet: Bird | Fish) {\r
  // 调用 layEggs 没问题，因为 Bird 或者 Fish 都有 layEggs 方法\r
  pet.layEggs();\r
\r
  if ((pet as Bird).fly) {\r
    (pet as Bird).fly();\r
  } else if ((pet as Fish).swim) {\r
    (pet as Fish).swim();\r
  }\r
}\r
\`\`\`\r
\r
使用 \`instanceof\` 后的代码：\r
\r
\`\`\`typescript\r
function start(pet: Bird | Fish) {\r
  // 调用 layEggs 没问题，因为 Bird 或者 Fish 都有 layEggs 方法\r
  pet.layEggs();\r
\r
  if (pet instanceof Bird) {\r
    pet.fly();\r
  } else {\r
    pet.swim();\r
  }\r
}\r
\`\`\`\r
\r
可以达到相同的效果\r
\r
### 索引类型查询操作符(keyof)\r
\r
- 语法：\`keyof T\`\r
\r
> 对于任何类型 \`T\`， \`keyof T\` 的结果为 \`T\` 上已知的 **公共属性名** 的 **联合**\r
\r
\`\`\`typescript\r
interface Person {\r
  name: string;\r
  age: number;\r
}\r
\r
type PersonProps = keyof Person; // 'name' | 'age'\r
\`\`\`\r
\r
这里，\`keyof Person\` 返回的类型和 'name' | 'age' 联合类型是一样，完全可以互相替换\r
\r
- 用法：\`keyof\` 只能返回类型上已知的 **公共属性名**\r
\r
\`\`\`typescript\r
class Animal {\r
  type: string;\r
  weight: number;\r
  private speed: number;\r
}\r
\r
type AnimalProps = keyof Animal; // "type" | "weight"\r
\`\`\`\r
\r
例如我们经常会获取对象的某个属性值，但是不确定是哪个属性，这个时候可以使用 \`extends\` 配合 \`typeof\`\r
对属性名进行限制，限制传入的参数只能是对象的属性名\r
\r
\`\`\`typescript\r
const person = {\r
  name: 'Jack',\r
  age: 20\r
}\r
\r
function getPersonValue<T extends keyof typeof person>(fieldName: keyof typeof person) {\r
  return person[fieldName]\r
}\r
\r
const nameValue = getPersonValue('name')\r
const ageValue = getPersonValue('age')\r
\r
// 会报错：Argument of type '"gender"' is not assignable to parameter of type '"name" | "age"'\r
// getPersonValue('gender')\r
\`\`\`\r
\r
### 索引访问操作符(T[K])\r
\r
- 语法：\`T[K]\`\r
\r
> 类似于 \`js\` 中使用对象索引的方式，只不过 \`js\` 中是返回对象属性的值，而在 \`ts\` 中返回的是 \`T\` 对应属性 P 的类型\r
\r
- 用法：\r
\r
\`\`\`typescript\r
interface Person {\r
  name: string\r
  age: number\r
  weight: number | string\r
  gender: 'man' | 'women'\r
}\r
\r
type NameType = Person['name'] // string\r
\r
type WeightType = Person['weight'] // string | number\r
\r
type GenderType = Person['gender'] // "man" | "women"\r
\`\`\`\r
\r
## 三、映射类型\r
\r
### 只读类型(\`Readonly<T>\`)\r
\r
- 定义：\r
\r
\`\`\`typescript\r
type Readonly<T> = {\r
  readonly [P in keyof T]: T[P];\r
}\r
\`\`\`\r
\r
> 用于将 \`T\` 类型的所有属性设置为只读状态。\r
\r
- 用法：\r
\r
\`\`\`typescript\r
interface Person {\r
  name: string\r
  age: number\r
}\r
\r
const person: Readonly<Person> = {\r
  name: 'Lucy',\r
  age: 22\r
}\r
\r
// 会报错：Cannot assign to 'name' because it is a read-only property\r
person.name = 'Lily'\r
\`\`\`\r
\r
> \`readonly\` 只读， 被 \`readonly\` 标记的属性只能在声明时或类的构造函数中赋值，之后将不可改（即只读属性）\r
\r
### 只读数组(\`ReadonlyArray<T>\`)\r
\r
- 定义：\r
\r
\`\`\`typescript\r
interface ReadonlyArray<T> {\r
  /** Iterator of values in the array. */\r
  [Symbol.iterator](): IterableIterator<T>;\r
\r
  /**\r
   * Returns an iterable of key, value pairs for every entry in the array\r
   */\r
  entries(): IterableIterator<[number, T]>;\r
\r
  /**\r
   * Returns an iterable of keys in the array\r
   */\r
  keys(): IterableIterator<number>;\r
\r
  /**\r
   * Returns an iterable of values in the array\r
   */\r
  values(): IterableIterator<T>;\r
}\r
\`\`\`\r
\r
只能在数组初始化时为变量赋值，之后数组无法修改\r
\r
- 使用：\r
\r
\`\`\`typescript\r
interface Person {\r
  name: string\r
}\r
\r
const personList: ReadonlyArray<Person> = [{ name: 'Jack' }, { name: 'Rose' }]\r
\r
// 会报错：Property 'push' does not exist on type 'readonly Person[]'\r
// personList.push({ name: 'Lucy' })\r
\r
// 但是内部元素如果是引用类型，元素自身是可以进行修改的\r
personList[0].name = 'Lily'\r
\`\`\`\r
\r
### 可选类型(\`Partial<T>\`)\r
\r
用于将 \`T\` 类型的所有属性设置为可选状态，首先通过 \`keyof T\`，取出类型 \`T\` 的所有属性，  \r
然后通过 \`in\` 操作符进行遍历，最后在属性后加上 \`?\`，将属性变为可选属性。\r
\r
- 定义：\r
\r
\`\`\`typescript\r
type Partial<T> = {\r
  [P in keyof T]?: T[P];\r
}\r
\`\`\`\r
\r
- 用法：\r
\r
\`\`\`typescript\r
interface Person {\r
  name: string\r
  age: number\r
}\r
\r
// 会报错：Type '{}' is missing the following properties from type 'Person': name, age\r
// let person: Person = {}\r
\r
// 使用 Partial 映射后返回的新类型，name 和 age 都变成了可选属性\r
let person: Partial<Person> = {}\r
\r
person = { name: 'pengzu', age: 800 }\r
\r
person = { name: 'z' }\r
\r
person = { age: 18 }\r
\`\`\`\r
\r
### 必选类型(\`Required<T>\`)\r
\r
和 \`Partial\` 的作用相反\r
\r
用于将 \`T\` 类型的所有属性设置为必选状态，首先通过 \`keyof T\`，取出类型 \`T\` 的所有属性，  \r
然后通过 \`in\` 操作符进行遍历，最后在属性后的 \`?\` 前加上 \`-\`，将属性变为必选属性。\r
\r
- 定义：\r
\r
\`\`\`typescript\r
type Required<T> = {\r
  [P in keyof T]-?: T[P];\r
}\r
\`\`\`\r
\r
- 使用：\r
\r
\`\`\`typescript\r
interface Person {\r
  name?: string\r
  age?: number\r
}\r
\r
// 使用 Required 映射后返回的新类型，name 和 age 都变成了必选属性\r
// 会报错：Type '{}' is missing the following properties from type 'Required<Person>': name, age\r
let person: Required<Person> = {}\r
\`\`\`\r
\r
### 提取属性(\`Pick<T>\`)\r
\r
- 定义：\r
\r
\`\`\`typescript\r
type Pick<T, K extends keyof T> = {\r
  [P in K]: T[P];\r
}\r
\`\`\`\r
\r
> 从 \`T\` 类型中提取部分属性，作为新的返回类型。\r
\r
- 使用：比如我们在发送网络请求时，只需要传递类型中的部分属性，就可以通过 \`Pick\` 来实现。\r
\r
\`\`\`typescript\r
interface Goods {\r
  type: string\r
  goodsName: string\r
  price: number\r
}\r
\r
// 作为网络请求参数，只需要 goodsName 和 price 就可以\r
type RequestGoodsParams = Pick<Goods, 'goodsName' | 'price'>\r
// 返回类型：\r
// type RequestGoodsParams = {\r
// goodsName: string;\r
// price: number;\r
// }\r
const params: RequestGoodsParams = {\r
  goodsName: '',\r
  price: 10\r
}\r
\`\`\`\r
\r
### 排除属性(\`Omit<T>\`)\r
\r
- 定义：\`type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>\`\r
\r
  > 和 \`Pick\` 作用相反，用于从 \`T\` 类型中，排除部分属性\r
\r
- 用法：比如长方体有长宽高，而正方体长宽高相等，所以只需要长就可以，那么此时就可以用 \`Omit\` 来生成正方体的类型\r
\r
\`\`\`typescript\r
interface Rectangular {\r
  length: number\r
  height: number\r
  width: number\r
}\r
\r
type Square = Omit<Rectangular, 'height' | 'width'>\r
// 返回类型：\r
// type Square = {\r
// 		length: number;\r
// }\r
\r
const temp: Square = { length: 5 }\r
\`\`\`\r
\r
### 摘取类型(\`Extract<T, U>\`)\r
\r
- 语法：\`Extract<T, U>\`\r
\r
  > 提取 \`T\` 中可以 **赋值** 给 \`U\` 的类型\r
\r
- 定义：\`type Extract<T, U> = T extends U ? T : never;\`\r
- 用法：\r
\r
\`\`\`typescript\r
type T01 = Extract<"a" | "b" | "c" | "d", "a" | "c" | "f">; // "a" | "c"\r
\r
type T02 = Extract<string | number | (() => void), Function>; // () => void\r
\`\`\`\r
\r
### 排除类型(\`Exclude<T, U>\`)\r
\r
- 语法：\`Exclude<T, U>\`\r
\r
  > 与 \`Extract\` 用法相反，从 \`T\` 中剔除可以赋值给 \`U\`的类型\r
\r
- 定义：\`type Exclude<T, U> = T extends U ? never : T\`\r
- 用法：\r
\r
\`\`\`typescript\r
type T00 = Exclude<"a" | "b" | "c" | "d", "a" | "c" | "f">; // "b" | "d"\r
\r
type T01 = Exclude<string | number | (() => void), Function>; // string | number\r
\`\`\`\r
\r
### 属性映射(\`Record<K, T>\`)\r
\r
- 定义：\r
\r
\`\`\`typescript\r
type Record<K extends string | number | symbol, T> = {\r
  [P in K]: T;\r
}\r
\`\`\`\r
\r
> 接收两个泛型，\`K\` 必须可以是可以赋值给 \`string | number | symbol\` 的类型，通过 \`in\` 操作符对 \`K\`\r
> 进行遍历，每一个属性的类型都必须是 \`T\` 类型\r
\r
- 用法：比如我们想要将 \`Person\` 类型的数组转化成对象映射，可以使用 \`Record\` 来指定映射对象的类型\r
\r
\`\`\`typescript\r
interface Person {\r
  name: string\r
  age: number\r
}\r
\r
const personList = [\r
  { name: 'Jack', age: 26 },\r
  { name: 'Lucy', age: 22 },\r
  { name: 'Rose', age: 18 },\r
]\r
\r
const personMap: Record<string, Person> = {}\r
\r
personList.map((person) => {\r
  personMap[person.name] = person\r
})\r
\`\`\`\r
\r
比如在传递参数时，希望参数是一个对象，但是不确定具体的类型，就可以使用 \`Record\` 作为参数类型\r
\r
\`\`\`typescript\r
function doSomething(obj: Record<string, any>) {\r
}\r
\`\`\`\r
\r
### 不可为空类型(\`NonNullable<T>\`)\r
\r
- 定义：\`type NonNullable<T> = T extends null | undefined ? never : T\`\r
\r
> 从 T 中剔除 \`null\`、\`undefined\`、\`never\` 类型，不会剔除 \`void\`、\`unknow\` 类型\r
\r
\`\`\`typescript\r
type T01 = NonNullable<string | number | undefined>; // string | number\r
\r
type T02 = NonNullable<(() => string) | string[] | null | undefined>; // (() => string) | string[]\r
\r
type T03 = NonNullable<{ name?: string, age: number } | string[] | null | undefined>; // {name?: string, age: number} | string[]\r
\`\`\`\r
\r
### 构造函数参数类型(\`ConstructorParameters<typeof T>\`)\r
\r
> 返回 class 中构造函数参数类型组成的 **元组类型**\r
\r
- 定义：\r
\r
\`\`\`typescript\r
/** Obtain the parameters of a constructor function type in a tuple */\r
type ConstructorParameters<T extends new (...args: any) => any> = T extends new (...args: infer P) => any ? P : never;\r
\`\`\`\r
\r
- 使用：\r
\r
\`\`\`typescript\r
class Person {\r
  name: string\r
  age: number\r
  weight: number\r
  gender: 'man' | 'women'\r
\r
  constructor(name: string, age: number, gender: 'man' | 'women') {\r
    this.name = name\r
    this.age = age;\r
    this.gender = gender\r
  }\r
}\r
\r
type ConstructorType = ConstructorParameters<typeof Person> // [name: string, age: number, gender: "man" | "women"]\r
\r
const params: ConstructorType = ['Jack', 20, 'man']\r
\`\`\`\r
\r
### 实例类型(\`InstanceType<T>\`)\r
\r
> 获取 class 构造函数的返回类型\r
\r
- 定义：\r
\r
\`\`\`typescript\r
/** Obtain the return type of a constructor function type */\r
type InstanceType<T extends new (...args: any) => any> = T extends new (...args: any) => infer R ? R : any;\r
\`\`\`\r
\r
- 使用：\r
\r
\`\`\`typescript\r
class Person {\r
  name: string\r
  age: number\r
  weight: number\r
  gender: 'man' | 'women'\r
\r
  constructor(name: string, age: number, gender: 'man' | 'women') {\r
    this.name = name\r
    this.age = age;\r
    this.gender = gender\r
  }\r
}\r
\r
type Instance = InstanceType<typeof Person> // Person\r
\r
const params: Instance = {\r
  name: 'Jack',\r
  age: 20,\r
  weight: 120,\r
  gender: 'man'\r
}\r
\`\`\`\r
\r
### 函数参数类型(\`Parameters<T>\`)\r
\r
> 获取函数的参数类型组成的 **元组**\r
\r
- 定义：\r
\r
\`\`\`typescript\r
/** Obtain the parameters of a function type in a tuple */\r
type Parameters<T extends (...args: any) => any> = T extends (...args: infer P) => any ? P : never;\r
\`\`\`\r
\r
- 用法：\r
\r
\`\`\`typescript\r
type FunctionType = (name: string, age: number) => boolean\r
\r
type FunctionParamsType = Parameters<FunctionType> // [name: string, age: number]\r
\r
const params: FunctionParamsType = ['Jack', 20]\r
\`\`\`\r
\r
### 函数返回值类型(\`ReturnType<T>\`)\r
\r
> 获取函数的返回值类型\r
\r
- 定义：\r
\r
\`\`\`typescript\r
/** Obtain the return type of a function type */\r
type ReturnType<T extends (...args: any) => any> = T extends (...args: any) => infer R ? R : any;\r
\`\`\`\r
\r
- 使用：\r
\r
\`\`\`typescript\r
type FunctionType = (name: string, age: number) => boolean | string\r
\r
type FunctionReturnType = ReturnType<FunctionType> // boolean | string\r
\`\`\`\r
\r
## 四、总结\r
\r
- 高级类型\r
\r
  | 用法 | 描述                                                         |\r
    | ---- | ------------------------------------------------------------ |\r
  | &    | 交叉类型，将多个类型合并为一个类型，交集                     |\r
  | \\    | 联合类型，将多个类型组合成一个类型，可以是多个类型的任意一个，并集 |\r
\r
- 关键字\r
\r
  | 用法                    | 描述                                                         |\r
    | :---------------------- | ------------------------------------------------------------ |\r
  | T extends U             | 类型约束，判断 T 是否可以赋值给 U                            |\r
  | P in T                  | 类型映射，遍历 T 的所有类型                                  |\r
  | parameterName is Type   | 类型谓词，判断函数参数 parameterName 是否是 Type 类型        |\r
  | infer P                 | 待推断类型，使用 infer 标记类型 P，就可以使用待推断的类型 P  |\r
  | typeof v === "typename" | 原始类型保护，判断数据的类型是否是某个原始类型（\`number\`、\`string\`、\`boolean\`、\`symbol\`） |\r
  | instanceof v            | 类型保护，判断数据的类型是否是构造函数的 \`prototype\` 属性类型 |\r
  | keyof                   | 索引类型查询操作符，返回类型上已知的 **公共属性名**          |\r
  | T[K]                    | 索引访问操作符，返回 \`T\` 对应属性 P 的类型                   |\r
\r
- 映射类型\r
\r
  | 用法                       | 描述                                |\r
    | -------------------------- | ----------------------------------- |\r
  | Readonly                   | 将 T 中所有属性都变为只读           |\r
  | ReadonlyArray              | 返回一个 T 类型的只读数组           |\r
  | ReadonlyMap<T, U>          | 返回一个 T 和 U 类型组成的只读 Map  |\r
  | Partial                    | 将 T 中所有的属性都变成可选类型     |\r
  | Required                   | 将 T 中所有的属性都变成必选类型     |\r
  | Pick<T, K extends keyof T> | 从 T 中摘取部分属性                 |\r
  | Omit<T, K extends keyof T> | 从 T 中排除部分属性                 |\r
  | Exclude<T, U>              | 从 T 中剔除可以赋值给 U 的类型      |\r
  | Extract<T, U>              | 提取 T 中可以赋值给 U 的类型        |\r
  | Record<K, T>               | 返回属性名为 K，属性值为 T 的类型   |\r
  | NonNullable                | 从 T 中剔除 null 和 undefined       |\r
  | ConstructorParameters      | 获取 T 的构造函数参数类型组成的元组 |\r
  | InstanceType               | 获取 T 的实例类型                   |\r
  | Parameters                 | 获取函数参数类型组成的元组          |\r
  | ReturnType                 | 获取函数返回值类型                  |\r
\r
## 写在后面\r
\r
如果有写的不对或不严谨的地方，欢迎大家能提出宝贵的意见，十分感谢。\r
\r
如果喜欢或者有所帮助，欢迎 Star，对作者也是一种鼓励和支持`,Br=`---\r
title: Vue命名规范\r
date: 2023-10-09 18:07\r
category: 前端\r
tags:\r
  - vue\r
  - 知识\r
---\r
\r
市面上常用的命名规范：\r
\r
- camelCase （小驼峰式命名法–首字母小写）\r
- PascalCase （大驼峰式命名法–首字母大写）\r
- kebab-case（短横线连接式）\r
- Snake（下划线连接式）\r
\r
## 1.1 项目文件命名\r
\r
规则可以快速记忆为“静态文件下划线，编译文件短横线”。\r
\r
### 1.1.1 项目名\r
\r
全部采用小写方式，以短横线分隔。例：my-project-name\r
\r
### 1.1.2 目录名\r
\r
参照项目命名规则，有复数结构时，要采用复数命名法。例：docs、assets、components、directives、mixins、utils、views\r
\r
\`\`\`\r
my-project-name/\r
|- BuildScript    // 流水线部署文件目录\r
|- docs           // 项目的细化文档目录（可选）\r
|- nginx          // 部署在容器上前端项目 nginx 代理文件目录\r
|- node_modules   // 下载的依赖包\r
|- public         // 静态页面目录\r
    |- index.html // 项目入口\r
|- src            // 源码目录\r
    |- api        // http 请求目录\r
    |- assets     // 静态资源目录，这里的资源会被wabpack构建\r
        |- icon   // icon 存放目录\r
        |- img    // 图片存放目录\r
        |- js     // 公共 js 文件目录\r
        |- scss   // 公共样式 scss 存放目录\r
            |- frame.scss   // 入口文件\r
            |- global.scss  // 公共样式\r
            |- reset.scss   // 重置样式\r
    |- components     // 组件\r
    |- plugins        // 插件\r
    |- router         // 路由\r
    |- routes         // 详细的路由拆分目录（可选）\r
        |- index.js\r
    |- store          // 全局状态管理\r
    |- utils          // 工具存放目录\r
        |- request.js // 公共请求工具\r
    |- views          // 页面存放目录\r
    |- App.vue        // 根组件\r
    |- main.js        // 入口文件\r
    |- tests          // 测试用例\r
    |- .browserslistrc// 浏览器兼容配置文件\r
    |- .editorconfig  // 编辑器配置文件\r
    |- .eslintignore  // eslint 忽略规则\r
    |- .eslintrc.js   // eslint 规则\r
    |- .gitignore     // git 忽略规则\r
    |- babel.config.js // babel 规则\r
    |- Dockerfile // Docker 部署文件\r
    |- jest.config.js\r
    |- package-lock.json\r
    |- package.json // 依赖\r
    |- README.md // 项目 README\r
    |- vue.config.js // webpack 配置\r
\`\`\`\r
\r
### 1.1.3 图像文件名\r
\r
全部采用小写方式， 优先选择单个单词命名，多个单词命名以**下划线**分隔。\r
\r
\`\`\`\r
banner_sina.gif\r
menu_aboutus.gif\r
menutitle_news.gif\r
logo_police.gif\r
logo_national.gif\r
pic_people.jpg\r
pic_TV.jpg\r
\`\`\`\r
\r
### 1.1.4 HTML 文件名\r
\r
全部采用小写方式， 优先选择单个单词命名，多个单词命名以**下划线**分隔。\r
\r
\`\`\`\r
|- error_report.html\r
|- success_report.html\r
\`\`\`\r
\r
### 1.1.5 CSS 文件名\r
\r
全部采用小写方式， 优先选择单个单词命名，多个单词命名以短横线分隔。\r
\r
\`\`\`\r
|- normalize.less\r
|- base.less\r
|- date-picker.scss\r
|- input-number.scss\r
\`\`\`\r
\r
### 1.1.6 JavaScript 文件名\r
\r
全部采用小写方式， 优先选择单个单词命名，多个单词命名以**短横线**分隔。\r
\r
\`\`\`\r
|- index.js\r
|- plugin.js\r
|- util.js\r
|- date-util.js\r
|- account-model.js\r
|- collapse-transition.js\r
\`\`\`\r
\r
上述规则可以快速记忆为“静态文件下划线，编译文件短横线”。\r
\r
## 1.2 Vue 组件命名\r
\r
### 1.2.1 单文件组件名\r
\r
文件扩展名为.vue的single-file components(单文件组件)。单文件组件名应该始终是**单词大写开头** (PascalCase)。\r
\r
\`\`\`\r
components/\r
|- MyComponent.vue\r
\`\`\`\r
\r
### 1.2.2 单例组件名\r
\r
只拥有单个活跃实例的组件应该以 The 前缀命名，以示其唯一性。\r
\r
这不意味着组件只可用于一个单页面，而是_每个页面_只使用一次。这些组件永远不接受任何 prop，因为它们是为你的应用定制的。如果你发现有必要添加\r
prop，那就表明这实际上是一个可复用的组件，_只是目前_在每个页面里只使用一次。\r
\r
比如，头部和侧边栏组件几乎在每个页面都会使用，不接受 prop，该组件是专门为该应用所定制的。\r
\r
\`\`\`\r
components/\r
|- TheHeading.vue\r
|- TheSidebar.vue\r
\`\`\`\r
\r
### 1.2.3 基础组件名\r
\r
> 基础组件：不包含业务，独立、具体功能的基础组件，比如日期选择器、模态框等。这类组件作为项目的基础控件，会被大量使用，因此组件的\r
> API 进行过高强度的抽象，可以通过不同配置实现不同的功能。\r
\r
应用特定样式和约定的基础组件(也就是展示类的、无逻辑的或无状态、不掺杂业务逻辑的组件) 应该全部以一个特定的前缀开头 —— Base。\r
\r
基础组件在一个页面内可使用多次，在不同页面内也可复用，是高可复用组件。\r
\r
\`\`\`\r
components/\r
|- BaseButton.vue\r
|- BaseTable.vue\r
|- BaseIcon.vue\r
\`\`\`\r
\r
### 1.2.4 业务组件\r
\r
>\r
业务组件：它不像基础组件只包含某个功能，而是在业务中被多个页面复用的（具有可复用性），它与基础组件的区别是，业务组件只在当前项目中会用到，不具有通用性，而且会包含一些业务，比如数据请求；而基础组件不含业务，在任何项目中都可以使用，功能单一，比如一个具有数据校验功能的输入框。\r
\r
掺杂了复杂业务的组件（拥有自身 data、prop 的相关处理）即业务组件应该以 Custom 前缀命名。\r
\r
业务组件在一个页面内比如：某个页面内有一个卡片列表，而样式和逻辑跟业务紧密相关的卡片就是业务组件。\r
\r
\`\`\`\r
components/\r
|- CustomCard.vue\r
\`\`\`\r
\r
### 1.2.5 紧密耦合的组件名\r
\r
**和父组件紧密耦合的子组件应该以父组件名作为前缀命名。** 因为编辑器通常会按字母顺序组织文件，所以这样做可以把相关联的文件排在一起。\r
\r
\`\`\`\r
components/\r
|- TodoList.vue\r
|- TodoListItem.vue\r
|- TodoListItemButton.vue\r
\`\`\`\r
\r
### 1.2.6 组件名中单词顺序\r
\r
**组件名应该以高级别的 (通常是一般化描述的) 单词开头，以描述性的修饰词结尾。**\r
\r
因为编辑器通常会按字母顺序组织文件，所以现在组件之间的重要关系一目了然。如下组件主要是用于搜索和设置功能。\r
\r
\`\`\`\r
components/\r
|- SearchButtonClear.vue\r
|- SearchButtonRun.vue\r
|- SearchInputQuery.vue\r
|- SearchInputExcludeGlob.vue\r
|- SettingsCheckboxTerms.vue\r
|- SettingsCheckboxLaunchOnStartup.vue\r
\`\`\`\r
\r
还有另一种多级目录的方式，把所有的搜索组件放到“search”目录，把所有的设置组件放到“settings”目录。我们只推荐在非常大型 (如有\r
100+ 个组件) 的应用下才考虑这么做，因为在多级目录间找来找去，要比在单个 components 目录下滚动查找要花费更多的精力。\r
\r
### 1.2.7 完整单词的组件名\r
\r
**组件名应该倾向于完整得单词而不是缩写。**\r
\r
编辑器中的自动补全已经让书写长命名的代价非常之低了，而其带来的明确性却是非常宝贵的。不常用的缩写尤其应该避免。\r
\r
\`\`\`\r
components/\r
|- StudentDashboardSettings.vue\r
|- UserProfileOptions.vue\r
\`\`\`\r
\r
## 1.3 代码参数命名\r
\r
### 1.3.1 name\r
\r
**组件名应该始终是多个单词，应该始终是 PascalCase 的。** 根组件 App 以及 、 之类的 Vue 内置组件除外。这样做可以避免跟现有的以及未来的\r
HTML 元素相冲突，因为所有的 HTML 元素名称都是单个单词的。\r
\r
\`\`\`\r
export default {\r
   \r
  name: 'ToDoList',\r
  // ...\r
}\r
\`\`\`\r
\r
### 1.3.2 prop\r
\r
**在声明 prop 的时候，其命名应该始终使用 camelCase，而在模板和 JSX 中应该始终使用 kebab-case。**\r
\r
我们单纯的遵循每个语言的约定，在 JavaScript 中更自然的是 camelCase。而在 HTML 中则是 kebab-case。\r
\r
\`\`\`\r
<WelcomeMessage greeting-text="hi"/>\r
\`\`\`\r
\r
\`\`\`\r
export default {\r
   \r
  name: 'MyComponent',\r
  // ...\r
  props: {\r
   \r
    greetingText: {\r
   \r
      type: String,\r
      required: true,\r
      validator: function (value) {\r
   \r
        return ['syncing', 'synced',].indexOf(value) !== -1\r
      }\r
    }\r
  }\r
}\r
\`\`\`\r
\r
### 1.3.3 router\r
\r
**Vue Router Path 命名采用 kebab-case 格式。** 用 Snake（如：/user_info）或 camelCase（如：/userInfo)的单词会被当成一个单词，搜索引擎无法区分语义。\r
\r
\`\`\`\r
// bad\r
{\r
   \r
  path: '/user_info', // user_info 当成一个单词\r
  name: 'UserInfo',\r
  component: UserInfo,\r
  meta: {\r
   \r
    title: ' - 用户',\r
    desc: ''\r
  }\r
},\r
\r
// good\r
{\r
   \r
  path: '/user-info', // 能解析成 user info\r
  name: 'UserInfo',\r
  component: UserInfo,\r
  meta: {\r
   \r
    title: ' - 用户',\r
    desc: ''\r
  }\r
},\r
\`\`\`\r
\r
### 1.3.4 模板中组件\r
\r
**对于绝大多数项目来说，在单文件组件和字符串模板中组件名应该总是 PascalCase 的，但是在 DOM 模板中总是 kebab-case 的。**\r
\r
\`\`\`\r
<!-- 在单文件组件和字符串模板中 --> \r
<MyComponent/>\r
\r
<!-- 在 DOM 模板中 --> \r
<my-component></my-component>\r
\`\`\`\r
\r
### 1.3.5 自闭合组件\r
\r
**在单文件组件、字符串模板和 JSX 中没有内容的组件应该是自闭合的——但在 DOM 模板里永远不要这样做。**\r
\r
\`\`\`\r
<!-- 在单文件组件和字符串模板中 -->\r
<MyComponent/>\r
\r
<!-- 在所有地方 -->\r
<my-component></my-component>\r
\`\`\`\r
\r
### 1.3.6 变量\r
\r
- 命名方法：camelCase\r
- 命名规范：类型 + 对象描述或属性的方式\r
\r
\`\`\`\r
// bad\r
var getTitle = "LoginTable"\r
\r
// good\r
let tableTitle = "LoginTable"\r
let mySchool = "我的学校"\r
\`\`\`\r
\r
### 1.3.7 常量\r
\r
- 命名方法：全部大写下划线分割\r
- 命名规范：使用大写字母和下划线来组合命名，下划线用以分割单词\r
\r
\`\`\`\r
const MAX_COUNT = 10\r
const URL = 'http://test.host.com'\r
\`\`\`\r
\r
### 1.3.8 方法\r
\r
- 命名方法：camelCase\r
- 命名规范：统一使用动词或者动词 + 名词形式\r
\r
\`\`\`\r
// 1、普通情况下，使用动词 + 名词形式\r
// bad\r
go、nextPage、show、open、login\r
\r
// good\r
jumpPage、openCarInfoDialog\r
\r
// 2、请求数据方法，以 data 结尾\r
// bad\r
takeData、confirmData、getList、postForm\r
\r
// good\r
getListData、postFormData\r
\r
// 3、单个动词的情况\r
init、refresh\r
\`\`\`\r
\r
### 1.3.9 自定义事件\r
\r
**自定义事件应始终使用 kebab-case 的事件名。**\r
\r
不同于组件和 prop，事件名不存在任何自动化的大小写转换。而是触发的事件名需要完全匹配监听这个事件所用的名称。\r
\r
\`\`\`\r
this.$emit('my-event')\r
\`\`\`\r
\r
\`\`\`\r
<MyComponent @my-event="handleDoSomething" />\r
\`\`\`\r
\r
不同于组件和 prop，事件名不会被用作一个 JavaScript 变量名或 property 名，所以就没有理由使用 camelCase 或 PascalCase 了。并且\r
v-on 事件监听器在 DOM 模板中会被自动转换为全小写 (因为 HTML 是大小写不敏感的)，所以 v-on:myEvent 将会变成 v-on:\r
myevent——导致 myEvent 不可能被监听到。\r
\r
- 原生事件参考列表[1] 由原生事件可以发现其使用方式如下：\r
\r
\`\`\`\r
<div\r
  @blur="toggleHeaderFocus"\r
  @focus="toggleHeaderFocus"\r
  @click="toggleMenu"\r
  @keydown.esc="handleKeydown"\r
  @keydown.enter="handleKeydown"\r
  @keydown.up.prevent="handleKeydown"\r
  @keydown.down.prevent="handleKeydown"\r
  @keydown.tab="handleKeydown"\r
  @keydown.delete="handleKeydown"\r
  @mouseenter="hasMouseHoverHead = true"\r
  @mouseleave="hasMouseHoverHead = false">\r
</div>\r
\`\`\`\r
\r
而为了区分_原生事件_和_自定义事件_在 Vue 中的使用，建议除了多单词事件名使用 kebab-case 的情况下，命名还需遵守为 on + 动词\r
的形式，如下：\r
\r
\`\`\`\r
<!-- 父组件 -->\r
<div\r
  @on-search="handleSearch"\r
  @on-clear="handleClear"\r
  @on-clickoutside="handleClickOutside">\r
</div>\r
\`\`\`\r
\r
\`\`\`\r
// 子组件\r
export default {\r
  methods: {\r
    handleTriggerItem () {\r
      this.$emit('on-clear')\r
    }\r
  }\r
}\r
\`\`\`\r
\r
### 1.3.10 事件方法\r
\r
命名方法：camelCase 命名规范：handle + 名称（可选）+ 动词\r
\r
\`\`\`\r
<template>\r
  <div\r
    @click.native.stop="handleItemClick()"\r
    @mouseenter.native.stop="handleItemHover()">\r
  </div>\r
</template>\r
\r
<script>\r
\r
export default {\r
     \r
  methods: {\r
     \r
    handleItemClick () {\r
     \r
      //...\r
    },\r
    handleItemHover () {\r
     \r
      //...\r
    }\r
  }\r
}\r
<\/script>\r
\`\`\`\r
\r
## 2.1 Vue\r
\r
### 2.1.1 代码结构\r
\r
\`\`\`\r
<template>\r
  <div id="my-component">\r
    <DemoComponent />\r
  </div>\r
</template>\r
\r
<script>\r
import DemoComponent from '../components/DemoComponent'\r
\r
export default {\r
     \r
  name: 'MyComponent',\r
  components: {\r
     \r
    DemoComponent\r
  },\r
  mixins: [],\r
  props: {\r
     },\r
  data () {\r
     \r
    return {\r
     }\r
  },\r
  computed: {\r
     },\r
  watch: {\r
     }\r
  created () {\r
     },\r
  mounted () {\r
     },\r
  destroyed () {\r
     },\r
  methods: {\r
     },\r
}\r
<\/script>\r
\r
<style lang="scss" scoped>\r
#my-component {\r
     \r
}\r
</style>\r
\`\`\`\r
\r
### 2.1.2 data\r
\r
组件的 data 必须是一个函数。\r
\r
\`\`\`\r
// In a .vue file\r
export default {\r
   \r
  data () {\r
   \r
    return {\r
   \r
      foo: 'bar'\r
    }\r
  }\r
}\r
\`\`\`\r
\r
### 2.1.3 prop\r
\r
Prop 定义应该尽量详细。\r
\r
\`\`\`\r
export default {\r
   \r
  props: {\r
   \r
    status: {\r
   \r
      type: String,\r
      required: true,\r
      validator: function (value) {\r
   \r
        return [\r
          'syncing', \r
          'synced',\r
          'version-conflict',\r
          'error'\r
        ].indexOf(value) !== -1\r
      }\r
    }\r
  }\r
}\r
\`\`\`\r
\r
### 2.1.4 computed\r
\r
**应该把复杂计算属性分割为尽可能多的更简单的属性。**\r
\r
小的、专注的计算属性减少了信息使用时的假设性限制，所以需求变更时也用不着那么多重构了。\r
\r
\`\`\`\r
// bad\r
computed: {\r
    \r
  price: function () {\r
    \r
    var basePrice = this.manufactureCost / (1 - this.profitMargin) \r
    return ( \r
      basePrice - \r
      basePrice * (this.discountPercent || 0) \r
    ) \r
  } \r
}\r
\r
// good\r
computed: {\r
   \r
  basePrice: function () {\r
   \r
    return this.manufactureCost / (1 - this.profitMargin)\r
  },\r
  discount: function () {\r
   \r
    return this.basePrice * (this.discountPercent || 0)\r
  },\r
  finalPrice: function () {\r
   \r
    return this.basePrice - this.discount\r
  }\r
}\r
\`\`\`\r
\r
### 2.1.5 为 v-for 设置键值\r
\r
在组件上必须用 key 搭配 v-for，以便维护内部组件及其子树的状态。甚至在元素上维护可预测的行为，比如动画中的对象固化 (object\r
constancy)[2]。\r
\r
\`\`\`\r
<ul>\r
  <li\r
    v-for="todo in todos"\r
    :key="todo.id">\r
      {\r
  { todo.text }}\r
  </li>\r
</ul>\r
\`\`\`\r
\r
### 2.1.6 v-if 和 v-for 互斥\r
\r
永远不要把 v-if 和 v-for 同时用在同一个元素上。\r
\r
\`\`\`\r
<!-- bad：控制台报错 -->\r
<ul>\r
  <li\r
    v-for="user in users"\r
    v-if="shouldShowUsers"\r
    :key="user.id">\r
      {\r
  { user.name }}\r
  </li>\r
</ul>\r
\`\`\`\r
\r
一般我们在两种常见的情况下会倾向于这样做：\r
\r
- 为了过滤一个列表中的项目 (比如 v-for=“user in users” v-if=“user.isActive”)。在这种情形下，请将 users\r
  替换为一个计算属性 (比如 activeUsers)，让其返回过滤后的列表。\r
\r
\`\`\`\r
computed: {\r
   \r
  activeUsers: function () {\r
   \r
    return this.users.filter((user) => {\r
   \r
      return user.isActive\r
    })\r
  }\r
}\r
\`\`\`\r
\r
\`\`\`\r
<ul>\r
  <li\r
    v-for="user in activeUsers"\r
    :key="user.id">\r
      {\r
  { user.name }}\r
  </li>\r
</ul>\r
\`\`\`\r
\r
- 为了避免渲染本应该被隐藏的列表 (比如 v-for=“user in users” v-if=“shouldShowUsers”)。这种情形下，请将 v-if\r
  移动至容器元素上 (比如 ul, ol)。\r
\r
\`\`\`\r
<!-- bad -->\r
<ul>\r
  <li\r
    v-for="user in users"\r
    v-if="shouldShowUsers"\r
    :key="user.id">\r
      {\r
  { user.name }}\r
  </li>\r
</ul>\r
\r
<!-- good -->\r
<ul v-if="shouldShowUsers">\r
  <li\r
    v-for="user in users"\r
    :key="user.id">\r
      {\r
  { user.name }}\r
  </li>\r
</ul>\r
\`\`\`\r
\r
### 2.1.7 多个 attribute 的元素\r
\r
多个 attribute 的元素应该分多行撰写，每个 attribute 一行。\r
\r
\`\`\`\r
<!-- bad -->\r
<img src="https://vuejs.org/images/logo.png" alt="Vue Logo">\r
<MyComponent foo="a" bar="b" baz="c"/>\r
\`\`\`\r
\r
\`\`\`\r
<!-- good -->\r
<img\r
  src="https://vuejs.org/images/logo.png"\r
  alt="Vue Logo">\r
\r
<MyComponent\r
  foo="a"\r
  bar="b"\r
  baz="c"/>\r
\`\`\`\r
\r
### 2.1.8 模板中简单的表达式\r
\r
**组件模板应该只包含简单的表达式，复杂的表达式则应该重构为计算属性或方法**\r
\r
复杂表达式会让你的模板变得不那么声明式。我们应该尽量描述应该出现的是什么，而非如何计算那个值。而且计算属性和方法使得代码可以重用。\r
\r
\`\`\`\r
// bad\r
{\r
  {\r
  fullName.split(' ').map((word) => {\r
    return word[0].toUpperCase() + word.slice(1)\r
  }).join(' ')\r
}}\r
\`\`\`\r
\r
更好的做法：\r
\r
\`\`\`\r
<!-- 在模板中 -->\r
{\r
  { normalizedFullName }}\r
\`\`\`\r
\r
\`\`\`\r
// 复杂表达式已经移入一个计算属性\r
computed: {\r
   \r
  normalizedFullName: function () {\r
   \r
    return this.fullName.split(' ').map(function (word) {\r
   \r
      return word[0].toUpperCase() + word.slice(1)\r
    }).join(' ')\r
  }\r
}\r
\`\`\`\r
\r
### 2.1.9 带引号的 attribute 值\r
\r
**非空 HTML 特性值应该始终带双引号。**\r
\r
\`\`\`\r
<!-- bad -->\r
<input type=text>\r
<AppSidebar :style={width:sidebarWidth+'px'}>\r
\`\`\`\r
\r
\`\`\`\r
<!-- good -->\r
<input type="text">\r
<AppSidebar :style="{ width: sidebarWidth + 'px' }">\r
\`\`\`\r
\r
### 2.1.10 指令缩写\r
\r
- 用 : 表示 v-bind:\r
- 用 @ 表示 v-on:\r
- 用 # 表示 v-slot:\r
\r
\`\`\`\r
<input\r
  :value="newTodoText"\r
  :placeholder="newTodoInstructions">\r
\r
<input\r
  @input="onInput"\r
  @focus="onFocus">\r
\r
<template #header>\r
  <h1>Here might be a page title</h1>\r
</template>\r
\r
<template #footer>\r
  <p>Here's some contact info</p>\r
</template>\r
\`\`\`\r
\r
## 2.2 HTML\r
\r
### 2.2.1 文件模板\r
\r
HTML5 文件模板：\r
\r
\`\`\`\r
<!DOCTYPE html>\r
<html lang="zh-CN">\r
  <head>\r
    <meta charset="UTF-8">\r
    <title>HTML5标准模版</title>\r
  </head>\r
  <body>\r
  </body>\r
</html>\r
\`\`\`\r
\r
移动端：\r
\r
\`\`\`\r
<!DOCTYPE html>\r
<html lang="zh-CN">\r
<head>\r
    <meta charset="UTF-8">\r
    <meta name="viewport"\r
        content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, shrink-to-fit=no">\r
    <meta name="format-detection" content="telephone=no">\r
    <title>移动端HTML模版</title>\r
\r
    <!-- S DNS预解析 -->\r
    <link rel="dns-prefetch" href="">\r
    <!-- E DNS预解析 -->\r
\r
    <!-- S 线上样式页面片，开发请直接取消注释引用 -->\r
    <!-- #include virtual="" -->\r
    <!-- E 线上样式页面片 -->\r
\r
    <!-- S 本地调试，根据开发模式选择调试方式，请开发删除 -->\r
    <link rel="stylesheet" href="css/index.css">\r
    <!-- /本地调试方式 -->\r
\r
    <link rel="stylesheet" href="http://srcPath/index.css">\r
    <!-- /开发机调试方式 -->\r
    <!-- E 本地调试 -->\r
\r
</head>\r
<body>\r
</body>\r
</html>\r
\`\`\`\r
\r
PC 端：\r
\r
\`\`\`\r
<!DOCTYPE html>\r
<html lang="zh-CN">\r
<head>\r
    <meta charset="UTF-8">\r
    <meta name="keywords" content="your keywords">\r
    <meta name="description" content="your description">\r
    <meta name="author" content="author,email address">\r
    <meta name="robots" content="index,follow">\r
    <meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1">\r
    <meta name="renderer" content="ie-stand">\r
    <title>PC端HTML模版</title>\r
\r
    <!-- S DNS预解析 -->\r
    <link rel="dns-prefetch" href="">\r
    <!-- E DNS预解析 -->\r
\r
    <!-- S 线上样式页面片，开发请直接取消注释引用 -->\r
    <!-- #include virtual="" -->\r
    <!-- E 线上样式页面片 -->\r
\r
    <!-- S 本地调试，根据开发模式选择调试方式，请开发删除 -->\r
    <link rel="stylesheet" href="css/index.css">\r
    <!-- /本地调试方式 -->\r
\r
    <link rel="stylesheet" href="http://srcPath/index.css">\r
    <!-- /开发机调试方式 -->\r
    <!-- E 本地调试 -->\r
</head>\r
<body>\r
</body>\r
</html>\r
\`\`\`\r
\r
### 2.2.2 元素及标签闭合\r
\r
HTML 元素共有以下5种：\r
\r
- 空元素：area、base、br、col、command、embed、hr、img、input、keygen、link、meta、param、source、track、wbr\r
- 原始文本元素：script、style\r
- RCDATA 元素：textarea、title\r
- 外来元素：来自 MathML 命名空间和 SVG 命名空间的元素\r
- 常规元素：其他 HTML 允许的元素都称为常规元素\r
\r
为了能让浏览器更好的解析代码以及能让代码具有更好的可读性，有如下约定：\r
\r
- 所有具有开始标签和结束标签的元素都要写上起止标签，某些允许省略开始标签或和束标签的元素亦都要写上。\r
- 空元素标签都不加 “/” 字符。\r
\r
\`\`\`\r
<!-- good -->\r
<div>\r
    <h1>我是h1标题</h1>\r
    <p>我是一段文字，我有始有终，浏览器能正确解析</p>\r
</div>\r
 \r
<br data-tomark-pass>\r
\r
<!-- bad -->\r
<div>\r
    <h1>我是h1标题</h1>\r
    <p>我是一段文字，我有始无终，浏览器亦能正确解析\r
</div>\r
\r
<br/>\r
\`\`\`\r
\r
### 2.2.3 代码嵌套\r
\r
元素嵌套规范，每个块状元素独立一行，内联元素可选。\r
\r
\`\`\`\r
<!-- good -->\r
<div>\r
    <h1></h1>\r
    <p></p>\r
</div> \r
<p><span></span><span></span></p>\r
\r
<!-- bad -->\r
<div>\r
    <h1></h1><p></p>\r
</div> \r
<p> \r
    <span></span>\r
    <span></span>\r
</p>\r
\`\`\`\r
\r
段落元素与标题元素只能嵌套内联元素。\r
\r
\`\`\`\r
<!-- good -->\r
<h1><span></span></h1>\r
<p><span></span><span></span></p>\r
\r
<!-- bad -->\r
<h1><div></div></h1>\r
<p><div></div><div></div></p>\r
\`\`\`\r
\r
## 2.3 CSS\r
\r
### 2.3.1 样式文件\r
\r
- 推荐：\r
\r
\`\`\`\r
@charset "UTF-8";\r
.jdc {\r
   }\r
\`\`\`\r
\r
- 不推荐：\r
\r
\`\`\`\r
/* @charset规则不在文件首行首个字符开始 */\r
@charset "UTF-8";\r
.jdc {\r
   }\r
\r
/* @charset规则没有用小写 */\r
@CHARSET "UTF-8";\r
.jdc {\r
   }\r
\r
/* 无@charset规则 */\r
.jdc {\r
   }\r
\`\`\`\r
\r
### 2.3.2 代码格式化\r
\r
样式书写一般有两种：一种是紧凑格式 （Compact），一种是展开格式（Expanded）。\r
\r
- 推荐：展开格式（Expanded）\r
\r
\`\`\`\r
.jdc {\r
   \r
  display: block;\r
  width: 50px;\r
}\r
\`\`\`\r
\r
- 不推荐：紧凑格式 （Compact）\r
\r
\`\`\`\r
.jdc {\r
    display: block; width: 50px;}\r
\`\`\`\r
\r
### 2.3.3 代码大小写\r
\r
样式选择器，属性名，属性值关键字全部使用小写字母书写，属性字符串允许使用大小写。\r
\r
- 推荐：\r
\r
\`\`\`\r
.jdc {\r
   \r
  display: block;\r
}\r
\`\`\`\r
\r
- 不推荐：\r
\r
\`\`\`\r
.JDC {\r
   \r
  DISPLAY: BLOCK;\r
}\r
\`\`\`\r
\r
### 2.3.4 代码易读性\r
\r
1. 左括号与类名之间一个空格，冒号与属性值之间一个空格。\r
\r
- 推荐：\r
\r
\`\`\`\r
.jdc {\r
   \r
  width: 100%;\r
}\r
\`\`\`\r
\r
- 不推荐：\r
\r
\`\`\`\r
.jdc{\r
   \r
  width:100%;\r
}\r
\`\`\`\r
\r
1. 逗号分隔的取值，逗号之后一个空格。\r
\r
- 推荐：\r
\r
\`\`\`\r
.jdc {\r
   \r
  box-shadow: 1px 1px 1px #333, 2px 2px 2px #ccc;\r
}\r
\`\`\`\r
\r
- 不推荐：\r
\r
\`\`\`\r
.jdc {\r
   \r
  box-shadow: 1px 1px 1px #333,2px 2px 2px #ccc;\r
}\r
\`\`\`\r
\r
1. 为单个 CSS 选择器或新声明开启新行。\r
\r
- 推荐：\r
\r
\`\`\`\r
.jdc, .jdc_logo, .jdc_hd {\r
   \r
  color: #ff0;\r
}\r
\r
.nav{\r
   \r
  color: #fff;\r
}\r
\`\`\`\r
\r
- 不推荐：\r
\r
\`\`\`\r
.jdc, .jdc_logo, .jdc_hd {\r
   \r
  color: #ff0;\r
}.nav{\r
   \r
  color: #fff;\r
}\r
\`\`\`\r
\r
1. 颜色值 rgb() rgba() hsl() hsla() rect() 中不需有空格，且取值不要带有不必要的 0。\r
\r
- 推荐：\r
\r
\`\`\`\r
.jdc {\r
   \r
  color: rgba(255,255,255,.5);\r
}\r
\`\`\`\r
\r
- 不推荐：\r
\r
\`\`\`\r
.jdc {\r
   \r
  color: rgba( 255, 255, 255, 0.5 );\r
}\r
\`\`\`\r
\r
1. 属性值十六进制数值能用简写的尽量用简写。\r
\r
- 推荐：\r
\r
\`\`\`\r
.jdc {\r
   \r
  color: #fff;\r
}\r
\`\`\`\r
\r
- 不推荐：\r
\r
\`\`\`\r
.jdc {\r
   \r
  color: #ffffff;\r
}\r
\`\`\`\r
\r
1. 不要为 0 指明单位。\r
\r
- 推荐：\r
\r
\`\`\`\r
.jdc {\r
   \r
  margin: 0 10px;\r
}\r
\`\`\`\r
\r
- 不推荐：\r
\r
\`\`\`\r
.jdc {\r
   \r
  margin: 0px 10px;\r
}\r
\`\`\`\r
\r
### 2.3.5 属性值引号\r
\r
CSS 属性值需要用到引号时，统一使用单引号。\r
\r
- 推荐：\r
\r
\`\`\`\r
.jdc {\r
   \r
  font-family: 'Hiragino Sans GB';\r
}\r
\`\`\`\r
\r
- 不推荐：\r
\r
\`\`\`\r
.jdc {\r
   \r
  font-family: "Hiragino Sans GB";\r
}\r
\`\`\`\r
\r
### 2.3.6 属性书写建议\r
\r
建议遵循以下顺序：\r
\r
1. 局定位属性：display / position / float / clear / visibility / overflow\r
2. 自身属性：width / height / margin / padding / border / background\r
3. 文本属性：color / font / text-decoration / text-align / vertical-align / white- space / break-word\r
4. 其他属性（CSS3）：content / cursor / border-radius / box-shadow / text-shadow / background: linear-gradient …\r
\r
\`\`\`\r
.jdc {\r
   \r
  display: block;\r
  position: relative;\r
  float: left;\r
  width: 100px;\r
  height: 100px;\r
  margin: 0 10px;\r
  padding: 20px 0;\r
  font-family: Arial, 'Helvetica Neue', Helvetica, sans-serif;\r
  color: #333;\r
  background: rgba(0,0,0,.5);\r
  -webkit-border-radius: 10px;\r
  -moz-border-radius: 10px;\r
  -o-border-radius: 10px;\r
  -ms-border-radius: 10px;\r
  border-radius: 10px;\r
}\r
\`\`\`\r
\r
### 3.3.7 CSS3 浏览器私有前缀\r
\r
CSS3 浏览器私有前缀在前，标准前缀在后。\r
\r
\`\`\`\r
.jdc {\r
   \r
  -webkit-border-radius: 10px;\r
  -moz-border-radius: 10px;\r
  -o-border-radius: 10px;\r
  -ms-border-radius: 10px;\r
  border-radius: 10px;\r
}\r
\`\`\`\r
\r
## 2.4 JavaScript\r
\r
### 2.4.1 单行代码块\r
\r
在单行代码块中使用空格。\r
\r
- 不推荐：\r
\r
\`\`\`\r
function foo () {\r
   return true}\r
if (foo) {\r
   bar = 0}\r
\`\`\`\r
\r
- 推荐：\r
\r
\`\`\`\r
function foo () {\r
    return true }\r
if (foo) {\r
    bar = 0 }\r
\`\`\`\r
\r
### 2.4.2 大括号风格\r
\r
在编程过程中，大括号风格与缩进风格紧密联系，用来描述大括号相对代码块位置的方法有很多。在 JavaScript 中，主要有三种风格，如下：\r
\r
- 【推荐】One True Brace Style\r
\r
\`\`\`\r
if (foo) {\r
   \r
  bar()\r
} else {\r
   \r
  baz()\r
}\r
\`\`\`\r
\r
- Stroustrup\r
\r
\`\`\`\r
if (foo) {\r
   \r
  bar()\r
}\r
else {\r
   \r
  baz()\r
}\r
\`\`\`\r
\r
- Allman\r
\r
\`\`\`\r
if (foo)\r
{\r
   \r
  bar()\r
}\r
else\r
{\r
   \r
  baz()\r
}\r
\`\`\`\r
\r
### 2.4.3 代码中的空格\r
\r
1. 逗号前后的空格可以提高代码的可读性，团队约定在逗号后面使用空格，逗号前面不加空格。\r
\r
- 推荐：\r
\r
\`\`\`\r
var foo = 1, bar = 2\r
\`\`\`\r
\r
- 不推荐：\r
\r
\`\`\`\r
var foo = 1,bar = 2\r
\r
var foo = 1 , bar = 2\r
\r
var foo = 1 ,bar = 2\r
\`\`\`\r
\r
1. 对象字面量的键和值之间不能存在空格，且要求对象字面量的冒号和值之间存在一个空格。\r
\r
- 推荐：\r
\r
\`\`\`\r
var obj = {\r
    'foo': 'haha' }\r
\`\`\`\r
\r
- 不推荐：\r
\r
\`\`\`\r
var obj = {\r
    'foo' : 'haha' }\r
\`\`\`\r
\r
1. 代码块前要添加空格。\r
\r
- 推荐：\r
\r
\`\`\`\r
if (a) {\r
   \r
  b()\r
}\r
\r
function a () {\r
   }\r
\`\`\`\r
\r
- 不推荐：\r
\r
\`\`\`\r
if (a){\r
   \r
  b()\r
}\r
\r
function a (){\r
   }\r
\`\`\`\r
\r
1. 函数声明括号前要加空格。\r
\r
- 推荐：\r
\r
\`\`\`\r
function func (x) {\r
   \r
  // ...\r
}\r
\`\`\`\r
\r
- 不推荐：\r
\r
\`\`\`\r
function func(x) {\r
   \r
  // ...\r
}\r
\`\`\`\r
\r
1. 在函数调用时，禁止使用空格。\r
\r
- 推荐：\r
\r
\`\`\`\r
fn()\r
\`\`\`\r
\r
- 不推荐：\r
\r
\`\`\`\r
fn ()\r
\r
fn\r
()\r
\`\`\`\r
\r
1. 在操作符前后都需要添加空格\r
\r
- 推荐：\r
\r
\`\`\`\r
var sum = 1 + 2\r
\`\`\`\r
\r
- 不推荐：\r
\r
\`\`\`\r
var sum = 1+2\r
\`\`\`\r
\r
注释的目的：\r
\r
- 提高代码的可读性，从而提高代码的可维护性 注释的原则：\r
- 如无必要，勿增注释 ( As short as possible )\r
- 如有必要，尽量详尽 ( As long as necessary )\r
\r
## 3.1 HTML 文件注释\r
\r
### 3.1.1 单行注释\r
\r
**一般用于简单的描述，如某些状态描述、属性描述等。**\r
\r
注释内容前后各一个空格字符，注释位于要注释代码的上面，单独占一行。\r
\r
- 推荐：\r
\r
\`\`\`\r
<!-- Comment Text -->\r
<div>...</div>\r
\`\`\`\r
\r
- 不推荐：\r
\r
\`\`\`\r
<div>...</div><!-- Comment Text -->\r
\r
<div><!-- Comment Text -->\r
  ...\r
</div>\r
\`\`\`\r
\r
### 3.1.2 模块注释\r
\r
**一般用于描述模块的名称以及模块开始与结束的位置。**\r
\r
注释内容前后各一个空格字符， 表示模块开始， 表示模块结束，模块与模块之间相隔一行。\r
\r
- 推荐：\r
\r
\`\`\`\r
<!-- S Comment Text A --> \r
<div class="mod_a">\r
  ...\r
</div>\r
<!-- E Comment Text A -->\r
 \r
<!-- S Comment Text B --> \r
<div class="mod_b">\r
  ...\r
</div>\r
<!-- E Comment Text B -->\r
\`\`\`\r
\r
- 不推荐：\r
\r
\`\`\`\r
<!-- S Comment Text A -->\r
<div class="mod_a">\r
  ...\r
</div>\r
<!-- E Comment Text A -->\r
<!-- S Comment Text B --> \r
<div class="mod_b">\r
  ...\r
</div>\r
<!-- E Comment Text B -->\r
\`\`\`\r
\r
### 3.1.3 嵌套模块注释\r
\r
当模块注释内再出现模块注释的时候，为了突出主要模块，嵌套模块不再使用。\r
\r
\`\`\`\r
<!-- S Comment Text -->\r
<!-- E Comment Text -->\r
\`\`\`\r
\r
而改用\r
\r
\`\`\`\r
<!-- /Comment Text -->\r
\`\`\`\r
\r
注释写在模块结尾标签底部，单独一行。\r
\r
\`\`\`\r
<!-- S Comment Text A -->\r
<div class="mod_a">\r
  \r
    <div class="mod_b">\r
        ...\r
    </div>\r
    <!-- /mod_b -->\r
     \r
    <div class="mod_c">\r
     ...\r
    </div>\r
    <!-- /mod_c -->\r
  \r
</div>\r
<!-- E Comment Text A -->\r
\`\`\`\r
\r
## 3.2 CSS 文件注释\r
\r
### 3.2.1 单行注释\r
\r
注释内容第一个字符和最后一个字符都是一个空格字符，单独占一行，行与行之间相隔一行。\r
\r
- 推荐：\r
\r
\`\`\`\r
/* Comment Text */ \r
.jdc {\r
   } \r
\r
/* Comment Text */ \r
.jdc {\r
   }\r
\`\`\`\r
\r
- 不推荐：\r
\r
\`\`\`\r
/*Comment Text*/\r
.jdc {\r
   \r
  display: block;\r
}\r
\r
.jdc {\r
   \r
  display: block;/*Comment Text*/\r
}\r
\`\`\`\r
\r
### 3.2.2 模块注释\r
\r
注释内容第一个字符和最后一个字符都是一个空格字符，/* 与 模块信息描述占一行，多个横线分隔符 - 与 */ 占一行，行与行之间相隔两行。\r
\r
- 推荐：\r
\r
\`\`\`\r
/* Module A\r
---------------------------------------------------------------- */\r
.mod_a {\r
   }\r
\r
\r
/* Module B\r
---------------------------------------------------------------- */\r
.mod_b {\r
   }\r
\`\`\`\r
\r
- 不推荐：\r
\r
\`\`\`\r
/* Module A ---------------------------------------------------- */\r
.mod_a {\r
   }\r
/* Module B ---------------------------------------------------- */\r
.mod_b {\r
   }\r
\`\`\`\r
\r
### 3.2.3 文件注释\r
\r
在样式文件编码声明 @charset 语句下面注明页面名称、作者、创建日期等信息。\r
\r
\`\`\`\r
@charset "UTF-8";\r
/**\r
 * @desc File Info\r
 * @author Author Name\r
 * @date 2015-10-10\r
 */\r
\`\`\`\r
\r
## 3.3 JavaScript 文件注释\r
\r
### 3.3.1 单行注释\r
\r
单行注释使用 //，注释应单独一行写在被注释对象的上方，不要追加在某条语句的后面。\r
\r
- 推荐：\r
\r
\`\`\`\r
// is current tab\r
const active = true\r
\`\`\`\r
\r
- 不推荐：\r
\r
\`\`\`\r
const active = true // is current tab\r
\`\`\`\r
\r
注释行的上方需要有一个空行（除非注释行上方是一个块的顶部），以增加可读性。\r
\r
- 推荐：\r
\r
\`\`\`\r
function getType () {\r
     \r
  console.log('fetching type...')\r
  \r
  // set the default type to 'no type'\r
  const type = this.type || 'no type'\r
  return type\r
}\r
\`\`\`\r
\r
\`\`\`\r
// 注释行上面是一个块的顶部时不需要空行\r
function getType () {\r
     \r
  // set the default type to 'no type'\r
  const type = this.type || 'no type'   \r
  return type\r
}\r
\`\`\`\r
\r
- 不推荐：\r
\r
\`\`\`\r
function getType () {\r
     \r
  console.log('fetching type...')\r
  // set the default type to 'no type'\r
  const type = this.type || 'no type'\r
  return type\r
}\r
\`\`\`\r
\r
### 3.3.2 多行注释\r
\r
多行注释使用 /** … */，而不是多行的 //。\r
\r
- 推荐：\r
\r
\`\`\`\r
/**\r
 * make() returns a new element\r
 * based on the passed-in tag name\r
 */\r
function make (tag) {\r
   \r
  // ...\r
\r
  return element\r
}\r
\`\`\`\r
\r
- 不推荐：\r
\r
\`\`\`\r
// make() returns a new element\r
// based on the passed in tag name\r
function make (tag) {\r
   \r
  // ...\r
\r
  return element\r
}\r
\`\`\`\r
\r
### 3.3.3 注释空格\r
\r
注释内容和注释符之间需要有一个空格，以增加可读性。eslint: spaced-comment。\r
\r
- 推荐：\r
\r
\`\`\`\r
// is current tab\r
const active = true\r
\r
/**\r
 * make() returns a new element\r
 * based on the passed-in tag name\r
 */\r
function make(tag) {\r
     \r
  // ...\r
\r
  return element\r
}\r
\`\`\`\r
\r
- 不推荐：\r
\r
\`\`\`\r
//is current tab\r
const active = true\r
\r
/**\r
 *make() returns a new element\r
 *based on the passed-in tag name\r
 */\r
function make(tag) {\r
     \r
  // ...\r
\r
  return element\r
}\r
\`\`\`\r
\r
### 3.3.4 特殊标记\r
\r
有时我们发现某个可能的 bug，但因为一些原因还没法修复；或者某个地方还有一些待完成的功能，这时我们需要使用相应的特殊标记注释来告知未来的自己或合作者。常用的特殊标记有两种：\r
\r
- // FIXME : 说明问题是什么\r
- // TODO : 说明还要做什么或者问题的解决方案\r
\r
\`\`\`\r
class Calculator extends Abacus {\r
   \r
  constructor () {\r
   \r
    super ()\r
\r
      // FIXME: shouldn’t use a global here\r
      total = 0\r
\r
      // TODO: total should be configurable by an options param\r
      this.total = 0\r
  }\r
}\r
\`\`\`\r
\r
### 3.3.5 文档类注释\r
\r
文档类注释，如函数、类、文件、事件等；都使用 jsdoc 规范。\r
\r
\`\`\`\r
/**\r
 * Book类，代表一个书本.\r
 * @constructor\r
 * @param {string} title - 书本的标题.\r
 * @param {string} author - 书本的作者.\r
 */\r
function Book (title, author) {\r
   \r
  this.title = title\r
  this.author = author\r
}\r
\r
Book.prototype = {\r
   \r
  /**\r
   * 获取书本的标题\r
   * @returns {string|*}\r
   */\r
  getTitle: function () {\r
   \r
    return this.title\r
  },\r
  /**\r
   * 设置书本的页数\r
   * @param pageNum {number} 页数\r
   */\r
  setPageNum: function (pageNum) {\r
   \r
    this.pageNum=pageNum\r
  }\r
}\r
\`\`\`\r
\r
### 3.3.6 注释工具\r
\r
**ESLint** 是当下最流行的 JS 代码检查工具，ESLint 中有一些注释相关的规则，用户可选择开启：\r
\r
- valid-jsdoc\r
- require-jsdoc\r
- no-warning-comments\r
- capitalized-comments\r
- line-comment-position\r
- lines-around-comment\r
- multiline-comment-style\r
- no-inline-comments\r
- spaced-comment\r
\r
\r
- 缩进换行请使用两个空格。\r
- 大型团队多人协作项目推荐 JavaScript 代码末尾加分号。\r
- 小型个人创新练手项目可尝试使用 JavaScript 代码末尾不加分号的风格，更加清爽简练。\r
\r
如果有错误希望您能够在评论中提醒我！！！ （文章内容来源于公众号《前端新世界》的一篇文章《史上最全 Vue 前端代码风格指南》）\r
链接地址： [https://mp.weixin.qq.com/s/2GLfEHXDTCOD1q-etlGMEQ](https://mp.weixin.qq.com/s/2GLfEHXDTCOD1q-etlGMEQ)`,Hr=`---\r
title: Vue深度选择器\r
date: 2023-10-09 18:08\r
category: 前端\r
tags:\r
  - vue\r
  - 知识\r
---\r
\r
# Vue中的CSS深度选择器\r
\r
## 概念与作用\r
\r
当 \`<style>\` 标签有 \`scoped\` 属性时，它的 CSS 只作用于当前组件中的元素，父组件的样式将不会渗透到子组件。 如果你希望 scoped\r
样式中的一个选择器能够作用得“更深”，例如影响子组件，你可以使用深度选择器。\r
\r
一个简单的例子：\r
\r
\`\`\`html\r
\r
<template>\r
  <div class="not-found">\r
    <a-card title="Card title">\r
      <p>Card content</p>\r
      <p>Card content</p>\r
      <p>Card content</p>\r
    </a-card>\r
  </div>\r
</template>\r
\`\`\`\r
\r
这是Vue项目中通常会看到的一个page文件，我在其中引用了ant-design-vue 的 a-card 组件，\r
我希望在这个page文件中，a-card组件的标题为绿色，于是我找到a-card组件title对应的class值，添加了如下样式代码：\r
\r
\`\`\`CSS\r
<\r
style lang\r
\r
=\r
"scss"\r
scoped >\r
.ant-card-head-title {\r
    background: yellowgreen;\r
}\r
\r
<\r
/\r
style >\r
\`\`\`\r
\r
显然，由于scoped属性的防渗透作用，我添加的背景色并不会生效。通常，会有两种处理方法：\r
\r
1. 将scoped属性去掉。样式生效了，但是这种写法是作用到全局的，如果不严格规范class的命名，非常容易污染全局样式。这种写法，其实等同于写在全局样式文件中。\r
\r
2. 保留scoped属性，使用深度选择器，代码如下\r
\r
   <style lang="scss" scoped>\r
     :deep(.ant-card-head-title){\r
       background: yellowgreen;\r
     }\r
   </style>\r
\r
查看浏览器，以上代码被编译成\r
\r
\`\`\`CSS\r
[data-v-e44d851a] .ant-card-head-title {\r
    background: yellowgreen;\r
}\r
\`\`\`\r
\r
很明显，添加了这个属性之后，可以达到我们想要的效果，而且不会污染全局样式\r
\r
## 写法\r
\r
\`\`\`CSS\r
<!--\r
写法1 使用::v-deep\r
\r
-->\r
<\r
style lang\r
\r
=\r
"scss"\r
scoped >\r
::v-deep .ant-card-head-title {\r
    background: yellowgreen;\r
}\r
\r
<\r
/\r
style >\r
\r
<!--\r
写法2 使用 >>> 操作符-- >\r
\r
<\r
style scoped >\r
>>> .ant-card-head-title {\r
    background: yellowgreen;\r
}\r
\r
<\r
/\r
style >\r
\r
<!--\r
写法3 使用 /deep/\r
\r
-->\r
<\r
style scoped >\r
/deep/ .ant-card-head-title {\r
    background: yellowgreen;\r
}\r
\r
<\r
/\r
style >\r
\r
<!--\r
写法4 使用:deep(<inner-selector>)\r
\r
-->\r
<\r
style lang\r
\r
=\r
"scss"\r
scoped >\r
:deep(.ant-card-head-title) {\r
    background: yellowgreen;\r
}\r
\r
<\r
/\r
style >\r
\`\`\`\r
\r
写法1 和写法4，都支持sass预处理器。但是在新的vue3.0 单文件规范中，如果你还是使用写法1，会碰到如下警告:\r
\r
> **\\[@vue/compiler-sfc\\] \`::v-deep\` usage as a combinator has been deprecated. Use \`:deep(<inner-selector>)\` instead.**\r
\r
写法1在vue3.0中已经被弃用了，以后小伙伴们在开发vue3.0项目的时候，还是使用写法4吧～，有一说一，写法4在语义上也更有助于理解。\r
\r
关于写法1和写法3，主要是不支持sass预处理器的解析，且\`>>>\`操作符存在浏览器兼容性问题，所以朋友们还是谨慎使用吧～`,Pr=`---\r
title: el-icon给svg设置class无效问题\r
date: 2023-10-09 18:06\r
category: 前端\r
tags:\r
  - vue\r
  - 问题记录\r
---\r
\r
## 问题\r
\r
在使用\`el-icon\`内置图标时，如果单独使用\`svg\`，那么通过添加\`class\`设置\`css\`则无效果:\r
\r
\`\`\`vue\r
...\r
<close class="menu-icon" />\r
...\r
\r
<style scoped>\r
  .menu-icon {\r
    width: 1em;\r
    height: 1em;\r
  }\r
</style>\r
\`\`\`\r
\r
可以看到，显示有类名\`menu-icon\`，却并未应用\`css\`属性\r
\r
![image-20230322102018557](./assets/el-icon给svg设置class无效问题/image-20230322102018557.png)\r
\r
## 解决方案\r
\r
参考官方文档\r
\r
![image-20230322102237258](./assets/el-icon给svg设置class无效问题/image-20230322102237258.png)\r
\r
### 方案1\r
\r
直接在标签内提供要设置的\`style\`属性\r
\r
![image-20230322102516781](./assets/el-icon给svg设置class无效问题/image-20230322102516781.png)\r
\r
### 方案2\r
\r
也可以在外边包裹一层<el-icon>，通过给\`el-icon\`添加\`class\`来控制里面的\`svg\`图标\r
\r
\`\`\`\r
<el-icon class="menu-icon">\r
  <close />\r
</el-icon>\r
\`\`\`\r
\r
\r
\r
`,jr=`---\r
title: Hello World\r
date: 2023-10-07 18:23\r
category: 默认\r
---\r
\r
Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more\r
info. If you get any problems when using Hexo, you can find the answer\r
in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me\r
on [GitHub](https://github.com/hexojs/hexo/issues).\r
\r
## Quick Start\r
\r
### Create a new post\r
\r
\`\`\` bash\r
$ hexo new "My New Post"\r
\`\`\`\r
\r
More info: [Writing](https://hexo.io/docs/writing.html)\r
\r
### Run server\r
\r
\`\`\` bash\r
$ hexo server\r
\`\`\`\r
\r
More info: [Server](https://hexo.io/docs/server.html)\r
\r
### Generate static files\r
\r
\`\`\` bash\r
$ hexo generate\r
\`\`\`\r
\r
More info: [Generating](https://hexo.io/docs/generating.html)\r
\r
### Deploy to remote sites\r
\r
\`\`\` bash\r
$ hexo deploy\r
\`\`\`\r
\r
More info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\r
`,Xr=`---\r
title: keep-alive标签服用问题\r
date: 2023-10-09 18:07\r
category: 前端\r
tags:\r
  - vue\r
  - 问题记录\r
---\r
\r
## 问题描述\r
\r
在使用\`<keep-alive>\`标签搭配带参数的路由匹配时，出现了以下问题：\r
\r
在下图页面中，点击‘编辑’按钮将跳转至\`/article/edit/:articleId\`页面\r
\r
![image-20230331231801638](./assets/keep-alive标签复用问题/image-20230331231801638.png)\r
\r
由于我使用了\`keep-alive\`标签\r
\r
\`\`\`vue\r
\r
<router-view v-slot="{ Component }">\r
  <transition mode="out-in" name="el-fade-in-linear">\r
    <keep-alive>\r
      <component :is="Component" />\r
    </keep-alive>\r
  </transition>\r
</router-view>\r
\`\`\`\r
\r
导致在切换编辑页面时，始终是同一个文章的编辑页面，即首次缓存的页面\r
\r
![image-20230331232308702](./assets/keep-alive标签复用问题/image-20230331232308702.png)\r
\r
![image-20230331232324969](./assets/keep-alive标签复用问题/image-20230331232324969.png)\r
\r
且此时的url是正确的，分别为\`http://localhost:8082/article/edit/1\` \`http://localhost:8082/article/edit/2\`\r
\r
## 解决方案\r
\r
研究发现，<keep-alive>中的<component>标签可以设置key属性，将key设置为路由的path即可解决跳转问题\r
\r
\`\`\`vue\r
\r
<router-view v-slot="{ Component, route }">\r
  <transition mode="out-in" name="el-fade-in-linear">\r
    <keep-alive>\r
      <component :is="Component" :key="route.path" />\r
    </keep-alive>\r
  </transition>\r
</router-view>\r
\`\`\`\r
\r
注：对于restful风格的页面，设置为path即可，不然要设置为fullpath`,Qr=`---\r
title: 媒体查询常用分辨率\r
date: 2023-10-09 17:55\r
category: 前端\r
tags:\r
  - CSS\r
---\r
\r
### 第一类：大于xx的设备\r
\r
\`\`\` css	\r
@media (min-width: 768px){ //>=768的设备 }\r
@media (min-width: 992px){ //>=992的设备 }\r
@media (min-width: 1200px){ //>=1200的设备 }\r
\`\`\`\r
\r
### 第二类：小于xx的设备\r
\r
\`\`\`css\r
@media (max-width: 1199px) {\r
//<=1199的设备\r
}\r
\r
@media (max-width: 991px) {\r
//<=991的设备\r
}\r
\r
@media (max-width: 767px) {\r
//<=768的设备\r
}\r
\`\`\`\r
\r
#### 注意\r
\r
若同时使用某一类中的几种不同的情况，需要注意一下顺序，第一类需要小的在上面，第二类需要大的在上面\r
\r
反例：\r
\r
\`\`\`css\r
@media (min-width: 1200px) {\r
}\r
\r
@media (min-width: 768px) {\r
}\r
\`\`\`\r
\r
若按上述顺序写，假如分辨率为1440时，由于1440>768，因此在1200中设置的属性便会失效`,Ir=`---\r
title: 浏览器自动填充账号后输入框背景色变化问题\r
date: 2023-10-09 18:08\r
category: 前端\r
tags:\r
  - vue\r
  - 问题记录\r
---\r
\r
## 问题描述\r
\r
现在浏览器一般都带有自动保存账号密码的功能\r
\r
![image-20230317113101828](./assets/浏览器自动填充账号后输入框背景色变化问题/image-20230317113101828.png)\r
\r
但选择账号之后输入框背景色会发生变化，如果输入框是原始方形输入框那倒还好，但若输入框有一定样式(如下图)，那将会变得非常难看\r
\r
![image-20230317113222236](./assets/浏览器自动填充账号后输入框背景色变化问题/image-20230317113222236.png)\r
\r
## 解决\r
\r
按f12查看css后，发现有这样一个伪类：:-internal-autofill-selected\r
\r
![image-20230317113607132](./assets/浏览器自动填充账号后输入框背景色变化问题/image-20230317113607132.png)\r
\r
但这个伪类无法直接在css中选择，会报错\r
\r
不过却发现了另一个伪类：-webkit-autofill\r
\r
但在这个伪类中设置背景色无效，需要设置box-shadow\r
\r
\`\`\`css\r
input:-webkit-autofill {\r
    -webkit-box-shadow: 0 0 0 1000px #ecf0f3 inset;\r
}\r
\`\`\`\r
\r
![image-20230317114425439](./assets/浏览器自动填充账号后输入框背景色变化问题/image-20230317114425439.png)\r
\r
不过这样依然很丑，因为输入框内部阴影被遮住了\r
\r
最后，选择延迟颜色变化的动画，即在很久很久之后在变化颜色，这样的话短期内(99999秒约为27小时)不会有什么影响\r
\r
\`\`\`css\r
input:-webkit-autofill {\r
    -webkit-transition: color 99999s ease-out, background-color 99999s ease-out;\r
}\r
\`\`\`\r
\r
![image-20230317114826216](./assets/浏览器自动填充账号后输入框背景色变化问题/image-20230317114826216.png)\r
\r
### 注意：\r
\r
-webkit-autofill伪类只在不带scoped的style块中生效\r
\r
-webkit-autofill是用于控制表单自动填充的样式，而scoped属性用于限制样式的作用范围。由于自动填充是浏览器级别的操作，它不受样式的作用范围限制。因此，在<style scoped>\r
标签中设置-webkit-autofill伪类不会生效。`,Cn="/static/jpg/bg-1-e4cca6ab.jpg",Nn="/static/jpg/bg-2-962489c2.jpg",Bn="/static/jpg/bg-3-a683f479.jpg",Hn="/static/jpg/bg-4-86a814a7.jpg",Pn="/static/jpg/bg-5-d10469d8.jpg",jn="/static/jpg/bg-6-74dbd32e.jpg",Dr="/static/png/image-20231006003651405-2fe569a1.png",Or="/static/png/5e0a471d4f894d6492543f6ee1243f34-d57d5c76.png",Rr="/static/png/6c4083b3ce5141f6a3e13b6d4cb19fb2-0d4b1e81.png",qr="/static/png/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAcXExMTk1NTY2MzEz_size_20_color_FFFFFF_t_70_g_se_x_16-1678529555660-2-6abcb73c.png",$r="/static/png/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAcXExMTk1NTY2MzEz_size_20_color_FFFFFF_t_70_g_se_x_16-1678529555660-3-4c548add.png",Ur="/static/png/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAcXExMTk1NTY2MzEz_size_20_color_FFFFFF_t_70_g_se_x_16-1678529555660-4-f6cc06ba.png",Vr="/static/png/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAcXExMTk1NTY2MzEz_size_20_color_FFFFFF_t_70_g_se_x_16-1678529844585-15-0cf20a8f.png",Yr="/static/png/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAcXExMTk1NTY2MzEz_size_20_color_FFFFFF_t_70_g_se_x_16-1678529844585-16-566d51e9.png",Kr="/static/png/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAcXExMTk1NTY2MzEz_size_20_color_FFFFFF_t_70_g_se_x_16-1678529844586-17-6862ab6c.png",Gr="/static/png/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAcXExMTk1NTY2MzEz_size_20_color_FFFFFF_t_70_g_se_x_16-1678529844586-18-8a6380ce.png",Jr="/static/png/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAcXExMTk1NTY2MzEz_size_20_color_FFFFFF_t_70_g_se_x_16-1678529844586-19-98c29d66.png",Wr="/static/png/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAcXExMTk1NTY2MzEz_size_20_color_FFFFFF_t_70_g_se_x_16-1678529844586-20-9168bdca.png",Zr="/static/png/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAcXExMTk1NTY2MzEz_size_20_color_FFFFFF_t_70_g_se_x_16-1678529844586-21-ee28cb03.png",ne="/static/png/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAcXExMTk1NTY2MzEz_size_20_color_FFFFFF_t_70_g_se_x_16-1678529844586-22-457c6449.png",re="/static/png/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAcXExMTk1NTY2MzEz_size_20_color_FFFFFF_t_70_g_se_x_16-1678529844586-23-c7b231f2.png",ee="/static/png/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAcXExMTk1NTY2MzEz_size_20_color_FFFFFF_t_70_g_se_x_16-1678529844586-24-35b65b49.png",te="/static/png/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAcXExMTk1NTY2MzEz_size_20_color_FFFFFF_t_70_g_se_x_16-1678529844586-25-1d3c79c7.png",se="/static/png/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAcXExMTk1NTY2MzEz_size_20_color_FFFFFF_t_70_g_se_x_16-1678529844586-26-a92020bc.png",ae="/static/png/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAcXExMTk1NTY2MzEz_size_20_color_FFFFFF_t_70_g_se_x_16-1678529844587-27-78c7cbae.png",oe="/static/png/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAcXExMTk1NTY2MzEz_size_20_color_FFFFFF_t_70_g_se_x_16-1678530271083-3-3f08efda.png",ie="/static/png/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAcXExMTk1NTY2MzEz_size_20_color_FFFFFF_t_70_g_se_x_16-1678530352627-6-b22025ad.png",le="/static/png/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAcXExMTk1NTY2MzEz_size_20_color_FFFFFF_t_70_g_se_x_16-1678530827082-3-8e75eacc.png",ce="/static/png/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAcXExMTk1NTY2MzEz_size_20_color_FFFFFF_t_70_g_se_x_16-1678530868688-6-0be63c96.png",pe="/static/png/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAcXExMTk1NTY2MzEz_size_20_color_FFFFFF_t_70_g_se_x_16-1678531141722-9-95fbc2e0.png",me="/static/png/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAcXExMTk1NTY2MzEz_size_20_color_FFFFFF_t_70_g_se_x_16-1678531728577-14-94850cba.png",de="/static/png/watermark_type_d3F5LXplbmhlaQ_shadow_50_text_Q1NETiBAcXExMTk1NTY2MzEz_size_20_color_FFFFFF_t_70_g_se_x_16-6fd100cc.png",ue="/static/png/image-20230322102018557-bc17a628.png",ge="/static/png/image-20230322102237258-86098788.png",_e="/static/png/image-20230322102516781-2d1fd4d8.png",he="/static/png/image-20230331231801638-62162562.png",ye="/static/png/image-20230331232308702-e1681353.png",be="/static/png/image-20230331232324969-ee29677f.png",fe="/static/png/image-20230317113101828-63e101bf.png",ve="/static/png/image-20230317113222236-4ba0aeb9.png",Te="/static/png/image-20230317113607132-7079943c.png",xe="/static/png/image-20230317114425439-5704e336.png",we="/static/png/image-20230317114826216-9e108fc2.png",Fe="/static/jpg/cover1-e002fd58.jpg",Ee="/static/jpg/cover2-d3736654.jpg",ke="/static/png/404-9a57be6b.png",Me="/static/jpg/articleCover-3b505f6d.jpg",Le="/static/png/authorAvatar-b168213d.png",Se="/static/png/defaultAvatar-745c3d16.png",Xn=Object.assign({"/src/assets/images/bg/bg-1.jpg":Cn,"/src/assets/images/bg/bg-2.jpg":Nn,"/src/assets/images/bg/bg-3.jpg":Bn,"/src/assets/images/bg/bg-4.jpg":Hn,"/src/assets/images/bg/bg-5.jpg":Pn,"/src/assets/images/bg/bg-6.jpg":jn}),fn=Object.keys(Xn),vn=Object.assign({"/src/assets/article/assets/Linux命令/image-20231006003651405.png":Dr,"/src/assets/article/assets/TS学习/5e0a471d4f894d6492543f6ee1243f34.png":Or,"/src/assets/article/assets/TS学习/6c4083b3ce5141f6a3e13b6d4cb19fb2.png":Rr,"/src/assets/article/assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529555660-2.png":qr,"/src/assets/article/assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529555660-3.png":$r,"/src/assets/article/assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529555660-4.png":Ur,"/src/assets/article/assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844585-15.png":Vr,"/src/assets/article/assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844585-16.png":Yr,"/src/assets/article/assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844586-17.png":Kr,"/src/assets/article/assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844586-18.png":Gr,"/src/assets/article/assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844586-19.png":Jr,"/src/assets/article/assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844586-20.png":Wr,"/src/assets/article/assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844586-21.png":Zr,"/src/assets/article/assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844586-22.png":ne,"/src/assets/article/assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844586-23.png":re,"/src/assets/article/assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844586-24.png":ee,"/src/assets/article/assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844586-25.png":te,"/src/assets/article/assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844586-26.png":se,"/src/assets/article/assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678529844587-27.png":ae,"/src/assets/article/assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678530271083-3.png":oe,"/src/assets/article/assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678530352627-6.png":ie,"/src/assets/article/assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678530827082-3.png":le,"/src/assets/article/assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678530868688-6.png":ce,"/src/assets/article/assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678531141722-9.png":pe,"/src/assets/article/assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16-1678531728577-14.png":me,"/src/assets/article/assets/TS学习/watermark,type_d3F5LXplbmhlaQ,shadow_50,text_Q1NETiBAcXExMTk1NTY2MzEz,size_20,color_FFFFFF,t_70,g_se,x_16.png":de,"/src/assets/article/assets/el-icon给svg设置class无效问题/image-20230322102018557.png":ue,"/src/assets/article/assets/el-icon给svg设置class无效问题/image-20230322102237258.png":ge,"/src/assets/article/assets/el-icon给svg设置class无效问题/image-20230322102516781.png":_e,"/src/assets/article/assets/keep-alive标签复用问题/image-20230331231801638.png":he,"/src/assets/article/assets/keep-alive标签复用问题/image-20230331232308702.png":ye,"/src/assets/article/assets/keep-alive标签复用问题/image-20230331232324969.png":be,"/src/assets/article/assets/浏览器自动填充账号后输入框背景色变化问题/image-20230317113101828.png":fe,"/src/assets/article/assets/浏览器自动填充账号后输入框背景色变化问题/image-20230317113222236.png":ve,"/src/assets/article/assets/浏览器自动填充账号后输入框背景色变化问题/image-20230317113607132.png":Te,"/src/assets/article/assets/浏览器自动填充账号后输入框背景色变化问题/image-20230317114425439.png":xe,"/src/assets/article/assets/浏览器自动填充账号后输入框背景色变化问题/image-20230317114826216.png":we,"/src/assets/article/covers/cover1.jpg":Fe,"/src/assets/article/covers/cover2.jpg":Ee,"/src/assets/images/404.png":ke,"/src/assets/images/bg/bg-1.jpg":Cn,"/src/assets/images/bg/bg-2.jpg":Nn,"/src/assets/images/bg/bg-3.jpg":Bn,"/src/assets/images/bg/bg-4.jpg":Hn,"/src/assets/images/bg/bg-5.jpg":Pn,"/src/assets/images/bg/bg-6.jpg":jn,"/src/assets/images/config/articleCover.jpg":Me,"/src/assets/images/config/authorAvatar.png":Le,"/src/assets/images/config/defaultAvatar.png":Se}),$s=()=>{const n=Math.floor(Math.random()*fn.length);return Xn[fn[n]]},R=n=>{for(const r in vn)if(r.includes(n))return vn[r];return""},Us=n=>{window.open(n)},ze=W("useLocalStore",{state:()=>({articleList:[],articleInfoList:[],categoryList:[],tagList:[],categoryArticleList:[],tagArticleList:[]}),actions:{loadArticle(){const n=Object.assign({"/src/assets/article/CSS垂直居中.md":Sr,"/src/assets/article/CSS选择器.md":zr,"/src/assets/article/Linux命令.md":Ar,"/src/assets/article/TS学习.md":Cr,"/src/assets/article/TS高级类型.md":Nr,"/src/assets/article/Vue命名规范.md":Br,"/src/assets/article/Vue深度选择器.md":Hr,"/src/assets/article/el-icon给svg设置class无效问题.md":Pr,"/src/assets/article/hello-world.md":jr,"/src/assets/article/keep-alive标签复用问题.md":Xr,"/src/assets/article/媒体查询常用分辨率.md":Qr,"/src/assets/article/浏览器自动填充账号后输入框背景色变化问题.md":Ir});Object.keys(n).forEach((e,s)=>this.parseArticle(n[e],s));for(let e=0;e<this.articleInfoList.length;e++)e!==0&&(this.articleInfoList[e].lastArticle={id:this.articleInfoList[e-1].id,articleTitle:this.articleInfoList[e-1].articleTitle,articleCover:this.articleInfoList[e-1].articleCover}),e!==this.articleInfoList.length-1&&(this.articleInfoList[e].nextArticle={id:this.articleInfoList[e+1].id,articleTitle:this.articleInfoList[e+1].articleTitle,articleCover:this.articleInfoList[e+1].articleCover})},parseArticle(n,r){const e={title:"无标题",cover:R("articleCover"),date:`${new Date().getFullYear()}-${new Date().getMonth()+1}-${new Date().getDate()}`,category:"默认分类",tags:[]};n.startsWith("---")&&n.substring(5,n.indexOf("---",3)-2).split(`
`).forEach(o=>{const d=o.match(/(\w+):\s*(.*)/),g=o.match(/ - (\S+)/);if(d){const[,a,f]=d;a==="title"?e.title=f:a==="cover"?e.cover=R(f):a==="date"?e.date=f:a==="category"&&(e.category=f)}else g&&e.tags.push(g[1])}),n=n.replace(/(!\[.*])\((.*)\)/g,(p,o,d)=>{let g=d.substring(d.lastIndexOf("/")+1);return console.log(`${o}(${R(g)})`),`${o}(${R(g)})`});const s=this.addCategory(e.category,r),i=[];e.tags.forEach(p=>{i.push(this.addTag(p,r))});const l={id:r,articleCover:e.cover,articleTitle:e.title,articleContent:n.substring(n.indexOf("---",3)+3),articleType:1,viewCount:0,likeCount:0,category:s,tagList:i,createTime:e.date,updateTime:e.date};this.articleInfoList.push(l),this.articleList.push(Ae(l))},addCategory(n,r){this.categoryList.some(s=>s.categoryName===n)||(this.categoryList.push({id:this.categoryList.length,categoryName:n,articleCount:0}),this.categoryArticleList.push([]));const e=this.categoryList.findIndex(s=>s.categoryName===n);return this.categoryList[e].articleCount++,this.categoryArticleList[e].push(r),this.categoryList[e]},addTag(n,r){this.tagList.some(s=>s.tagName===n)||(this.tagList.push({id:this.tagList.length,tagName:n,articleCount:0}),this.tagArticleList.push([]));const e=this.tagList.findIndex(s=>s.tagName===n);return this.tagList[e].articleCount++,this.tagArticleList[e].push(r),this.tagList[e]},getArticlesByCategoryId(n){return{articleConditionList:this.generateArticleConditionList(this.categoryArticleList[n]),name:this.categoryList[n].categoryName}},getArticlesByTagId(n){return{articleConditionList:this.generateArticleConditionList(this.tagArticleList[n]),name:this.tagList[n].tagName}},generateArticleConditionList(n){const r=[];return n.forEach(e=>{const s={id:e,articleCover:this.articleInfoList[e].articleCover,articleTitle:this.articleInfoList[e].articleTitle,tagList:this.articleInfoList[e].tagList,category:this.articleInfoList[e].category,createTime:this.articleInfoList[e].createTime};r.push(s)}),r},initBlogInfo(){return{status:1,articleCount:0,categoryCount:0,tagCount:0,viewCount:0,siteConfig:{id:0,userAvatar:R("userAvatar"),touristAvatar:R("defaultAvatar"),siteName:"shoka-blog",siteAddress:"https://www.juliy.top",siteIntro:"(●ˇ∀ˇ●) 哎嘿~",siteNotice:'这是一条测试公告<br/>可以显示html内容<br/>如:<b>加粗</b>,<span style="color: red">变色</span>,或者是<a class="underline-a" href="https://bing.com">超链接</a>等',createSiteTime:"2023-01-01",recordNumber:"苏ICP备2022048542号",authorAvatar:R("authorAvatar"),siteAuthor:"juliy",articleCover:"",aboutMe:"------------------------------------\n\n## 项目地址\n项目链接： [**https://www.juliy.top**](https://www.juliy.top)\n后台链接： [**https://admin.juliy.top**](https://admin.juliy.top)\n测试账号： `test@qq.com`，密码：`123456`\nGithub 地址： [**https://github.com/juliy819/shoka-blog**](https://github.com/juliy819/shoka-blog)\nGitee 地址： [**https://gitee.com/juliy819/shoka-blog**](https://gitee.com/juliy819/shoka-blog)\n接口文档：[**https://121.37.175:8080/doc.html**](https://121.37.175:8080/doc.html) (忘记设置nginx了)\n\n------------------------------------\n\n## 项目特点\n- 前台界面参考 `Hexo` 的 `Shoka` 和 `Butterfly` 设计，页面美观，响应式布局\n- 后台管理基于若依二次开发，含有侧边栏，历史标签，面包屑等\n- 采用 `RABC` 权限模型，使用 `Sa-Token` 进行权限管理\n- 支持代码高亮、图片预览、黑夜模式、评论、点赞、取消点赞等功能\n- 发送 `HTML` 邮件评论回复提醒，内容详细\n- 文章编辑使用 `Markdown` 编辑器\n- 代码遵循阿里巴巴开发规范\n\n------------------------------------\n\n## 技术栈\n前端： `Vue3` + `Vite4` + `Pinia` + `Vue Router` + `TypeScript` + `Axios` + `Element Plus` + `Naive UI` + `Echarts` + `Swiper`等\n后端： `SpringBoot3` + `Mysql` + `Redis` + `Thymeleaf` + `Nginx` + `Sa-Token` + `Swagger3` + `MyBatisPlus` + `RabbitMQ`（未实装）等\n\n------------------------------------\n\n## 运行环境\n服务器：华为云2核2G CentOS 7.9\n对象存储：七牛云\n\n------------------------------------\n\n## 开发环境\n|开发工具 |版本|说明|\n|-|-|-|\n|IDEA|2023.1.2|JAVA及VUE开发工具IDE|\n|navicat|16.0.11|MYSQL操作工具|\n|tabby|/|Linux连接工具，附ftp功能|\n\n|开发环境 |版本|\n|-|-|\n|OpenJDK|17|\n|Redis|7.0|\n|vue|3.2.47|\n|vite|4.2.1|\n|springboot|3.0.4|\n\n------------------------------------\n\n# 关于我\n\n**NUIST** 20级 软件工程\n`202083290549`\n\n学的太杂了，啥都没学精\n最开始用`QT`写了个非常非常普通的管理系统\n之后又用`java`的`swing`和`javafx`写了好几个windows平台的小项目\n也用过`C#`的`wpf`写了几个GM类型的小工具\n再之后用`springboot`和`vue`完成了这个博客\n最近又在研究安卓，感觉使用`kotlin`配合`jetpack compose`也很方便，也想搞个本博客配套的app出来(其实没必要的，网页是响应式布局，已经做了移动端适配)，又得再学学`kotlin`语言",github:"https://github.com/juliy819",gitee:"https://gitee.com/juliy819",bilibili:"https://space.bilibili.com/646795371",qq:"799399654",commentCheck:0,messageCheck:0,emailNotice:0,socialList:"qq,github,gitee",loginList:"email"}}}},getters:{}}),Ae=n=>{let r=n;return delete r.likeCount,delete r.viewCount,delete r.articleType,delete r.lastArticle,delete r.nextArticle,delete r.updateTime,r},Ce=n=>({appStore:un(n),blogStore:kr(n),userStore:Lr(n),localStore:ze(n)}),C=Ce,Ne={class:"count"},Be=L({__name:"AffixTools",setup(n){const r=sn(),e=F(0),s=Dn({transform:"translateX(-45px)"}),{y:i}=En(window),{appStore:l}=C(),p=["article","friend","talkInfo"],o=H(()=>f=>p.includes(f));Gn(document,"scroll",()=>{e.value=Number((window.scrollY/(document.documentElement.scrollHeight-window.innerHeight)*100).toFixed(0))});const d=()=>{l.rightContainer=!l.rightContainer},g=()=>{var f;(f=document.getElementById("comment-container"))==null||f.scrollIntoView({block:"start",inline:"nearest",behavior:"smooth"})},a=()=>{window.scrollTo({top:0,behavior:"smooth"})};return(f,w)=>{const m=G;return h(),x("div",{class:"tool",style:wn(u(i)>0?u(s):"")},[u(r).name=="article"?(h(),x("div",{key:0,class:"item",onClick:d},[t(m,{"icon-class":u(l).rightContainer?"narrow":"expand",size:"1.5rem"},null,8,["icon-class"])])):Q("",!0),u(o)(u(r).name)?(h(),x("div",{key:1,class:"item",onClick:g},[t(m,{"icon-class":"comment",size:"1.2rem"})])):Q("",!0),_("div",{class:"item back-to-top",onClick:a,style:{"margin-top":"0.2rem"}},[t(m,{"icon-class":"up",size:"0.9rem"}),_("span",Ne,k(u(e))+"%",1)])],4)}}});const He=X(Be,[["__scopeId","data-v-08fb6acd"]]),Pe=L({__name:"LoginDialog",setup(n){const{blogStore:r,appStore:e,userStore:s}=C(),i=F(!1),l=F(null),p={username:{required:!0,message:"请输入账号",trigger:["blur","input"]},password:{required:!0,message:"请输入密码",trigger:["blur","input"]}},o=F({username:"",password:""}),d=H({get:()=>e.loginFrame,set:w=>{e.loginFrame=w}}),g=()=>{if(!/^[A-Za-z0-9\u4e00-\u9fa5]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/.test(o.value.username)){M.msgError("邮箱格式不正确");return}if(o.value.password===""){M.msgError("密码不能为空");return}i.value=!0,s.login(o.value).then(()=>{o.value={username:"",password:""},e.loginFrame=!1,i.value=!1}).catch(()=>i.value=!1)},a=()=>{e.loginFrame=!1,e.showRegisterFrame()},f=()=>{e.loginFrame=!1,e.showPasswordFrame()};return(w,m)=>{const E=Z,b=nn,y=rn,T=en,z=kn,P=tn;return h(),S(P,{title:"登录",show:u(d),"onUpdate:show":m[5]||(m[5]=A=>K(d)?d.value=A:null),"show-icon":!1,class:"bg",preset:"dialog","transform-origin":"center","block-scroll":!1},{default:c(()=>[t(T,{ref_key:"formRef",ref:l,rules:p,model:o.value,"label-placement":"left",class:"mt20"},{default:c(()=>[t(b,{label:"账号",path:"username"},{default:c(()=>[t(E,{class:"dialog-input",value:o.value.username,"onUpdate:value":m[0]||(m[0]=A=>o.value.username=A),placeholder:"",type:"text"},null,8,["value"])]),_:1}),t(b,{label:"密码",path:"password"},{default:c(()=>[t(E,{class:"dialog-input",value:o.value.password,"onUpdate:value":m[1]||(m[1]=A=>o.value.password=A),placeholder:"",type:"password"},null,8,["value"])]),_:1}),t(b,null,{default:c(()=>[t(y,{style:{width:"100%"},type:"error",secondary:"",loading:i.value,onClick:m[2]||(m[2]=A=>g())},{default:c(()=>[v("登录")]),_:1},8,["loading"])]),_:1})]),_:1},8,["model"]),t(z,{justify:"space-between",style:{width:"100%"}},{default:c(()=>[t(y,{text:"",onClick:m[3]||(m[3]=A=>a())},{default:c(()=>[v("立即注册")]),_:1}),t(y,{text:"",onClick:m[4]||(m[4]=A=>f())},{default:c(()=>[v("忘记密码?")]),_:1})]),_:1})]),_:1},8,["show"])}}});const gn=n=>(cn("data-v-6640c784"),n=n(),pn(),n),je={class:"components"},Xe={class:"main-button",ref:"mainButton"},Qe={class:"moon",ref:"moon"},Ie=gn(()=>_("div",{class:"moon-hole"},null,-1)),De=gn(()=>_("div",{class:"moon-hole"},null,-1)),Oe=gn(()=>_("div",{class:"moon-hole"},null,-1)),Re=[Ie,De,Oe],qe=On('<div class="halo" data-v-6640c784></div><div class="halo" data-v-6640c784></div><div class="halo" data-v-6640c784></div><div class="cloud" data-v-6640c784><div class="cloud-son" data-v-6640c784></div><div class="cloud-son" data-v-6640c784></div><div class="cloud-son" data-v-6640c784></div><div class="cloud-son" data-v-6640c784></div><div class="cloud-son" data-v-6640c784></div><div class="cloud-son" data-v-6640c784></div></div><div class="cloud-light" data-v-6640c784><div class="cloud-son" data-v-6640c784></div><div class="cloud-son" data-v-6640c784></div><div class="cloud-son" data-v-6640c784></div><div class="cloud-son" data-v-6640c784></div><div class="cloud-son" data-v-6640c784></div><div class="cloud-son" data-v-6640c784></div></div><div class="stars" data-v-6640c784><div class="star big" data-v-6640c784><div class="star-son" data-v-6640c784></div><div class="star-son" data-v-6640c784></div><div class="star-son" data-v-6640c784></div><div class="star-son" data-v-6640c784></div></div><div class="star big" data-v-6640c784><div class="star-son" data-v-6640c784></div><div class="star-son" data-v-6640c784></div><div class="star-son" data-v-6640c784></div><div class="star-son" data-v-6640c784></div></div><div class="star medium" data-v-6640c784><div class="star-son" data-v-6640c784></div><div class="star-son" data-v-6640c784></div><div class="star-son" data-v-6640c784></div><div class="star-son" data-v-6640c784></div></div><div class="star medium" data-v-6640c784><div class="star-son" data-v-6640c784></div><div class="star-son" data-v-6640c784></div><div class="star-son" data-v-6640c784></div><div class="star-son" data-v-6640c784></div></div><div class="star small" data-v-6640c784><div class="star-son" data-v-6640c784></div><div class="star-son" data-v-6640c784></div><div class="star-son" data-v-6640c784></div><div class="star-son" data-v-6640c784></div></div><div class="star small" data-v-6640c784><div class="star-son" data-v-6640c784></div><div class="star-son" data-v-6640c784></div><div class="star-son" data-v-6640c784></div><div class="star-son" data-v-6640c784></div></div></div>',6),$e=L({__name:"DayNightToggle",setup(n){const r=Fn({selector:"html",attribute:"theme",valueDark:"dark",valueLight:"light"}),e=Jn(r),s=F(!1),i=l=>{let p=document.querySelectorAll(l);return p.length==1?p[0]:p};return ln(()=>{const l=i(".components"),p=i(".main-button"),o=i(".halo"),d=i(".cloud"),g=i(".cloud-light"),a=i(".cloud-son"),f=i(".moon"),w=i(".stars"),m=i(".star"),E=()=>{p.style.transform="translateX(0)",o[0].style.transform="translateX(0)",o[1].style.transform="translateX(0)",o[2].style.transform="translateX(0)",d.style.transform="translateY(10px)",g.style.transform="translateY(10px)",l.style.backgroundColor="rgba(70, 133, 192,1)",f.style.opacity="0",f.style.transform="translateX(55px)",w.style.transform="translateY(-125px)",w.style.opacity="0"},b=()=>{p.style.transform="translateX(100px)",o[0].style.transform="translateX(110px)",o[1].style.transform="translateX(80px)",o[2].style.transform="translateX(50px)",d.style.transform="translateY(80px)",g.style.transform="translateY(80px)",l.style.backgroundColor="rgba(25,30,50,1)",f.style.opacity="1",f.style.transform="translateX(-55px)",w.style.transform="translateY(-62.5px)",w.style.opacity="1"};r.value&&b(),p.addEventListener("click",function(){r.value?E():b(),s.value=!0,setTimeout(function(){s.value=!1},500),e()}),p.addEventListener("mousemove",function(){s.value||(r.value?(p.style.transform="translateX(90px)",o[0].style.transform="translateX(100px)",o[1].style.transform="translateX(73px)",o[2].style.transform="translateX(46px)",m[0].style.top="10px",m[0].style.left="36px",m[1].style.top="40px",m[1].style.left="87px",m[2].style.top="26px",m[2].style.left="16px",m[3].style.top="38px",m[3].style.left="63px",m[4].style.top="20.5px",m[4].style.left="72px",m[5].style.top="51.5px",m[5].style.left="35px"):(p.style.transform="translateX(10px)",o[0].style.transform="translateX(10px)",o[1].style.transform="translateX(7px)",o[2].style.transform="translateX(4px)",a[0].style.right="-24px",a[0].style.bottom="10px",a[1].style.right="-12px",a[1].style.bottom="-27px",a[2].style.right="17px",a[2].style.bottom="-43px",a[3].style.right="46px",a[3].style.bottom="-39px",a[4].style.right="70px",a[4].style.bottom="-65px",a[5].style.right="109px",a[5].style.bottom="-54px",a[6].style.right="-23px",a[6].style.bottom="10px",a[7].style.right="-11px",a[7].style.bottom="-26px",a[8].style.right="18px",a[8].style.bottom="-42px",a[9].style.right="47px",a[9].style.bottom="-38px",a[10].style.right="74px",a[10].style.bottom="-64px",a[11].style.right="110px",a[11].style.bottom="-55px"))}),p.addEventListener("mouseout",function(){s.value||(r.value?(p.style.transform="translateX(100px)",o[0].style.transform="translateX(110px)",o[1].style.transform="translateX(80px)",o[2].style.transform="translateX(50px)",m[0].style.top="11px",m[0].style.left="39px",m[1].style.top="39px",m[1].style.left="91px",m[2].style.top="26px",m[2].style.left="19px",m[3].style.top="37px",m[3].style.left="66px",m[4].style.top="21px",m[4].style.left="75px",m[5].style.top="51px",m[5].style.left="38px"):(p.style.transform="translateX(0px)",o[0].style.transform="translateX(0px)",o[1].style.transform="translateX(0px)",o[2].style.transform="translateX(0px)",a[0].style.right="-20px",a[0].style.bottom="10px",a[1].style.right="-10px",a[1].style.bottom="-25px",a[2].style.right="20px",a[2].style.bottom="-40px",a[3].style.right="50px",a[3].style.bottom="-35px",a[4].style.right="75px",a[4].style.bottom="-60px",a[5].style.right="110px",a[5].style.bottom="-50px",a[6].style.right="-20px",a[6].style.bottom="10px",a[7].style.right="-10px",a[7].style.bottom="-25px",a[8].style.right="20px",a[8].style.bottom="-40px",a[9].style.right="50px",a[9].style.bottom="-35px",a[10].style.right="75px",a[10].style.bottom="-60px",a[11].style.right="110px",a[11].style.bottom="-50px"))})}),(l,p)=>(h(),x("div",je,[_("div",Xe,[_("div",Qe,Re,512)],512),qe]))}});const Ue=X($e,[["__scopeId","data-v-6640c784"]]),Tn=[{title:"首页",path:"/",icon:"home"},{title:"文章",path:"",icon:"article",children:[{title:"归档",path:"/archive",icon:"archive"},{title:"分类",path:"/category",icon:"category"},{title:"标签",path:"/tag",icon:"tag"}]},{title:"说说",path:"/talk",icon:"talk"},{title:"收藏夹",path:"/favourite",icon:"favourite"},{title:"留言板",path:"/message",icon:"message"},{title:"关于",path:"/about",icon:"plane"}],Ve=[{title:"首页",path:"/",icon:"home"},{title:"分类",path:"/category",icon:"category"},{title:"标签",path:"/tag",icon:"tag"},{title:"关于",path:"/about",icon:"plane"}],Ye=[{name:"首页",icon:"home",path:"/"},{name:"归档",icon:"archive",path:"/archive"},{name:"分类",icon:"category",path:"/category"},{name:"标签",icon:"tag",path:"/tag"},{name:"说说",icon:"talk",path:"/talk"},{name:"收藏夹",icon:"favourite",path:"/favourite"},{name:"留言板",icon:"message",path:"/message"},{name:"关于",icon:"plane",path:"/about"}],Ke=[{name:"首页",icon:"home",path:"/"},{name:"分类",icon:"category",path:"/category"},{name:"标签",icon:"tag",path:"/tag"},{name:"关于",icon:"plane",path:"/about"}],Ge={class:"menu"},Je={class:"menu-item title"},We=["onMouseover","onMouseleave"],Ze={class:"sub-menu-title"},nt={key:0,class:"menu-item sub-menu"},rt={class:"sub-menu-dropdown"},et={class:"sub-menu-item"},tt=L({__name:"Navbar",setup(n){const r=sn(),{blogStore:e,userStore:s,appStore:i}=C(),l=i.local?Ve:Tn,p=F([]);p.value=Array(Tn.length).fill(!0);const o=a=>{p.value[a]=!1},d=a=>{p.value[a]=!0},g=()=>{s.logout(),M.msgSuccess("注销成功")};return(a,f)=>{const w=J("router-link"),m=G,E=Mn;return h(),x("div",Ge,[_("div",Je,[t(w,{class:"menu-btn",to:"/"},{default:c(()=>[v(k(u(e).siteConfig.siteName===void 0?"shoka-blog":u(e).siteConfig.siteName),1)]),_:1})]),(h(!0),x(Y,null,an(u(l),(b,y)=>(h(),x("div",{key:y,class:I(["menu-item",{active:u(r).path===b.path}])},[b.children===void 0?(h(),S(w,{key:0,to:b.path,class:"menu-btn"},{default:c(()=>[t(m,{"icon-class":b.icon},null,8,["icon-class"]),v(" "+k(b.title),1)]),_:2},1032,["to"])):(h(),x("div",{key:1,class:"sub-menu",onMouseover:T=>o(y),onMouseleave:T=>d(y)},[_("a",Ze,[t(m,{"icon-class":b.icon},null,8,["icon-class"]),v(" "+k(b.title),1)]),_("ul",{class:I({"sub-menu-dropdown":!0,hidden:u(p)[y]})},[(h(!0),x(Y,null,an(b.children,(T,z)=>(h(),x("li",{key:z,class:I([{active:u(r).path===T.path},"sub-menu-item"])},[t(w,{to:T.path,class:"sub-menu-link"},{default:c(()=>[t(m,{"icon-class":T.icon},null,8,["icon-class"]),v(" "+k(T.title),1)]),_:2},1032,["to"])],2))),128))],2)],40,We))],2))),128)),u(i).local?Q("",!0):(h(),x("div",nt,[u(s).id?(h(),x(Y,{key:1},[t(E,{round:"",class:"avatar",src:u(s).avatar?u(s).avatar:u(e).siteConfig.touristAvatar,size:30},null,8,["src"]),_("ul",rt,[_("li",{class:I(["sub-menu-item",{active:u(r).path==="/user"}])},[t(w,{to:"/user",class:"sub-menu-link"},{default:c(()=>[t(m,{"icon-class":"author"}),v(" 个人中心 ")]),_:1})],2),_("li",et,[_("a",{class:"sub-menu-link",onClick:g},[t(m,{"icon-class":"logout"}),v(" 退出 ")])])])],64)):(h(),x("a",{key:0,class:"menu-btn",onClick:f[0]||(f[0]=b=>u(i).showLoginFrame())},[t(m,{"icon-class":"user"}),v(" 登录 ")]))]))])}}});const st=X(tt,[["__scopeId","data-v-7c81bd6a"]]),at=n=>(cn("data-v-f882ce82"),n=n(),pn(),n),ot=at(()=>_("div",{class:"lines"},[_("span",{class:"line"}),_("span",{class:"line"}),_("span",{class:"line"})],-1)),it=[ot],lt=L({__name:"Hamburger",setup(n){const{appStore:r}=C(),e=H(()=>r.sideDrawer?"toggle close":"toggle");return(s,i)=>(h(),x("div",{class:I(u(e)),onClick:i[0]||(i[0]=l=>u(r).showSideDrawer())},it,2))}});const ct=X(lt,[["__scopeId","data-v-f882ce82"]]),pt=L({__name:"index",setup(n){const{appStore:r}=C(),{y:e}=En(window),s=F(!1),i=F(!0),l=H(()=>({show:s.value,up:i.value,down:!i.value})),p=H(()=>r.headerChangeHeight);return Rn(e,(o,d)=>{s.value=o>p.value,i.value=o<d;let g=document.getElementsByClassName("right-container")[0];o<d&&g?g.style.top="4.125rem":o>d&&g&&(g.style.top="1rem")}),(o,d)=>{const g=Ue;return h(),x("header",{class:I([u(l),"header-wrapper"])},[t(ct),_("div",{class:I({sub:u(e)>0})},[t(st)],2),t(g,{class:"day-night-toggle"})],2)}}});const mt=X(pt,[["__scopeId","data-v-75e29fd4"]]),dt=L({__name:"AppMain",setup(n){const r=F(null);return ln(()=>{un().local&&(r.value.style.paddingBottom="0")}),(e,s)=>{const i=J("router-view");return h(),x("main",{ref_key:"main",ref:r,class:"main-wrapper"},[t(i,null,{default:c(({Component:l,route:p})=>[(h(),S(qn,null,[(h(),S($n(l),{key:p.fullPath}))],1024))]),_:1})],512)}}});const ut=X(dt,[["__scopeId","data-v-7b96372d"]]),Qn=(n,r="YYYY-MM-DD")=>n==null?"":yr(n).format(r),Vs=(n,r="YYYY-MM-DD HH:mm:ss")=>Qn(n,r),gt={key:0,class:"footer-wrapper"},_t={class:"underline-a",href:"https://beian.miit.gov.cn/",target:"_blank"},ht=L({__name:"TheFooter",setup(n){const{blogStore:r}=C(),e=H(()=>sn().name==="message");return(s,i)=>{var l;return!u(e)&&!u(un)().local?(h(),x("footer",gt,[_("p",null,[v(" copyright © "+k(u(Qn)(u(r).siteConfig.createSiteTime,"YYYY"))+" - "+k(new Date().getFullYear())+" by ",1),_("b",null,k((l=u(r).siteConfig.siteAuthor)==null?void 0:l.toUpperCase()),1)]),_("a",_t,k(u(r).siteConfig.recordNumber),1)])):Q("",!0)}}});const yt=X(ht,[["__scopeId","data-v-9ca628a6"]]),bt={key:0},ft={key:1},vt={key:2},Tt={key:3},xt=L({__name:"LoadViewer",props:{status:{type:Number,default:0,required:!0,validator:n=>[-1,0,1,2].indexOf(n)!==-1},noDataMsg:{type:String,default:"目前还没有数据哦~"},failedMsg:{type:String,default:"加载失败"},displayWhenEmpty:{type:Boolean,default:!0},displayWhenFailed:{type:Boolean,default:!0}},setup(n){return(r,e)=>{const s=lr,i=kn;return n.status===1?(h(),x("div",bt,[V(r.$slots,"data")])):n.status===2?(h(),x("div",ft,[V(r.$slots,"no-data",{},()=>[n.displayWhenEmpty?(h(),S(i,{key:0,justify:"center",align:"center"},{default:c(()=>[t(s,{type:"error",style:{"font-weight":"bold"}},{default:c(()=>[v(k(n.noDataMsg),1)]),_:1})]),_:1})):Q("",!0)])])):n.status===0?(h(),x("div",vt,[V(r.$slots,"loading")])):(h(),x("div",Tt,[V(r.$slots,"fail",{},()=>[n.displayWhenFailed?(h(),S(i,{key:0,justify:"center",align:"center"},{default:c(()=>[t(s,{type:"error",style:{"font-weight":"bold"}},{default:c(()=>[v(k(n.failedMsg),1)]),_:1})]),_:1})):Q("",!0)])]))}}}),_n=n=>(cn("data-v-cc7dee6e"),n=n(),pn(),n),wt={class:"author-info"},Ft={class:"author-name"},Et={class:"site-intro"},kt={class:"blog-info"},Mt={class:"blog-item"},Lt={class:"count"},St=_n(()=>_("div",{class:"name"},"文章",-1)),zt={class:"blog-item"},At={class:"count"},Ct=_n(()=>_("div",{class:"name"},"分类",-1)),Nt={class:"blog-item"},Bt={class:"count"},Ht=_n(()=>_("div",{class:"name"},"标签",-1)),Pt={class:"social-info"},jt=["href"],Xt=["href"],Qt=["href"],It=["href"],Dt={class:"author-info"},Ot={class:"blog-info"},Rt={class:"blog-item"},qt={class:"blog-item"},$t={class:"blog-item"},Ut={class:"social-info"},Vt=L({__name:"Author",props:{card:{type:Boolean,default:!0}},setup(n){const{blogStore:r}=C(),e=H(()=>s=>r.siteConfig.socialList.includes(s));return(s,i)=>{const l=Mn,p=J("router-link"),o=G,d=cr,g=pr,a=xt;return h(),x("div",{class:I(n.card?"side-card":"")},[t(a,{status:u(r).status,"failed-msg":"作者信息加载失败"},{data:c(()=>[_("div",wt,[t(l,{class:"author-avatar",round:"",size:150,src:u(r).siteConfig.authorAvatar},null,8,["src"]),_("p",Ft,k(u(r).siteConfig.siteAuthor),1),_("div",Et,k(u(r).siteConfig.siteIntro),1)]),_("div",kt,[_("div",Mt,[t(p,{to:"/archive"},{default:c(()=>[_("div",Lt,k(u(r).articleCount),1),St]),_:1})]),_("div",zt,[t(p,{to:"/category"},{default:c(()=>[_("div",At,k(u(r).categoryCount),1),Ct]),_:1})]),_("div",Nt,[t(p,{to:"/tag"},{default:c(()=>[_("div",Bt,k(u(r).tagCount),1),Ht]),_:1})])]),_("div",Pt,[u(e)("github")?(h(),S(d,{key:0,trigger:"hover",placement:"bottom"},{trigger:c(()=>[_("a",{target:"_blank",href:u(r).siteConfig.github,class:"social-item"},[t(o,{"icon-class":"github",size:"1.4rem"})],8,jt)]),default:c(()=>[v(" github ")]),_:1})):Q("",!0),u(e)("gitee")?(h(),S(d,{key:1,trigger:"hover",placement:"bottom"},{trigger:c(()=>[_("a",{target:"_blank",href:u(r).siteConfig.gitee,class:"social-item"},[t(o,{"icon-class":"gitee",size:"1.4rem"})],8,Xt)]),default:c(()=>[v(" gitee ")]),_:1})):Q("",!0),u(e)("bilibili")?(h(),S(d,{key:2,trigger:"hover",placement:"bottom"},{trigger:c(()=>[_("a",{target:"_blank",href:u(r).siteConfig.bilibili,class:"social-item"},[t(o,{"icon-class":"bilibili",size:"1.4rem"})],8,Qt)]),default:c(()=>[v(" bilibili ")]),_:1})):Q("",!0),u(e)("qq")?(h(),S(d,{key:3,trigger:"hover",placement:"bottom"},{trigger:c(()=>[_("a",{target:"_blank",href:"https://wpa.qq.com/msgrd?v=3&uin="+u(r).siteConfig.qq+"&site=qq&menu=yes",class:"social-item"},[t(o,{"icon-class":"qq",size:"1.4rem",color:"#00a1d6"})],8,It)]),default:c(()=>[v(" qq ")]),_:1})):Q("",!0)])]),loading:c(()=>[_("div",Dt,[t(g,{class:"author-avatar",circle:"",width:"150px"}),t(g,{class:"author-name",round:"",width:"70px"}),t(g,{class:"site-intro",round:"",width:"100px"})]),_("div",Ot,[_("div",Rt,[t(g,{class:"mb5",round:"",width:"30px"}),t(g,{class:"mb5",round:"",width:"30px"})]),_("div",qt,[t(g,{class:"mb5",round:"",width:"30px"}),t(g,{class:"mb5",round:"",width:"30px"})]),_("div",$t,[t(g,{class:"mb5",round:"",width:"30px"}),t(g,{class:"mb5",round:"",width:"30px"})])]),_("div",Ut,[t(g,{circle:"",size:"small",class:"social-item"}),t(g,{circle:"",size:"small",class:"social-item"}),t(g,{circle:"",size:"small",class:"social-item"}),t(g,{circle:"",size:"small",class:"social-item"})])]),_:1},8,["status"])],2)}}});const Yt=X(Vt,[["__scopeId","data-v-cc7dee6e"]]),Kt={class:"side-menu"},Gt={key:0,class:"item"},Jt={class:"item"},Wt=L({__name:"SideDrawer",setup(n){const r=sn(),e=gr(),{appStore:s,userStore:i}=C(),{width:l}=Wn(),p=s.local?Ke:Ye,o=H({get:()=>s.sideDrawer,set:g=>s.sideDrawer=g});Un(()=>{l.value>991&&(s.sideDrawer=!1)});const d=()=>{r.path=="/user"&&e.go(-1),i.logout(),M.msgSuccess("注销成功")};return(g,a)=>{const f=Yt,w=G,m=J("router-link"),E=mr,b=dr;return h(),S(b,{show:u(o),"onUpdate:show":a[1]||(a[1]=y=>K(o)?o.value=y:null),width:240,"block-scroll":!1,placement:"right"},{default:c(()=>[t(E,{style:{"padding-top":"0.5rem"}},{default:c(()=>[t(f,{class:"side-author",card:!1}),_("ul",Kt,[(h(!0),x(Y,null,an(u(p),y=>(h(),x("li",{key:y.name,class:I(["item",{active:u(r).path===y.path}])},[t(m,{to:y.path},{default:c(()=>[t(w,{"icon-class":y.icon},null,8,["icon-class"]),v(" "+k(y.name),1)]),_:2},1032,["to"])],2))),128)),u(i).id?(h(),x(Y,{key:1},[_("li",{class:I(["item",{active:u(r).path==="/user"}])},[t(m,{to:"/user"},{default:c(()=>[t(w,{"icon-class":"author"}),v(" 个人中心 ")]),_:1})],2),_("li",Jt,[_("a",{onClick:d},[t(w,{"icon-class":"logout"}),v(" 注销登录 ")])])],64)):(h(),x("li",Gt,[_("a",{onClick:a[0]||(a[0]=y=>u(s).showLoginFrame())},[t(w,{"icon-class":"user"}),v(" 登录 ")])]))])]),_:1})]),_:1},8,["show"])}}});const Zt=X(Wt,[["__scopeId","data-v-e44ec825"]]),ns=L({__name:"RegisterDialog",setup(n){const r=F(null),e={username:{required:!0,message:"请输入邮箱",trigger:["blur","input"]},password:{required:!0,message:"请输入密码",trigger:["blur","input"]},code:{required:!0,message:"请输入6位验证码",trigger:["blur","input"]}},{appStore:s,userStore:i}=C(),l=F(0),p=F(!1),o=F(!1),d=F({username:"",password:"",code:""}),{pause:g,resume:a}=mn(()=>{l.value--,l.value<=0&&(g(),p.value=!1)},1e3,{immediate:!1}),f=y=>{p.value=!0,l.value=y,a()},w=()=>{if(!/^[A-Za-z0-9\u4e00-\u9fa5]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/.test(d.value.username)){M.msgWarning("邮箱格式不正确");return}f(60),q.sendCode(d.value.username).then(()=>{M.msgSuccess("发送成功")})},m=()=>{var y;(y=r.value)==null||y.validate(T=>{T||(o.value=!0,q.register(d.value).then(()=>{let z={username:d.value.username,password:d.value.password};i.login(z).then(()=>{d.value={username:"",password:"",code:""},s.registerFrame=!1}),o.value=!1}).catch(()=>{o.value=!1}))})},E=H({get:()=>s.registerFrame,set:y=>s.registerFrame=y}),b=()=>{s.registerFrame=!1,s.showLoginFrame()};return(y,T)=>{const z=Z,P=nn,A=rn,U=dn,j=en,D=tn;return h(),S(D,{class:"bg",show:u(E),"onUpdate:show":T[3]||(T[3]=O=>K(E)?E.value=O:null),preset:"dialog","show-icon":!1,title:"注册","transform-origin":"center","block-scroll":!1},{default:c(()=>[t(j,{ref_key:"formRef",ref:r,rules:e,model:d.value,"label-placement":"left",class:"mt20"},{default:c(()=>[t(P,{label:"邮箱",path:"username"},{default:c(()=>[t(z,{class:"dialog-input",placeholder:"",value:d.value.username,"onUpdate:value":T[0]||(T[0]=O=>d.value.username=O)},null,8,["value"])]),_:1}),t(P,{label:"密码",path:"password"},{default:c(()=>[t(z,{class:"dialog-input",type:"password",placeholder:"",value:d.value.password,"onUpdate:value":T[1]||(T[1]=O=>d.value.password=O)},null,8,["value"])]),_:1}),t(P,{label:"验证码",path:"code"},{default:c(()=>[t(U,null,{default:c(()=>[t(z,{class:"dialog-input",placeholder:"",value:d.value.code,"onUpdate:value":T[2]||(T[2]=O=>d.value.code=O)},null,8,["value"]),t(A,{type:"success",secondary:"",disabled:p.value,onClick:w},{default:c(()=>[v(k(l.value==0?"发送":`${l.value}s`),1)]),_:1},8,["disabled"])]),_:1})]),_:1}),t(P,null,{default:c(()=>[t(A,{ref:"registerRef",secondary:"",type:"error",style:{width:"100%"},loading:o.value,onClick:m},{default:c(()=>[v(" 注册 ")]),_:1},8,["loading"])]),_:1})]),_:1},8,["model"]),v(" 已有账号？ "),t(A,{text:"",onClick:b},{default:c(()=>[v("立即登录")]),_:1})]),_:1},8,["show"])}}}),In={updatePassword(n){return B({url:"/user/password",method:"put",data:n})},updateEmail(n){return B({url:"/user/email",method:"put",data:n})},updateAvatar(n){return B({url:"/user/avatar",method:"post",headers:{"content-type":"multipart/form-data"},data:n})},updateUserInfo(n){return B({url:"/user/info",method:"put",data:n})}},rs=L({__name:"EmailDialog",setup(n){const r=F(null),e={email:{required:!0,message:"请输入邮箱",trigger:["blur","input"]},code:{required:!0,message:"请输入6位验证码",trigger:["blur","input"]}},{appStore:s,userStore:i}=C(),l=F(0),p=F(!1),o=F(!1),d=F({email:"",code:""}),{pause:g,resume:a}=mn(()=>{l.value--,l.value<=0&&(g(),p.value=!1)},1e3,{immediate:!1}),f=b=>{p.value=!0,l.value=b,a()},w=()=>{if(!/^[A-Za-z0-9\u4e00-\u9fa5]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/.test(d.value.email)){M.msgWarning("邮箱格式不正确");return}f(60),q.sendCode(d.value.email).then(()=>{M.msgSuccess("发送成功")}).catch(()=>{})},m=H({get:()=>s.emailFrame,set:b=>s.emailFrame=b}),E=()=>{var b;(b=r.value)==null||b.validate(y=>{y||(o.value=!0,In.updateEmail(d.value).then(()=>{M.msgSuccess("修改成功"),i.email=d.value.email,d.value={email:"",code:""},s.emailFrame=!1,o.value=!1}).catch(()=>{o.value=!1}))})};return(b,y)=>{const T=Z,z=nn,P=rn,A=dn,U=en,j=tn;return h(),S(j,{class:"bg",title:"邮箱",show:u(m),"onUpdate:show":y[2]||(y[2]=D=>K(m)?m.value=D:null),preset:"dialog","show-icon":!1,"transform-origin":"center",style:{"padding-bottom":"2rem"},"block-scroll":!1},{default:c(()=>[t(U,{ref_key:"formRef",ref:r,rules:e,model:d.value,"label-placement":"left",class:"mt20"},{default:c(()=>[t(z,{label:"邮箱",path:"email"},{default:c(()=>[t(T,{class:"dialog-input",placeholder:"",value:d.value.email,"onUpdate:value":y[0]||(y[0]=D=>d.value.email=D)},null,8,["value"])]),_:1}),t(z,{label:"验证码",path:"code"},{default:c(()=>[t(A,null,{default:c(()=>[t(T,{class:"dialog-input",placeholder:"",value:d.value.code,"onUpdate:value":y[1]||(y[1]=D=>d.value.code=D)},null,8,["value"]),t(P,{type:"success",secondary:"",disabled:p.value,onClick:w},{default:c(()=>[v(k(l.value==0?"发送":`${l.value}s`),1)]),_:1},8,["disabled"])]),_:1})]),_:1}),t(z,null,{default:c(()=>[t(P,{ref:"registerRef",secondary:"",type:"error",style:{width:"100%"},loading:o.value,onClick:E},{default:c(()=>[v(" 绑定 ")]),_:1},8,["loading"])]),_:1})]),_:1},8,["model"])]),_:1},8,["show"])}}}),es=L({__name:"PasswordDialog",setup(n){const r=F(null),e={username:{required:!0,message:"请输入邮箱",trigger:["blur","input"]},password:{required:!0,message:"请输入密码",trigger:["blur","input"]},code:{required:!0,message:"请输入6位验证码",trigger:["blur","input"]}},{appStore:s}=C(),i=F(0),l=F(!1),p=F(!1),o=F({username:"",password:"",code:""}),{pause:d,resume:g}=mn(()=>{i.value--,i.value<=0&&(d(),l.value=!1)},1e3,{immediate:!1}),a=E=>{l.value=!0,i.value=E,g()},f=()=>{if(!/^[A-Za-z0-9\u4e00-\u9fa5]+@[a-zA-Z0-9_-]+(\.[a-zA-Z0-9_-]+)+$/.test(o.value.username)){M.msgWarning("邮箱格式不正确");return}a(60),q.sendCode(o.value.username).then(()=>{M.msgSuccess("发送成功")}).catch(()=>{})},w=()=>{if(o.value.code.trim().length!=6){M.msgWarning("请输入6位验证码");return}if(o.value.password.trim().length<6){M.msgWarning("密码不能少于6位");return}p.value=!0,In.updatePassword(o.value).then(()=>{M.msgSuccess("修改成功"),o.value={username:"",password:"",code:""},s.passwordFrame=!1,p.value=!1}).catch(()=>{})},m=H({get:()=>s.passwordFrame,set:E=>s.passwordFrame=E});return(E,b)=>{const y=Z,T=nn,z=rn,P=dn,A=en,U=tn;return h(),S(U,{title:"忘记密码",class:"bg",show:u(m),"onUpdate:show":b[3]||(b[3]=j=>K(m)?m.value=j:null),preset:"dialog","show-icon":!1,"transform-origin":"center","block-scroll":!1},{default:c(()=>[t(A,{ref_key:"formRef",ref:r,rules:e,model:o.value,"label-placement":"left",class:"mt20"},{default:c(()=>[t(T,{label:"邮箱",path:"username"},{default:c(()=>[t(y,{class:"dialog-input",placeholder:"",value:o.value.username,"onUpdate:value":b[0]||(b[0]=j=>o.value.username=j)},null,8,["value"])]),_:1}),t(T,{label:"新密码",path:"password"},{default:c(()=>[t(y,{class:"dialog-input",type:"password",placeholder:"",value:o.value.password,"onUpdate:value":b[1]||(b[1]=j=>o.value.password=j)},null,8,["value"])]),_:1}),t(T,{label:"验证码",path:"code"},{default:c(()=>[t(P,null,{default:c(()=>[t(y,{class:"dialog-input",placeholder:"",value:o.value.code,"onUpdate:value":b[2]||(b[2]=j=>o.value.code=j)},null,8,["value"]),t(z,{type:"success",secondary:"",disabled:l.value,onClick:f},{default:c(()=>[v(k(i.value==0?"发送":`${i.value}s`),1)]),_:1},8,["disabled"])]),_:1})]),_:1}),t(T,null,{default:c(()=>[t(z,{secondary:"",type:"error",style:{width:"100%"},loading:p.value,onClick:w},{default:c(()=>[v(" 确定 ")]),_:1},8,["loading"])]),_:1})]),_:1},8,["model"])]),_:1},8,["show"])}}}),ts={class:"app-wrapper"},ss=L({__name:"index",setup(n){return(r,e)=>{const s=Pe,i=He,l=Er;return h(),S(l,null,{default:c(()=>[_("div",ts,[t(mt),t(ut),t(yt),t(Zt),t(s),t(ns),t(rs),t(es),t(i)])]),_:1})}}});const as=X(ss,[["__scopeId","data-v-4420a7ad"]]),os={getBlogInfo:()=>B({url:"/info",method:"get"}),report:()=>B({url:"/report",method:"get"})},is=L({__name:"App",setup(n){const{blogStore:r,appStore:e}=C();return e.setLocalMode(),ln(()=>{console.log("%c Shoka-Blog : LOCAL MODE %c By juliy %c","background:#e9546b ; padding: 1px; border-radius: 3px 0 0 3px;  color: #fff; padding:5px 0;","background:#ec8c69 ; padding: 1px; border-radius: 0 3px 3px 0;  color: #000; padding:5px 0;","background:transparent"),os.report().catch(()=>{})}),(s,i)=>(h(),S(as))}}),ls="modulepreload",cs=function(n){return"/"+n},xn={},N=function(r,e,s){if(!e||e.length===0)return r();const i=document.getElementsByTagName("link");return Promise.all(e.map(l=>{if(l=cs(l),l in xn)return;xn[l]=!0;const p=l.endsWith(".css"),o=p?'[rel="stylesheet"]':"";if(!!s)for(let a=i.length-1;a>=0;a--){const f=i[a];if(f.href===l&&(!p||f.rel==="stylesheet"))return}else if(document.querySelector(`link[href="${l}"]${o}`))return;const g=document.createElement("link");if(g.rel=p?"stylesheet":ls,p||(g.as="script",g.crossOrigin=""),g.href=l,document.head.appendChild(g),p)return new Promise((a,f)=>{g.addEventListener("load",a),g.addEventListener("error",()=>f(new Error(`Unable to preload CSS for ${l}`)))})})).then(()=>r())},ps=[{path:"/",name:"home",component:()=>N(()=>import("./index-484a0700.js"),["static/js/index-484a0700.js","static/js/WebInfo-853f8604.js","static/js/dayjs-aaaa0bae.js","static/js/@babel-061b4810.js","static/js/@vue-2d0ddfb4.js","static/js/naive-ui-b87942d2.js","static/js/vueuc-27e3b830.js","static/js/evtd-b614532e.js","static/js/seemly-76b7b838.js","static/js/@css-render-c34b42f4.js","static/js/vooks-d838407f.js","static/js/vdirs-b0483831.js","static/js/@juggle-41516555.js","static/js/css-render-d3958e6a.js","static/js/@emotion-8a8e73f6.js","static/js/lodash-es-0dc9900e.js","static/js/treemate-25c27bff.js","static/js/async-validator-dee29e8b.js","static/js/date-fns-975a2d8f.js","static/css/WebInfo-53d7d1cc.css","static/js/index-9bfe1da5.js","static/js/Waves-e4859cde.js","static/css/Waves-05a941bd.css","static/js/easy-typer-js-e6b30bed.js","static/js/swiper-d1934b6f.js","static/js/ssr-window-c9202916.js","static/css/swiper-52f6d44c.css","static/js/index-44553baa.js","static/js/index-b5bbc619.js","static/js/MyImage-3d8873bc.js","static/css/MyImage-8c4af35c.css","static/js/Pagination.vue_vue_type_script_setup_true_lang-c22c867b.js","static/js/pinia-948ba97c.js","static/js/vue-demi-71ba0ef2.js","static/js/pinia-plugin-persist-4bd0ee57.js","static/js/nprogress-29a3b628.js","static/css/nprogress-8b89e2e0.css","static/js/@vueuse-4d6fb19c.js","static/js/js-cookie-cf83ad76.js","static/js/axios-aba6f0e0.js","static/js/vue-router-2a5450bb.js","static/js/@kangc-6220f0f5.js","static/js/vue-a1bd1397.js","static/js/markdown-it-emoji-4f1b57fa.js","static/css/@kangc-b85375d8.css","static/js/prismjs-08ac3f6b.js","static/css/prismjs-3910d759.css","static/js/v-viewer-8afc779e.js","static/js/viewerjs-3fd8af48.js","static/css/viewerjs-945bd050.css","static/css/index-7e499dbe.css"])},{path:"/about",name:"about",component:()=>N(()=>import("./index-f02d6e99.js"),["static/js/index-f02d6e99.js","static/js/Waves-e4859cde.js","static/js/@vue-2d0ddfb4.js","static/css/Waves-05a941bd.css","static/js/naive-ui-b87942d2.js","static/js/vueuc-27e3b830.js","static/js/evtd-b614532e.js","static/js/seemly-76b7b838.js","static/js/@css-render-c34b42f4.js","static/js/vooks-d838407f.js","static/js/vdirs-b0483831.js","static/js/@juggle-41516555.js","static/js/css-render-d3958e6a.js","static/js/@emotion-8a8e73f6.js","static/js/lodash-es-0dc9900e.js","static/js/treemate-25c27bff.js","static/js/async-validator-dee29e8b.js","static/js/date-fns-975a2d8f.js","static/js/pinia-948ba97c.js","static/js/vue-demi-71ba0ef2.js","static/js/pinia-plugin-persist-4bd0ee57.js","static/js/nprogress-29a3b628.js","static/js/@babel-061b4810.js","static/css/nprogress-8b89e2e0.css","static/js/@vueuse-4d6fb19c.js","static/js/js-cookie-cf83ad76.js","static/js/axios-aba6f0e0.js","static/js/vue-router-2a5450bb.js","static/js/dayjs-aaaa0bae.js","static/js/swiper-d1934b6f.js","static/js/ssr-window-c9202916.js","static/css/swiper-52f6d44c.css","static/js/@kangc-6220f0f5.js","static/js/vue-a1bd1397.js","static/js/markdown-it-emoji-4f1b57fa.js","static/css/@kangc-b85375d8.css","static/js/prismjs-08ac3f6b.js","static/css/prismjs-3910d759.css","static/js/v-viewer-8afc779e.js","static/js/viewerjs-3fd8af48.js","static/css/viewerjs-945bd050.css"])},{path:"/archive",name:"archive",component:()=>N(()=>import("./index-72c7226d.js"),["static/js/index-72c7226d.js","static/js/Pagination.vue_vue_type_script_setup_true_lang-c22c867b.js","static/js/naive-ui-b87942d2.js","static/js/@vue-2d0ddfb4.js","static/js/vueuc-27e3b830.js","static/js/evtd-b614532e.js","static/js/seemly-76b7b838.js","static/js/@css-render-c34b42f4.js","static/js/vooks-d838407f.js","static/js/vdirs-b0483831.js","static/js/@juggle-41516555.js","static/js/css-render-d3958e6a.js","static/js/@emotion-8a8e73f6.js","static/js/lodash-es-0dc9900e.js","static/js/treemate-25c27bff.js","static/js/async-validator-dee29e8b.js","static/js/date-fns-975a2d8f.js","static/js/Waves-e4859cde.js","static/css/Waves-05a941bd.css","static/js/pinia-948ba97c.js","static/js/vue-demi-71ba0ef2.js","static/js/pinia-plugin-persist-4bd0ee57.js","static/js/nprogress-29a3b628.js","static/js/@babel-061b4810.js","static/css/nprogress-8b89e2e0.css","static/js/@vueuse-4d6fb19c.js","static/js/js-cookie-cf83ad76.js","static/js/axios-aba6f0e0.js","static/js/vue-router-2a5450bb.js","static/js/dayjs-aaaa0bae.js","static/js/swiper-d1934b6f.js","static/js/ssr-window-c9202916.js","static/css/swiper-52f6d44c.css","static/js/@kangc-6220f0f5.js","static/js/vue-a1bd1397.js","static/js/markdown-it-emoji-4f1b57fa.js","static/css/@kangc-b85375d8.css","static/js/prismjs-08ac3f6b.js","static/css/prismjs-3910d759.css","static/js/v-viewer-8afc779e.js","static/js/viewerjs-3fd8af48.js","static/css/viewerjs-945bd050.css","static/css/index-59aebb9e.css"])},{path:"/article/:id",name:"article",component:()=>N(()=>import("./index-c84f75b2.js"),["static/js/index-c84f75b2.js","static/js/@vueuse-4d6fb19c.js","static/js/@vue-2d0ddfb4.js","static/js/index-03919f29.js","static/js/naive-ui-b87942d2.js","static/js/vueuc-27e3b830.js","static/js/evtd-b614532e.js","static/js/seemly-76b7b838.js","static/js/@css-render-c34b42f4.js","static/js/vooks-d838407f.js","static/js/vdirs-b0483831.js","static/js/@juggle-41516555.js","static/js/css-render-d3958e6a.js","static/js/@emotion-8a8e73f6.js","static/js/lodash-es-0dc9900e.js","static/js/treemate-25c27bff.js","static/js/async-validator-dee29e8b.js","static/js/date-fns-975a2d8f.js","static/js/index-9bfe1da5.js","static/js/vue-router-2a5450bb.js","static/css/index-28a316d3.css","static/js/Waves-e4859cde.js","static/css/Waves-05a941bd.css","static/js/index-b5bbc619.js","static/js/pinia-948ba97c.js","static/js/vue-demi-71ba0ef2.js","static/js/pinia-plugin-persist-4bd0ee57.js","static/js/nprogress-29a3b628.js","static/js/@babel-061b4810.js","static/css/nprogress-8b89e2e0.css","static/js/js-cookie-cf83ad76.js","static/js/axios-aba6f0e0.js","static/js/dayjs-aaaa0bae.js","static/js/swiper-d1934b6f.js","static/js/ssr-window-c9202916.js","static/css/swiper-52f6d44c.css","static/js/@kangc-6220f0f5.js","static/js/vue-a1bd1397.js","static/js/markdown-it-emoji-4f1b57fa.js","static/css/@kangc-b85375d8.css","static/js/prismjs-08ac3f6b.js","static/css/prismjs-3910d759.css","static/js/v-viewer-8afc779e.js","static/js/viewerjs-3fd8af48.js","static/css/viewerjs-945bd050.css","static/css/index-83c62af2.css"])},{path:"/category",name:"categoryList",component:()=>N(()=>import("./index-7e151ac5.js"),["static/js/index-7e151ac5.js","static/js/@vueuse-4d6fb19c.js","static/js/@vue-2d0ddfb4.js","static/js/echarts-654753dc.js","static/js/zrender-d7f7ee45.js","static/js/tslib-54e39b60.js","static/js/Waves-e4859cde.js","static/css/Waves-05a941bd.css","static/js/index-55d9f0ba.js","static/js/naive-ui-b87942d2.js","static/js/vueuc-27e3b830.js","static/js/evtd-b614532e.js","static/js/seemly-76b7b838.js","static/js/@css-render-c34b42f4.js","static/js/vooks-d838407f.js","static/js/vdirs-b0483831.js","static/js/@juggle-41516555.js","static/js/css-render-d3958e6a.js","static/js/@emotion-8a8e73f6.js","static/js/lodash-es-0dc9900e.js","static/js/treemate-25c27bff.js","static/js/async-validator-dee29e8b.js","static/js/date-fns-975a2d8f.js","static/js/pinia-948ba97c.js","static/js/vue-demi-71ba0ef2.js","static/js/pinia-plugin-persist-4bd0ee57.js","static/js/nprogress-29a3b628.js","static/js/@babel-061b4810.js","static/css/nprogress-8b89e2e0.css","static/js/js-cookie-cf83ad76.js","static/js/axios-aba6f0e0.js","static/js/vue-router-2a5450bb.js","static/js/dayjs-aaaa0bae.js","static/js/swiper-d1934b6f.js","static/js/ssr-window-c9202916.js","static/css/swiper-52f6d44c.css","static/js/@kangc-6220f0f5.js","static/js/vue-a1bd1397.js","static/js/markdown-it-emoji-4f1b57fa.js","static/css/@kangc-b85375d8.css","static/js/prismjs-08ac3f6b.js","static/css/prismjs-3910d759.css","static/js/v-viewer-8afc779e.js","static/js/viewerjs-3fd8af48.js","static/css/viewerjs-945bd050.css","static/css/index-f3e89afd.css"])},{path:"/category/:id",name:"category",component:()=>N(()=>import("./ArticleList-fd6eb86e.js"),["static/js/ArticleList-fd6eb86e.js","static/js/Waves-e4859cde.js","static/js/@vue-2d0ddfb4.js","static/css/Waves-05a941bd.css","static/js/index-55d9f0ba.js","static/js/MyImage-3d8873bc.js","static/js/naive-ui-b87942d2.js","static/js/vueuc-27e3b830.js","static/js/evtd-b614532e.js","static/js/seemly-76b7b838.js","static/js/@css-render-c34b42f4.js","static/js/vooks-d838407f.js","static/js/vdirs-b0483831.js","static/js/@juggle-41516555.js","static/js/css-render-d3958e6a.js","static/js/@emotion-8a8e73f6.js","static/js/lodash-es-0dc9900e.js","static/js/treemate-25c27bff.js","static/js/async-validator-dee29e8b.js","static/js/date-fns-975a2d8f.js","static/css/MyImage-8c4af35c.css","static/js/Pagination.vue_vue_type_script_setup_true_lang-c22c867b.js","static/js/vue-router-2a5450bb.js","static/js/pinia-948ba97c.js","static/js/vue-demi-71ba0ef2.js","static/js/pinia-plugin-persist-4bd0ee57.js","static/js/nprogress-29a3b628.js","static/js/@babel-061b4810.js","static/css/nprogress-8b89e2e0.css","static/js/@vueuse-4d6fb19c.js","static/js/js-cookie-cf83ad76.js","static/js/axios-aba6f0e0.js","static/js/dayjs-aaaa0bae.js","static/js/swiper-d1934b6f.js","static/js/ssr-window-c9202916.js","static/css/swiper-52f6d44c.css","static/js/@kangc-6220f0f5.js","static/js/vue-a1bd1397.js","static/js/markdown-it-emoji-4f1b57fa.js","static/css/@kangc-b85375d8.css","static/js/prismjs-08ac3f6b.js","static/css/prismjs-3910d759.css","static/js/v-viewer-8afc779e.js","static/js/viewerjs-3fd8af48.js","static/css/viewerjs-945bd050.css","static/css/ArticleList-40d3f74b.css"])},{path:"/message",name:"message",component:()=>N(()=>import("./index-a290ef51.js"),["static/js/index-a290ef51.js","static/js/@vue-2d0ddfb4.js","static/js/vue3-danmaku-b2e7f713.js","static/js/naive-ui-b87942d2.js","static/js/vueuc-27e3b830.js","static/js/evtd-b614532e.js","static/js/seemly-76b7b838.js","static/js/@css-render-c34b42f4.js","static/js/vooks-d838407f.js","static/js/vdirs-b0483831.js","static/js/@juggle-41516555.js","static/js/css-render-d3958e6a.js","static/js/@emotion-8a8e73f6.js","static/js/lodash-es-0dc9900e.js","static/js/treemate-25c27bff.js","static/js/async-validator-dee29e8b.js","static/js/date-fns-975a2d8f.js","static/js/pinia-948ba97c.js","static/js/vue-demi-71ba0ef2.js","static/js/pinia-plugin-persist-4bd0ee57.js","static/js/nprogress-29a3b628.js","static/js/@babel-061b4810.js","static/css/nprogress-8b89e2e0.css","static/js/@vueuse-4d6fb19c.js","static/js/js-cookie-cf83ad76.js","static/js/axios-aba6f0e0.js","static/js/vue-router-2a5450bb.js","static/js/dayjs-aaaa0bae.js","static/js/swiper-d1934b6f.js","static/js/ssr-window-c9202916.js","static/css/swiper-52f6d44c.css","static/js/@kangc-6220f0f5.js","static/js/vue-a1bd1397.js","static/js/markdown-it-emoji-4f1b57fa.js","static/css/@kangc-b85375d8.css","static/js/prismjs-08ac3f6b.js","static/css/prismjs-3910d759.css","static/js/v-viewer-8afc779e.js","static/js/viewerjs-3fd8af48.js","static/css/viewerjs-945bd050.css","static/css/index-2fcb0d7d.css"])},{path:"/tag",name:"tagList",component:()=>N(()=>import("./index-f18b5cf9.js"),["static/js/index-f18b5cf9.js","static/js/Waves-e4859cde.js","static/js/@vue-2d0ddfb4.js","static/css/Waves-05a941bd.css","static/js/index-b46a78ec.js","static/js/naive-ui-b87942d2.js","static/js/vueuc-27e3b830.js","static/js/evtd-b614532e.js","static/js/seemly-76b7b838.js","static/js/@css-render-c34b42f4.js","static/js/vooks-d838407f.js","static/js/vdirs-b0483831.js","static/js/@juggle-41516555.js","static/js/css-render-d3958e6a.js","static/js/@emotion-8a8e73f6.js","static/js/lodash-es-0dc9900e.js","static/js/treemate-25c27bff.js","static/js/async-validator-dee29e8b.js","static/js/date-fns-975a2d8f.js","static/js/pinia-948ba97c.js","static/js/vue-demi-71ba0ef2.js","static/js/pinia-plugin-persist-4bd0ee57.js","static/js/nprogress-29a3b628.js","static/js/@babel-061b4810.js","static/css/nprogress-8b89e2e0.css","static/js/@vueuse-4d6fb19c.js","static/js/js-cookie-cf83ad76.js","static/js/axios-aba6f0e0.js","static/js/vue-router-2a5450bb.js","static/js/dayjs-aaaa0bae.js","static/js/swiper-d1934b6f.js","static/js/ssr-window-c9202916.js","static/css/swiper-52f6d44c.css","static/js/@kangc-6220f0f5.js","static/js/vue-a1bd1397.js","static/js/markdown-it-emoji-4f1b57fa.js","static/css/@kangc-b85375d8.css","static/js/prismjs-08ac3f6b.js","static/css/prismjs-3910d759.css","static/js/v-viewer-8afc779e.js","static/js/viewerjs-3fd8af48.js","static/css/viewerjs-945bd050.css","static/css/index-bd5e81f4.css"])},{path:"/tag/:id",name:"tag",component:()=>N(()=>import("./ArticleList-0105d98c.js"),["static/js/ArticleList-0105d98c.js","static/js/Waves-e4859cde.js","static/js/@vue-2d0ddfb4.js","static/css/Waves-05a941bd.css","static/js/index-b46a78ec.js","static/js/MyImage-3d8873bc.js","static/js/naive-ui-b87942d2.js","static/js/vueuc-27e3b830.js","static/js/evtd-b614532e.js","static/js/seemly-76b7b838.js","static/js/@css-render-c34b42f4.js","static/js/vooks-d838407f.js","static/js/vdirs-b0483831.js","static/js/@juggle-41516555.js","static/js/css-render-d3958e6a.js","static/js/@emotion-8a8e73f6.js","static/js/lodash-es-0dc9900e.js","static/js/treemate-25c27bff.js","static/js/async-validator-dee29e8b.js","static/js/date-fns-975a2d8f.js","static/css/MyImage-8c4af35c.css","static/js/Pagination.vue_vue_type_script_setup_true_lang-c22c867b.js","static/js/vue-router-2a5450bb.js","static/js/pinia-948ba97c.js","static/js/vue-demi-71ba0ef2.js","static/js/pinia-plugin-persist-4bd0ee57.js","static/js/nprogress-29a3b628.js","static/js/@babel-061b4810.js","static/css/nprogress-8b89e2e0.css","static/js/@vueuse-4d6fb19c.js","static/js/js-cookie-cf83ad76.js","static/js/axios-aba6f0e0.js","static/js/dayjs-aaaa0bae.js","static/js/swiper-d1934b6f.js","static/js/ssr-window-c9202916.js","static/css/swiper-52f6d44c.css","static/js/@kangc-6220f0f5.js","static/js/vue-a1bd1397.js","static/js/markdown-it-emoji-4f1b57fa.js","static/css/@kangc-b85375d8.css","static/js/prismjs-08ac3f6b.js","static/css/prismjs-3910d759.css","static/js/v-viewer-8afc779e.js","static/js/viewerjs-3fd8af48.js","static/css/viewerjs-945bd050.css","static/css/ArticleList-c5583722.css"])},{path:"/talk",name:"talkList",component:()=>N(()=>import("./index-ce28fafe.js"),["static/js/index-ce28fafe.js","static/js/Waves-e4859cde.js","static/js/@vue-2d0ddfb4.js","static/css/Waves-05a941bd.css","static/js/index-44553baa.js","static/js/naive-ui-b87942d2.js","static/js/vueuc-27e3b830.js","static/js/evtd-b614532e.js","static/js/seemly-76b7b838.js","static/js/@css-render-c34b42f4.js","static/js/vooks-d838407f.js","static/js/vdirs-b0483831.js","static/js/@juggle-41516555.js","static/js/css-render-d3958e6a.js","static/js/@emotion-8a8e73f6.js","static/js/lodash-es-0dc9900e.js","static/js/treemate-25c27bff.js","static/js/async-validator-dee29e8b.js","static/js/date-fns-975a2d8f.js","static/js/pinia-948ba97c.js","static/js/vue-demi-71ba0ef2.js","static/js/pinia-plugin-persist-4bd0ee57.js","static/js/nprogress-29a3b628.js","static/js/@babel-061b4810.js","static/css/nprogress-8b89e2e0.css","static/js/@vueuse-4d6fb19c.js","static/js/js-cookie-cf83ad76.js","static/js/axios-aba6f0e0.js","static/js/vue-router-2a5450bb.js","static/js/dayjs-aaaa0bae.js","static/js/swiper-d1934b6f.js","static/js/ssr-window-c9202916.js","static/css/swiper-52f6d44c.css","static/js/@kangc-6220f0f5.js","static/js/vue-a1bd1397.js","static/js/markdown-it-emoji-4f1b57fa.js","static/css/@kangc-b85375d8.css","static/js/prismjs-08ac3f6b.js","static/css/prismjs-3910d759.css","static/js/v-viewer-8afc779e.js","static/js/viewerjs-3fd8af48.js","static/css/viewerjs-945bd050.css","static/css/index-84be025f.css"])},{path:"/talk/:id",name:"talk",component:()=>N(()=>import("./Talk-d99c5270.js"),["static/js/Talk-d99c5270.js","static/js/index-03919f29.js","static/js/@vue-2d0ddfb4.js","static/js/naive-ui-b87942d2.js","static/js/vueuc-27e3b830.js","static/js/evtd-b614532e.js","static/js/seemly-76b7b838.js","static/js/@css-render-c34b42f4.js","static/js/vooks-d838407f.js","static/js/vdirs-b0483831.js","static/js/@juggle-41516555.js","static/js/css-render-d3958e6a.js","static/js/@emotion-8a8e73f6.js","static/js/lodash-es-0dc9900e.js","static/js/treemate-25c27bff.js","static/js/async-validator-dee29e8b.js","static/js/date-fns-975a2d8f.js","static/js/index-9bfe1da5.js","static/js/vue-router-2a5450bb.js","static/css/index-28a316d3.css","static/js/Waves-e4859cde.js","static/css/Waves-05a941bd.css","static/js/index-44553baa.js","static/js/pinia-948ba97c.js","static/js/vue-demi-71ba0ef2.js","static/js/pinia-plugin-persist-4bd0ee57.js","static/js/nprogress-29a3b628.js","static/js/@babel-061b4810.js","static/css/nprogress-8b89e2e0.css","static/js/@vueuse-4d6fb19c.js","static/js/js-cookie-cf83ad76.js","static/js/axios-aba6f0e0.js","static/js/dayjs-aaaa0bae.js","static/js/swiper-d1934b6f.js","static/js/ssr-window-c9202916.js","static/css/swiper-52f6d44c.css","static/js/@kangc-6220f0f5.js","static/js/vue-a1bd1397.js","static/js/markdown-it-emoji-4f1b57fa.js","static/css/@kangc-b85375d8.css","static/js/prismjs-08ac3f6b.js","static/css/prismjs-3910d759.css","static/js/v-viewer-8afc779e.js","static/js/viewerjs-3fd8af48.js","static/css/viewerjs-945bd050.css","static/css/Talk-77ba7c54.css"])},{path:"/favourite",name:"favourite",component:()=>N(()=>import("./index-e6d0a62d.js"),["static/js/index-e6d0a62d.js","static/js/Waves-e4859cde.js","static/js/@vue-2d0ddfb4.js","static/css/Waves-05a941bd.css","static/js/naive-ui-b87942d2.js","static/js/vueuc-27e3b830.js","static/js/evtd-b614532e.js","static/js/seemly-76b7b838.js","static/js/@css-render-c34b42f4.js","static/js/vooks-d838407f.js","static/js/vdirs-b0483831.js","static/js/@juggle-41516555.js","static/js/css-render-d3958e6a.js","static/js/@emotion-8a8e73f6.js","static/js/lodash-es-0dc9900e.js","static/js/treemate-25c27bff.js","static/js/async-validator-dee29e8b.js","static/js/date-fns-975a2d8f.js","static/js/pinia-948ba97c.js","static/js/vue-demi-71ba0ef2.js","static/js/pinia-plugin-persist-4bd0ee57.js","static/js/nprogress-29a3b628.js","static/js/@babel-061b4810.js","static/css/nprogress-8b89e2e0.css","static/js/@vueuse-4d6fb19c.js","static/js/js-cookie-cf83ad76.js","static/js/axios-aba6f0e0.js","static/js/vue-router-2a5450bb.js","static/js/dayjs-aaaa0bae.js","static/js/swiper-d1934b6f.js","static/js/ssr-window-c9202916.js","static/css/swiper-52f6d44c.css","static/js/@kangc-6220f0f5.js","static/js/vue-a1bd1397.js","static/js/markdown-it-emoji-4f1b57fa.js","static/css/@kangc-b85375d8.css","static/js/prismjs-08ac3f6b.js","static/css/prismjs-3910d759.css","static/js/v-viewer-8afc779e.js","static/js/viewerjs-3fd8af48.js","static/css/viewerjs-945bd050.css","static/css/index-b19dece3.css"])},{path:"/user",name:"user",component:()=>N(()=>import("./index-5984557b.js"),["static/js/index-5984557b.js","static/js/Waves-e4859cde.js","static/js/@vue-2d0ddfb4.js","static/css/Waves-05a941bd.css","static/js/vue-cropper-e9236157.js","static/css/vue-cropper-61712170.css","static/js/naive-ui-b87942d2.js","static/js/vueuc-27e3b830.js","static/js/evtd-b614532e.js","static/js/seemly-76b7b838.js","static/js/@css-render-c34b42f4.js","static/js/vooks-d838407f.js","static/js/vdirs-b0483831.js","static/js/@juggle-41516555.js","static/js/css-render-d3958e6a.js","static/js/@emotion-8a8e73f6.js","static/js/lodash-es-0dc9900e.js","static/js/treemate-25c27bff.js","static/js/async-validator-dee29e8b.js","static/js/date-fns-975a2d8f.js","static/js/vue-router-2a5450bb.js","static/js/pinia-948ba97c.js","static/js/vue-demi-71ba0ef2.js","static/js/pinia-plugin-persist-4bd0ee57.js","static/js/nprogress-29a3b628.js","static/js/@babel-061b4810.js","static/css/nprogress-8b89e2e0.css","static/js/@vueuse-4d6fb19c.js","static/js/js-cookie-cf83ad76.js","static/js/axios-aba6f0e0.js","static/js/dayjs-aaaa0bae.js","static/js/swiper-d1934b6f.js","static/js/ssr-window-c9202916.js","static/css/swiper-52f6d44c.css","static/js/@kangc-6220f0f5.js","static/js/vue-a1bd1397.js","static/js/markdown-it-emoji-4f1b57fa.js","static/css/@kangc-b85375d8.css","static/js/prismjs-08ac3f6b.js","static/css/prismjs-3910d759.css","static/js/v-viewer-8afc779e.js","static/js/viewerjs-3fd8af48.js","static/css/viewerjs-945bd050.css","static/css/index-19c8a0b4.css"])},{path:"/:pathMatch(.*)*",name:"404",component:()=>N(()=>import("./index-d33b2acd.js"),["static/js/index-d33b2acd.js","static/js/WebInfo-853f8604.js","static/js/dayjs-aaaa0bae.js","static/js/@babel-061b4810.js","static/js/@vue-2d0ddfb4.js","static/js/naive-ui-b87942d2.js","static/js/vueuc-27e3b830.js","static/js/evtd-b614532e.js","static/js/seemly-76b7b838.js","static/js/@css-render-c34b42f4.js","static/js/vooks-d838407f.js","static/js/vdirs-b0483831.js","static/js/@juggle-41516555.js","static/js/css-render-d3958e6a.js","static/js/@emotion-8a8e73f6.js","static/js/lodash-es-0dc9900e.js","static/js/treemate-25c27bff.js","static/js/async-validator-dee29e8b.js","static/js/date-fns-975a2d8f.js","static/css/WebInfo-53d7d1cc.css","static/js/Waves-e4859cde.js","static/css/Waves-05a941bd.css","static/js/pinia-948ba97c.js","static/js/vue-demi-71ba0ef2.js","static/js/pinia-plugin-persist-4bd0ee57.js","static/js/nprogress-29a3b628.js","static/css/nprogress-8b89e2e0.css","static/js/@vueuse-4d6fb19c.js","static/js/js-cookie-cf83ad76.js","static/js/axios-aba6f0e0.js","static/js/vue-router-2a5450bb.js","static/js/swiper-d1934b6f.js","static/js/ssr-window-c9202916.js","static/css/swiper-52f6d44c.css","static/js/@kangc-6220f0f5.js","static/js/vue-a1bd1397.js","static/js/markdown-it-emoji-4f1b57fa.js","static/css/@kangc-b85375d8.css","static/js/prismjs-08ac3f6b.js","static/css/prismjs-3910d759.css","static/js/v-viewer-8afc779e.js","static/js/viewerjs-3fd8af48.js","static/css/viewerjs-945bd050.css","static/css/index-67c9db2a.css"])}],hn=_r({history:hr(),routes:ps});hn.beforeEach(async(n,r,e)=>{const{appStore:s}=C();n.name==="home"?(s.headerChangeHeight=700,document.title="SHOKA-BLOG"):s.headerChangeHeight=480,s.startLoading(),e()});hn.afterEach(()=>{const{appStore:n}=C();n.endLoading()});const ms={mounted(n,r){const{value:e}=r,{stop:s}=Zn(n,([{isIntersecting:i}])=>{if(i){s();const{top:l}=n.getBoundingClientRect(),p=document.documentElement.clientHeight||document.body.clientHeight;l<p&&(n.style.visibility="visible",n.style.animationName=e)}})}},$=Vn(is);$.directive("animate",ms);Sn.use(br,{Prism:Tr}).use(fr()).use(vr());$.use(zn);$.use(hn);$.use(Sn);$.use(xr);$.component("svg-icon",G);$.mount("#app");export{G as _,xt as a,X as b,C as c,Yt as d,B as e,Qn as f,$s as g,Vs as h,In as i,M as m,hn as r,Us as t,un as u};
